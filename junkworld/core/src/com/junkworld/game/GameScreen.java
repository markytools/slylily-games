package com.junkworld.game;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.InputMultiplexer;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.assets.AssetManager;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
import com.badlogic.gdx.input.GestureDetector;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.Touchable;
import com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.JsonReader;
import com.badlogic.gdx.utils.JsonValue;
import com.badlogic.gdx.utils.TimeUtils;
import com.badlogic.gdx.utils.viewport.ScreenViewport;
import com.badlogic.gdx.utils.viewport.Viewport;

public class GameScreen implements Screen {
	private OrthographicCamera camera;
	private Batch batch;
	private BitmapFont progress, highestPerfectDumpFontLabel, totalPerfectDumpFontLabel, totalDumpFontLabel, totalUnofficialDumpFontLabel, greenFont, goldFont,
	redFont, garbageGoal;
	private InputMultiplexer inputMultiplexer;
	private Vector2 stageCoordinates;
	private boolean isLongPressed, occupied1, occupied2, occupied3, occupied4, occupied5, occupied6, breakLoop,
	occupied7, occupied8, occupied9, occupied10, occupied11, occupied12, occupied13, occupied14, toggleHighestScore, toggleLevelUp, toggleLevelDown,
	occupied15, occupied16, isLoading, toggleNewRecord, playMusic;
	private Array<Rectangle> acornLayer, appleLayer, bananaPeelLayer, branchLayer, deadMouseLayer, eggShellLayer, featherLayer, fishBoneLayer, flowerLayer,
	grassLayer, hairLayer, hayLayer, leavesLayer, manureLayer, rootsLayer, burnedTrash1Layer, burnedTrash2Layer, burnedTrash3Layer, burnedTrash4Layer, burnedTrash5Layer,
	burnedTrash6Layer, burnedAbility1Layer, burnedAbility2Layer, burnedAbility3Layer, burnedAbility4Layer, frozenTrashLayer;
	private Array<Rectangle> bottleLayer, canLayer, cardboardLayer, cerealBoxLayer, dirtyShirtLayer, envelopeLayer, funnelLayer, hangerLayer, newspaperLayer,
	paperLayer, pillBottleLayer, plasticBagLayer, tyreLayer, vaseLayer, waffleIronLayer;
	private Array<Rectangle> aerosolCanLayer, brokenBulbLayer, brokenGlassLayer, chewingGumLayer, cigaretteLayer, deadBatteryLayer, dirtyDiaperLayer,
	insecticideSprayLayer, leftoverCakeLayer, leftoverChickenLayer, nailLayer, paintCanLayer, syringeLayer, tornPaperLayer, usedMotorOilLayer;
	private TextureRegion mainMenuRegion, showOpponentRegion, itemArrowLeftRegion, itemArrowRightRegion, itemOutlineRegion;
	private JunkWorldEngines junkWorldEngines;
	private Rectangle trashCan1Layer, trashCan2Layer, trashCan3Layer, trashCan4Layer;
	private Actor trashCan1Input, trashCan2Input, trashCan3Input, trashCan4Input, scrollItemsLeft, scrollItemsRight;
	private Stage trashCanUI, mainMenuUI, quitUI, gameOverUI;
	private TRASHCANSELECTED trashCanSelected;
	private PreviousGameState previousGameState;
	private CurrentSelectedType currentSelectedType;
	private int deviceWidth, deviceHeight, averageCount1, averageCount2, averageCount3, averageCount4;
	private int firstDivCol, secondDivCol, thirdDivCol, fourthDivCol, fifthDivCol, firstDivRow, secondDivRow;
	private TextureRegion trashCan1Region, trashCan2Region, trashCan3Region, trashCan4Region,
	trashCan1RegionFull, trashCan2RegionFull, trashCan3RegionFull, trashCan4RegionFull;
	private TextureRegion redAverageBCan, redAverageBCanClicked, redAverageRCan, redAverageRCanClicked, redAverageNRCan, redAverageNRCanClicked,
	orangeAverageBCan, orangeAverageBCanClicked, orangeAverageRCan, orangeAverageRCanClicked, orangeAverageNRCan, orangeAverageNRCanClicked,
	yellowAverageBCan, yellowAverageBCanClicked, yellowAverageRCan, yellowAverageRCanClicked, yellowAverageNRCan, yellowAverageNRCanClicked,
	greenAverageBCan, greenAverageBCanClicked, greenAverageRCan, greenAverageRCanClicked, greenAverageNRCan, greenAverageNRCanClicked,
	blueAverageBCan, blueAverageBCanClicked, blueAverageRCan, blueAverageRCanClicked, blueAverageNRCan, blueAverageNRCanClicked,
	purpleAverageBCan, purpleAverageBCanClicked, purpleAverageRCan, purpleAverageRCanClicked, purpleAverageNRCan, purpleAverageNRCanClicked,
	redVacuumBCan, redVacuumBCanClicked, redVacuumRCan, redVacuumRCanClicked, redVacuumNRCan, redVacuumNRCanClicked,
	orangeVacuumBCan, orangeVacuumBCanClicked, orangeVacuumRCan, orangeVacuumRCanClicked, orangeVacuumNRCan, orangeVacuumNRCanClicked,
	yellowVacuumBCan, yellowVacuumBCanClicked, yellowVacuumRCan, yellowVacuumRCanClicked, yellowVacuumNRCan, yellowVacuumNRCanClicked,
	greenVacuumBCan, greenVacuumBCanClicked, greenVacuumRCan, greenVacuumRCanClicked, greenVacuumNRCan, greenVacuumNRCanClicked,
	blueVacuumBCan, blueVacuumBCanClicked, blueVacuumRCan, blueVacuumRCanClicked, blueVacuumNRCan, blueVacuumNRCanClicked,
	purpleVacuumBCan, purpleVacuumBCanClicked, purpleVacuumRCan, purpleVacuumRCanClicked, purpleVacuumNRCan, purpleVacuumNRCanClicked,
	redScorchingBCan, redScorchingBCanClicked, redScorchingRCan, redScorchingRCanClicked, redScorchingNRCan, redScorchingNRCanClicked,
	orangeScorchingBCan, orangeScorchingBCanClicked, orangeScorchingRCan, orangeScorchingRCanClicked, orangeScorchingNRCan, orangeScorchingNRCanClicked,
	yellowScorchingBCan, yellowScorchingBCanClicked, yellowScorchingRCan, yellowScorchingRCanClicked, yellowScorchingNRCan, yellowScorchingNRCanClicked,
	greenScorchingBCan, greenScorchingBCanClicked, greenScorchingRCan, greenScorchingRCanClicked, greenScorchingNRCan, greenScorchingNRCanClicked,
	blueScorchingBCan, blueScorchingBCanClicked, blueScorchingRCan, blueScorchingRCanClicked, blueScorchingNRCan, blueScorchingNRCanClicked,
	purpleScorchingBCan, purpleScorchingBCanClicked, purpleScorchingRCan, purpleScorchingRCanClicked, purpleScorchingNRCan, purpleScorchingNRCanClicked,
	redTrashBBlower, redTrashBBlowerClicked, redTrashRBlower, redTrashRBlowerClicked, redTrashNRBlower, redTrashNRBlowerClicked,
	orangeTrashBBlower, orangeTrashBBlowerClicked, orangeTrashRBlower, orangeTrashRBlowerClicked, orangeTrashNRBlower, orangeTrashNRBlowerClicked,
	yellowTrashBBlower, yellowTrashBBlowerClicked, yellowTrashRBlower, yellowTrashRBlowerClicked, yellowTrashNRBlower, yellowTrashNRBlowerClicked,
	greenTrashBBlower, greenTrashBBlowerClicked, greenTrashRBlower, greenTrashRBlowerClicked, greenTrashNRBlower, greenTrashNRBlowerClicked,
	blueTrashBBlower, blueTrashBBlowerClicked, blueTrashRBlower, blueTrashRBlowerClicked, blueTrashNRBlower, blueTrashNRBlowerClicked,
	purpleTrashBBlower, purpleTrashBBlowerClicked, purpleTrashRBlower, purpleTrashRBlowerClicked, purpleTrashNRBlower, purpleTrashNRBlowerClicked,
	redDullBCan, redDullBCanClicked, redDullRCan, redDullRCanClicked, redDullNRCan, redDullNRCanClicked,
	orangeDullBCan, orangeDullBCanClicked, orangeDullRCan, orangeDullRCanClicked, orangeDullNRCan, orangeDullNRCanClicked,
	yellowDullBCan, yellowDullBCanClicked, yellowDullRCan, yellowDullRCanClicked, yellowDullNRCan, yellowDullNRCanClicked,
	greenDullBCan, greenDullBCanClicked, greenDullRCan, greenDullRCanClicked, greenDullNRCan, greenDullNRCanClicked,
	blueDullBCan, blueDullBCanClicked, blueDullRCan, blueDullRCanClicked, blueDullNRCan, blueDullNRCanClicked, noneDullBCan, noneDullRCan, noneDullNRCan,
	purpleDullBCan, purpleDullBCanClicked, purpleDullRCan, purpleDullRCanClicked, purpleDullNRCan, purpleDullNRCanClicked, noneDullBCanClicked, noneDullRCanClicked, noneDullNRCanClicked,
	redSwiftBCan, redSwiftBCanClicked, redSwiftRCan, redSwiftRCanClicked, redSwiftNRCan, redSwiftNRCanClicked,
	orangeSwiftBCan, orangeSwiftBCanClicked, orangeSwiftRCan, orangeSwiftRCanClicked, orangeSwiftNRCan, orangeSwiftNRCanClicked,
	yellowSwiftBCan, yellowSwiftBCanClicked, yellowSwiftRCan, yellowSwiftRCanClicked, yellowSwiftNRCan, yellowSwiftNRCanClicked,
	greenSwiftBCan, greenSwiftBCanClicked, greenSwiftRCan, greenSwiftRCanClicked, greenSwiftNRCan, greenSwiftNRCanClicked,
	blueSwiftBCan, blueSwiftBCanClicked, blueSwiftRCan, blueSwiftRCanClicked, blueSwiftNRCan, blueSwiftNRCanClicked,
	purpleSwiftBCan, purpleSwiftBCanClicked, purpleSwiftRCan, purpleSwiftRCanClicked, purpleSwiftNRCan, purpleSwiftNRCanClicked;
	//	Trash Regions
	//	Biodegradable
	private TextureRegion acornRegion, appleRegion, bananaPeelRegion, branchRegion, deadMouseRegion, eggShellRegion, featherRegion, fishBoneRegion, flowerRegion,
	grassRegion, hairRegion, hayRegion, leavesRegion, manureRegion, rootsRegion;
	//	Recyclable
	private TextureRegion bottleRegionRegion, canRegion, cardboardRegion, cerealBoxRegion, dirtyShirtRegion, envelopeRegion, funnelRegion, hangerRegion, newspaperRegion,
	paperRegion, pillBottleRegion, plasticBagRegion, tyreRegion, vaseRegion, waffleIronRegion;
	//	Non-Recyclable
	private TextureRegion aerosolCanRegion, brokenBulbRegion, brokenGlassRegion, chewingGumRegion, cigaretteRegion, deadBatteryRegion, dirtyDiaperRegion,
	insecticideSprayRegion, leftoverCakeRegion, leftoverChickenRegion, nailRegion, paintCanRegion, syringeRegion, tornPaperRegion, usedMotorOilRegion;
	private Rectangle trash1Cell, trash2Cell, trash3Cell, trash4Cell, trash5Cell, trash6Cell, trash7Cell,
	trash8Cell, trash9Cell, trash10Cell, trash11Cell, trash12Cell, trash13Cell, trash14Cell, trash15Cell,
	trash16Cell;
	private Rectangle trashCan1Indicator, trashCan2Indicator, trashCan3Indicator, trashCan4Indicator, perfectComboRectangle, burnAbilityLayer1, burnAbilityLayer2,
	burnAbilityLayer3, burnAbilityLayer4, averageCan1Indicator, averageCan2Indicator, averageCan3Indicator, averageCan4Indicator, capacitorRec;
	private TextureRegion currentTrashCan1, currentTrashCan2, currentTrashCan3, currentTrashCan4;
	private CURRENTCAN1STATE currentCan1State;
	private CURRENTCAN2STATE currentCan2State;
	private CURRENTCAN3STATE currentCan3State;
	private CURRENTCAN4STATE currentCan4State;
	private CurrentItemOfSlot1 currentItemOfSlot1;
	private CurrentItemOfSlot2 currentItemOfSlot2;
	private CurrentItemOfSlot3 currentItemOfSlot3;
	private CurrentItemOfSlot4 currentItemOfSlot4;
	private CurrentItemOfSlot5 currentItemOfSlot5;
	private CurrentItemOfSlot6 currentItemOfSlot6;
	private CurrentItem1State currentItem1State;
	private CurrentItem2State currentItem2State;
	private CurrentItem3State currentItem3State;
	private CurrentItem4State currentItem4State;
	private CurrentItem5State currentItem5State;
	private CurrentItem6State currentItem6State;
	private CurrentItemSlotSelected currentItemSlotSelected;
	private int currentXPos, currentYPos;
	private long delayColListener, delayReUpdateStates, delayTrashSpawn, delayColorTypeListener, delayAbilityListener,
	delaySelection1, delaySelection2, delaySelection3, delaySelection4, delayTrashCanSelection1, delayTrashCanSelection2, delayTrashCanSelection3, 
	delayTrashCanSelection4, delayCancelCurrentSelections, delayDisplayStatistics, delayEnergy1Anim, delayEnergy2Anim, delayEnergy3Anim, delayEnergy4Anim,
	delayGluedTrash, delayTutoralArrow, delayAds;
	private BitmapFont font, score, score2, totalScore, highestPerfectDumpFont, totalPerfectDumpFont, totalDumpFont, totalUnofficialDumpFont, othersFont, timeLeftFont,
	currentItemStates;
	private Vector3 touchPos;
	private RETURNINGTRASHCAN returningTrashCan;
	private JunkWorld game;
	private boolean disallow, aniBack;
	private boolean unclickableCan1, unclickableCan2, unclickableCan3, unclickableCan4;
	private Array<Integer> xTrashSpawn, yTrashSpawn;
	private int xTrashSpawnRandom, yTrashSpawnRandom, badDump;
	private Array<Rectangle> trashLayer;
	private Array<Float> initialSpeed;
	private Array<TextureRegion> trashType, dumpPopUpsRegions, perfectDumpPopUpsRegions, perfectDumpSuccessPopUpsRegions;
	private Array<Integer> perfectDumpComboNums, previousDullCanColor;
	private Array<Rectangle> biodegradable, recyclable, nonRecyclable, bombLayers;
	private Array<Float> spawnTimes;
	private int xpUp, previousXpUp, previousLevel, currentPopAnim, currentPopAnim2;
	private GAMESTATE gameState;
	private AssetManager manager;
	private TrashCan1Properties trashCan1Properties;
	private TrashCan2Properties trashCan2Properties;
	private TrashCan3Properties trashCan3Properties;
	private TrashCan4Properties trashCan4Properties;
	private CURRENTABILITYSTATE1 currentAbilityState1;
	private CURRENTABILITYSTATE2 currentAbilityState2;
	private CURRENTABILITYSTATE3 currentAbilityState3;
	private CURRENTABILITYSTATE4 currentAbilityState4;
	private PreviousAbility1State previousAbility1State;
	private PreviousAbility2State previousAbility2State;
	private PreviousAbility3State previousAbility3State;
	private PreviousAbility4State previousAbility4State;
	private CurrentSelectedItem currentSelectedItem;
	private GamePalette gamePalette;
	private boolean createTrashCanTextures;
	private boolean isTrashCan1, isTrashCan2, isTrashCan3, isTrashCan4;
	private Array<TextureRegion> trashBagColors, explodingCans;
	private Array<Boolean> swiftCanPerfectDump, ifCanIsDull;
	private TextureRegion redBag, orangeBag, yellowBag, greenBag, blueBag, purpleBag;
	private Rectangle backgroundLayer, upperHUD1Layer, upperHUD2Layer, bottomHUD1Layer, bottomHUD2Layer, bottomHUD3Layer, gluedTrashLayer,
	dumpsterLayer, garbageTruckLayer, scoreLayer, mainMenuLayer, showOpponentLayer, leftArrowItemLayer, rightArrowItemLayer, timerLayer,
	item1SlotLayer, item2SlotLayer, item3SlotLayer, item4SlotLayer, combo1Layer, combo2Layer, combo3Layer, combo4Layer,
	combo5Layer, combo6Layer, combo1TimerLayer, combo2TimerLayer, combo3TimerLayer, combo4TimerLayer, combo5TimerLayer,
	combo6TimerLayer, burstModeLayer, abilitySelectionLayer, typeOrColorSelectionLayer, selection1Layer, selection2Layer,
	selection3Layer, selection4Layer, mainMenuToggledLayer, mainMenuQuitToggledLayer, resumeGameLayer, quitGameLayer, quitYesLayer, quitNoLayer, dumpsterAmountLayer;
	private boolean trashCan1Used, trashCan2Used, trashCan3Used, trashCan4Used;
	private boolean moveTrashCan1, moveTrashCan2, moveTrashCan3, moveTrashCan4, addLayer2, addLayer3, addLayer4;
	private boolean addListener;
	private boolean removeListeners;
	private double trashCan1Speed, trashCan2Speed, trashCan3Speed, trashCan4Speed;
	private float trashCan1XTarget, trashCan2XTarget, trashCan3XTarget, trashCan4XTarget;
	private float returningTrashCan1Target, returningTrashCan2Target, returningTrashCan3Target, returningTrashCan4Target, rating;
	private double returningTrashCan1Speed, returningTrashCan2Speed, returningTrashCan3Speed, returningTrashCan4Speed;
	private int returningTrashCan1, returningTrashCan2, returningTrashCan3, returningTrashCan4;
	private boolean returnTrashCanOf1, returnTrashCanOf2, returnTrashCanOf3, returnTrashCanOf4;
	private float averageCanSpeed, scorchingCanSpeed, vacuumCanSpeed, trashBlowerSpeed, dullCanSpeed, swiftCanSpeed, dumpAlpha;
	private boolean noTrashCan;
	private TextureRegion abilitySelectionRegion, typeOrColorSelectionRegion, selection1Region, selection2Region,
	selection3Region, selection4Region;	
	private TextureRegion colorSelectionRegion, typeSelectionRegion;
	private CurrentBottomHUDState currentBottomHUDState;
	private BurstModeButton burstModeButton;
	private TextureRegion averageCanAbility, scorchingCanAbility, vacuumCanAbility, averageCanAbilityClicked, scorchingCanAbilityClicked,
	vacuumCanAbilityClicked, scorchingCanAbilityCD, vacuumCanAbilityCD, averageCanAbilityUnclickable, scorchingCanAbilityUnclickable, vacuumCanAbilityUnclickable,
	trashBlowerAbility, trashBlowerAbilityCD, trashBlowerAbilityClicked, trashBlowerAbilityUnclickable, dullCanAbility, dullCanAbilityClicked, 
	dullCanAbilityUnclickable, swiftCanAbility, swiftCanAbilityClicked, swiftCanAbilityUnclickable;
	private Rectangle quitNotifierLayer, firstItemLayer, secondItemLayer, thirdItemLayer, fourthItemLayer;
	private TextureRegion abilitySelectionOff, abilitySelectionOn, currentTypeColorSelection;
	private float dumpsterAmount, randomSpawnDelay, garbageVolumeY,
	gameOverScale, speedOfCan1, speedOfCan2, speedOfCan3, speedOfCan4, swiftCan1Energy, swiftCan2Energy, swiftCan3Energy,
	swiftCan4Energy;
	private TextureRegion blankRegion, burstRegion, burst2Region, burstModeRegion, clickableBurstModeRegion, unclickableBurstModeRegion;
	private Array<TextureRegion> paletteColors, dumpsterRegions, trashbagsRegion, itemsRegion, itemsClickedRegion, itemsCDRegion, itemsUnclickableRegion,
	timerNumRegions, timerBrightNumRegions;
	private CurrentSelectedPalette currentSelectedPalette;
	private CurrentSelectedCanColor currentSelectedCanColor;
	private TextureRegion biodegradableRegion, recyclableRegion, nonRecyclableRegion, biodegradableClickedRegion,
	recyclableClickedRegion, nonRecyclableClickedRegion;
	private Actor burstMode, toAbilitySelection, toColorOrTypeSelection, selection1, selection2, selection3, selection4, dumpster, playAgain, mainMenuScreen;
	private int trashCan1AbilityPos, trashCan2AbilityPos, trashCan3AbilityPos, trashCan4AbilityPos;
	private boolean setOtherListeners, quitClicked, itemListeners;
	private Actor mainMenu, resumeGame, quitGame, quitGameYes, quitGameNo, changeTrashCans;
	private boolean setTrashCanColor, setTrashCanDelay, setTrashCanType;
	private boolean itemActive, delayActivateReset;
	private TextureRegion[] ability1Region, ability2Region, ability3Region, ability4Region;
	private int currentAbility1, currentAbility2, currentAbility3, currentAbility4, currentClickedBurstMode, currentCDBurstMode;
	private long cooldown1, cooldown2, cooldown3, cooldown4, delayCooldown1, delayCooldown2, delayCooldown3, delayCooldown4, delayFrameRate1, delayPopAnim2,
	delayFrameRate2, delayFrameRate3, delayFrameRate4, delayDuration1, delayDuration2, delayDuration3, delayDuration4, delayIceflakePics, delaySticker,
	delayBurstMode2Clicked, delaySwiftCan1Energy, delaySwiftCan2Energy, delaySwiftCan3Energy, delaySwiftCan4Energy, delaySelectSecond;
	private int trashCan1Capacity, trashCan2Capacity, trashCan3Capacity, trashCan4Capacity, scoreMultiplier;
	private int currentCapacity1, currentCapacity2, currentCapacity3, currentCapacity4;
	private TextureRegion capacitorBarRegion, capacitorBarOutlineRegion, mainMenuToggledRegion, mainMenuQuitToggledRegion, resumeGameRegion,
	quitGameRegion, quitYesRegion, quitNoRegion, quitNotifierRegion, perfectDumpFirstPopUp, perfectDumpLastPopUp, currentDumpPopuUp, gameOverRegion, bonusRegion,
	noBonusRegion, dullCanBAll, dullCanRAll, dullCanNRAll, dullCanBAllClicked, dullCanRAllClicked, dullCanNRAllClicked;
	private Array<Rectangle> capacitors1Layer, capacitors2Layer, capacitors3Layer, capacitors4Layer, bLayers, rLayers, nrLayers, redLayers, orangeLayers, yellowLayers,
	greenLayers, blueLayers, purpleLayers;
	private Array<Integer> currentTrashBagColor, currentBombRegion, trashValue, highestPerfectDumpCombo;
	private int currentItem1, currentItem2, currentItem3, currentItem4, startingValue, currentGameTimer, currentScore, currentIceflakeRegion, currentAugmentedBurstRegion;
	private Array<ActorGestureListener> actorGestures;
	private Array<Actor> items;
	private float perfectJC, perfectXP, dumpJC, dumpXP, unoffDumpJC, unoffDumpXP;
	private long delayItem1CD, delayItem2CD, delayItem3CD, delayItem4CD, delayItem5CD, delayItem6CD, item1CD, item2CD, item3CD,
	item4CD, item5CD, item6CD, delayItemActive, delayReadyToggle, delayPerfectDumpCombo, delayDump, delayDumpingSpeed, delayTimeCountdown, delayTimer, delayCurrentWarning, delayPlayAgain, delayGameOver, delayBurstModeCooldown, delayBurstModeClickable, delayBurstModeClicked,
	delayDefroze, delayUnaugmentCans, delayAugmentAni, delayDullCanColor1, delayDullCanColor2, delayDullCanColor3, delayDullCanColor4, delayResetTap1,
	delayResetTap2, delayResetTap3, delayResetTap4, delayPopUps, delayApplause;
	private Array<TextureRegion> bombRegions, currentWarning, burstModeCDRegion, clickedBurstModeRegion, iceflakeRegions;
	private Array<Long> delayBombPics, delaySpeedRush;
	private Array<Array<Rectangle>> trashTypeLayers, trashNameLayers, trashBagColorLayers;
	private Array<Array<Array<Rectangle>>> trash;
	private int perfectDump, dump, unofficialDump, notDumped, perfectDumpNumCombo, currentPerfectDumpNumCombo, dumpAmountLeft, minutes, seconds, gameOverY,
	totalScoreNum, dullPrevColor1, dullPrevColor2, dullPrevColor3, dullPrevColor4;
	private Array<TextureRegion> perfectNumRegions, colonRegion, augmentedBurstRegion;
	private Sprite currentDumpSignal, currentDumpNumSignal, gameOver, roundSuccess, roundFailed, goalSuccess,
	timesUp, jobCompleted, jobFailed;
	private boolean dumpStarter, moveTrash, delayPerfectCombo, dumpTrash, displayTimerRegions, tutorialSet, tutor,
	toggleTimer, warningActive, displayStatistics, delayRemoveTrash, highlightFirstPick, augmentCan1, augmentCan2, augmentCan3, augmentCan4;
	private Rectangle mainMenuScreenLayer, playAgainLayer, iceflakeLayers, selectedTrash1, selectedTrash2, firstTrash;
	private FileHandle profileFile;
	private JsonValue jsonValue;
	private int survivalLevel;
	private Array<TextureRegion> levelDownArray, levelUpArray, newHighScore, newBestTime;

	private void disposeAssets(){
		trashCanUI.dispose();
		mainMenuUI.dispose();
		quitUI.dispose();
		gameOverUI.dispose();
		progress.dispose();
		highestPerfectDumpFontLabel.dispose();
		totalPerfectDumpFontLabel.dispose();
		totalDumpFontLabel.dispose();
		totalUnofficialDumpFontLabel.dispose();
		greenFont.dispose();
		goldFont.dispose();
		redFont.dispose();
		garbageGoal.dispose();
		font.dispose();
		score.dispose();
		score2.dispose();
		totalScore.dispose();
		highestPerfectDumpFont.dispose();
		totalPerfectDumpFont.dispose();
		totalDumpFont.dispose();
		totalUnofficialDumpFont.dispose();
		othersFont.dispose();
		timeLeftFont.dispose();
		currentItemStates.dispose();
		this.dispose();
	}

	private void loadManager(){
		//		TODO
		if (trashCan1Properties.getTrashCan() == 1 ||
				trashCan2Properties.getTrashCan() == 1 ||
				trashCan3Properties.getTrashCan() == 1 ||
				trashCan4Properties.getTrashCan() == 1){
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/purple.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/purple.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/purple.png", Texture.class);
		}

		if (trashCan1Properties.getTrashCan() == 2 ||
				trashCan2Properties.getTrashCan() == 2 ||
				trashCan3Properties.getTrashCan() == 2 ||
				trashCan4Properties.getTrashCan() == 2){
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/purple.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/purple.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/purple.png", Texture.class);
		}

		if (trashCan1Properties.getTrashCan() == 3 ||
				trashCan2Properties.getTrashCan() == 3 ||
				trashCan3Properties.getTrashCan() == 3 ||
				trashCan4Properties.getTrashCan() == 3){
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/purple.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/purple.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/purple.png", Texture.class);
		}

		if (trashCan1Properties.getTrashCan() == 4 ||
				trashCan2Properties.getTrashCan() == 4 ||
				trashCan3Properties.getTrashCan() == 4 ||
				trashCan4Properties.getTrashCan() == 4){
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/purple.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/purple.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/purple.png", Texture.class);
		}

		if (trashCan1Properties.getTrashCan() == 5 ||
				trashCan2Properties.getTrashCan() == 5 ||
				trashCan3Properties.getTrashCan() == 5 ||
				trashCan4Properties.getTrashCan() == 5){
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/purple.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/purple.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/purple.png", Texture.class);
		}

		if (trashCan1Properties.getTrashCan() == 6 ||
				trashCan2Properties.getTrashCan() == 6 ||
				trashCan3Properties.getTrashCan() == 6 ||
				trashCan4Properties.getTrashCan() == 6){
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/purple.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/purple.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/red.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/orange.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/yellow.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/green.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/blue.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/purple.png", Texture.class);
		}

		if (trashCan1Properties.getTrashCan() == 1 ||
				trashCan2Properties.getTrashCan() == 1 ||
				trashCan3Properties.getTrashCan() == 1 ||
				trashCan4Properties.getTrashCan() == 1){
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/purpleClicked.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/purpleClicked.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/purpleClicked.png", Texture.class);
		}

		if (trashCan1Properties.getTrashCan() == 2 ||
				trashCan2Properties.getTrashCan() == 2 ||
				trashCan3Properties.getTrashCan() == 2 ||
				trashCan4Properties.getTrashCan() == 2){
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/purpleClicked.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/purpleClicked.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/purpleClicked.png", Texture.class);
		}

		if (trashCan1Properties.getTrashCan() == 3 ||
				trashCan2Properties.getTrashCan() == 3 ||
				trashCan3Properties.getTrashCan() == 3 ||
				trashCan4Properties.getTrashCan() == 3){
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/purpleClicked.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/purpleClicked.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/purpleClicked.png", Texture.class);
		}

		if (trashCan1Properties.getTrashCan() == 4 ||
				trashCan2Properties.getTrashCan() == 4 ||
				trashCan3Properties.getTrashCan() == 4 ||
				trashCan4Properties.getTrashCan() == 4){
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/purpleClicked.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/purpleClicked.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/purpleClicked.png", Texture.class);
		}

		if (trashCan1Properties.getTrashCan() == 5 ||
				trashCan2Properties.getTrashCan() == 5 ||
				trashCan3Properties.getTrashCan() == 5 ||
				trashCan4Properties.getTrashCan() == 5){
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/purpleClicked.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/purpleClicked.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/purpleClicked.png", Texture.class);
		}

		if (trashCan1Properties.getTrashCan() == 6 ||
				trashCan2Properties.getTrashCan() == 6 ||
				trashCan3Properties.getTrashCan() == 6 ||
				trashCan4Properties.getTrashCan() == 6){
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/purpleClicked.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/purpleClicked.png", Texture.class);

			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/redClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/orangeClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/yellowClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/greenClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/blueClicked.png", Texture.class);
			manager.load("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/purpleClicked.png", Texture.class);
		}

		manager.load("gameScreenAssets/blankCan/blankCan.png", Texture.class);
		manager.load("gameScreenAssets/trashBagColors/redTrashBag.png", Texture.class);
		manager.load("gameScreenAssets/trashBagColors/orangeTrashBag.png", Texture.class);
		manager.load("gameScreenAssets/trashBagColors/yellowTrashBag.png", Texture.class);
		manager.load("gameScreenAssets/trashBagColors/greenTrashBag.png", Texture.class);
		manager.load("gameScreenAssets/trashBagColors/blueTrashBag.png", Texture.class);
		manager.load("gameScreenAssets/trashBagColors/purpleTrashBag.png", Texture.class);

		manager.load("buttons/coverAbilityButton.png", Texture.class);
		manager.load("buttons/coverAbilityButtonClicked.png", Texture.class);
		manager.load("buttons/coverAbilityButtonUnclickable.png", Texture.class);
		manager.load("buttons/burnAbilityButton.png", Texture.class);
		manager.load("buttons/burnAbilityButtonClicked.png", Texture.class);
		manager.load("buttons/burnAbilityButtonCD.png", Texture.class);
		manager.load("buttons/burnAbilityButtonUnclickable.png", Texture.class);
		manager.load("buttons/drainAbilityButton.png", Texture.class);
		manager.load("buttons/drainAbilityButtonClicked.png", Texture.class);
		manager.load("buttons/drainAbilityButtonCD.png", Texture.class);
		manager.load("buttons/drainAbilityButtonUnclickable.png", Texture.class);
		manager.load("buttons/blowAbilityButton.png", Texture.class);
		manager.load("buttons/blowAbilityButtonCD.png", Texture.class);
		manager.load("buttons/blowAbilityButtonClicked.png", Texture.class);
		manager.load("buttons/blowAbilityButtonUnclickable.png", Texture.class);
		manager.load("buttons/beautifyAbilityButton.png", Texture.class);			
		manager.load("buttons/beautifyAbilityButtonClicked.png", Texture.class);
		manager.load("buttons/beautifyAbilityButtonUnclickable.png", Texture.class);
		manager.load("buttons/overchargeAbilityButton.png", Texture.class);
		manager.load("buttons/overchargeAbilityButtonClicked.png", Texture.class);
		manager.load("buttons/overchargeAbilityButtonUnclickable.png", Texture.class);
		manager.load("buttons/burstButtonClickable.png", Texture.class);
		manager.load("buttons/burstButtonUnclickable.png", Texture.class);
		manager.load("buttons/burstButton.png", Texture.class);

		for (int i = 0; i < 25; i++){
			manager.load("buttons/burstButtonCD/burstButtonCD" + i + ".png", Texture.class);
			manager.load("buttons/burstButtonClicked/burstButtonCD" + i + ".png", Texture.class);
		}

		manager.load("gameScreenAssets/blankCan/blankCan.png", Texture.class);
		manager.load("buttons/redColor.png", Texture.class);
		manager.load("buttons/redColorClicked.png", Texture.class);
		manager.load("buttons/orangeColor.png", Texture.class);
		manager.load("buttons/orangeColorClicked.png", Texture.class);
		manager.load("buttons/yellowColor.png", Texture.class);
		manager.load("buttons/yellowColorClicked.png", Texture.class);
		manager.load("buttons/greenColor.png", Texture.class);
		manager.load("buttons/greenColorClicked.png", Texture.class);
		manager.load("buttons/blueColor.png", Texture.class);
		manager.load("buttons/blueColorClicked.png", Texture.class);
		manager.load("buttons/purpleColor.png", Texture.class);
		manager.load("buttons/purpleColorClicked.png", Texture.class);

		manager.load("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/biodegradable.png", Texture.class);
		manager.load("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/biodegradableClicked.png", Texture.class);
		manager.load("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/recyclable.png", Texture.class);
		manager.load("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/recyclableClicked.png", Texture.class);
		manager.load("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/nonRecyclable.png", Texture.class);
		manager.load("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/nonRecyclableClicked.png", Texture.class);
		manager.load("buttons/changedToColorSelection.png", Texture.class);
		manager.load("buttons/changedToTypeSelection.png", Texture.class);
		manager.load("buttons/changedToAbilitySelection.png", Texture.class);
		manager.load("buttons/changedToAbilitySelectionClicked.png", Texture.class);
		manager.load("gameScreenAssets/inGameMenuAssets/capacityBar.png", Texture.class);
		manager.load("gameScreenAssets/inGameMenuAssets/capacityBarOutline.png", Texture.class);
		manager.load("gameScreenAssets/trashCanSelectionAssets/The Average Can/averageOpened.png", Texture.class);
		for (int i = 0; i < 12; i++){
			manager.load("gameAnimations/TrashCanAbilities/burnAbility/fire" + i + ".png", Texture.class);
		}
		for (int i = 0; i < 10; i++){
			manager.load("gameAnimations/TrashCanAbilities/drainAbility/drain" + i + ".png", Texture.class);
		}
		for (int i = 0; i < 9; i++){
			manager.load("gameAnimations/TrashCanAbilities/blowAbility/fan" + i + ".png", Texture.class);
		}
		manager.load("gameAnimations/TrashCanAbilities/overchargeAbility/discharged.png", Texture.class);
		manager.load("gameAnimations/TrashCanAbilities/overchargeAbility/energy.png", Texture.class);
		manager.load("gameAnimations/TrashCanAbilities/overchargeAbility/energyBar.png", Texture.class);
		manager.load("gameAnimations/TrashCanAbilities/overchargeAbility/energyBarred.png", Texture.class);
		manager.load("gameAnimations/TrashCanAbilities/overchargeAbility/indic0.png", Texture.class);
		manager.load("gameAnimations/TrashCanAbilities/overchargeAbility/indic1.png", Texture.class);
		manager.load("gameAnimations/TrashCanAbilities/overchargeAbility/indic2.png", Texture.class);

		manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/all.png", Texture.class);
		manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/allClicked.png", Texture.class);
		manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/all.png", Texture.class);
		manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/allClicked.png", Texture.class);
		manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/all.png", Texture.class);
		manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/allClicked.png", Texture.class);

		for (int i = 0; i < 15; i++){
			manager.load("gameScreenAssets/dumpster/dumpster" + i + ".png", Texture.class);
		}

		manager.load("gameScreenAssets/inGameMenuAssets/mainMenu.png", Texture.class);
		manager.load("gameScreenAssets/inGameMenuAssets/showOpponent.png", Texture.class);
		manager.load("backgrounds/mainMenu.png", Texture.class);
		manager.load("buttons/resumeButton.png", Texture.class);
		manager.load("buttons/quitButton.png", Texture.class);
		manager.load("buttons/yesButton.png", Texture.class);
		manager.load("buttons/noButton.png", Texture.class);
		manager.load("gameScreenAssets/inGameMenuAssets/itemArrowLeft.png", Texture.class);
		manager.load("gameScreenAssets/inGameMenuAssets/itemArrowRight.png", Texture.class);
		manager.load("gameScreenAssets/inGameMenuAssets/itemOutline.png", Texture.class);
		manager.load("screenLabels/quitNotifier.png", Texture.class);

		manager.load("gameScreenAssets/itemAssets/itemTextures/tntBomb.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/glue.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/iceflake.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/switchMachine.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/augmentedBurst.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/sticker.png", Texture.class);

		manager.load("gameScreenAssets/itemAssets/itemTextures/tntBombCD.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/glueCD.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/iceflakeCD.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/switchMachineCD.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/augmentedBurstCD.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/stickerCD.png", Texture.class);

		manager.load("gameScreenAssets/itemAssets/itemTextures/tntBombClicked.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/glueClicked.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/iceflakeClicked.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/switchMachineClicked.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/augmentedBurstClicked.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/stickerClicked.png", Texture.class);

		manager.load("gameScreenAssets/itemAssets/itemTextures/tntBombUnclickable.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/glueUnclickable.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/iceflakeUnclickable.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/switchMachineUnclickable.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/augmentedBurstUnclickable.png", Texture.class);
		manager.load("gameScreenAssets/itemAssets/itemTextures/stickerUnclickable.png", Texture.class);

		for (int i = 0; i < 11; i++){
			manager.load("gameAnimations/In-Game Items/Bomb/" + i + ".png", Texture.class);
		}

		for (int i = 0; i < 6; i++){
			manager.load("gameAnimations/In-Game Items/Iceflake/" + i + ".png", Texture.class);
		}

		manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultB.png", Texture.class);
		manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultBClicked.png", Texture.class);
		manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultR.png", Texture.class);
		manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultRClicked.png", Texture.class);
		manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultNR.png", Texture.class);
		manager.load("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultNRClicked.png", Texture.class);

		manager.load("gameScreenAssets/trashAssets/biodegradableTrash/acorn.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/biodegradableTrash/apple.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/biodegradableTrash/bananaPeel.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/biodegradableTrash/branch.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/biodegradableTrash/deadMouse.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/biodegradableTrash/eggShell.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/biodegradableTrash/feather.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/biodegradableTrash/fishBone.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/biodegradableTrash/flower.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/biodegradableTrash/grass.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/biodegradableTrash/hair.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/biodegradableTrash/hay.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/biodegradableTrash/leaves.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/biodegradableTrash/manure.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/biodegradableTrash/roots.png", Texture.class);

		//			Recyclable
		manager.load("gameScreenAssets/trashAssets/recyclableTrash/bottle.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/recyclableTrash/can.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/recyclableTrash/cardboard.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/recyclableTrash/cerealBox.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/recyclableTrash/dirtyShirt.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/recyclableTrash/envelope.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/recyclableTrash/funnel.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/recyclableTrash/hanger.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/recyclableTrash/newspaper.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/recyclableTrash/paper.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/recyclableTrash/pillBottle.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/recyclableTrash/plasticBag.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/recyclableTrash/tyre.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/recyclableTrash/vase.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/recyclableTrash/waffleIron.png", Texture.class);

		//			Non-Recyclable
		manager.load("gameScreenAssets/trashAssets/nonRecyclableTrash/aerosolCan.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/nonRecyclableTrash/brokenBulb.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/nonRecyclableTrash/brokenGlass.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/nonRecyclableTrash/chewingGum.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/nonRecyclableTrash/cigarette.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/nonRecyclableTrash/deadBattery.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/nonRecyclableTrash/dirtyDiaper.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/nonRecyclableTrash/insecticideSpray.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/nonRecyclableTrash/leftoverCake.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/nonRecyclableTrash/leftoverChicken.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/nonRecyclableTrash/nail.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/nonRecyclableTrash/paintCan.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/nonRecyclableTrash/syringe.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/nonRecyclableTrash/tornPaper.png", Texture.class);
		manager.load("gameScreenAssets/trashAssets/nonRecyclableTrash/usedMotorOil.png", Texture.class);

		for (int i = 0; i < 3; i++){
			manager.load("gameScreenAssets/gamePopUps/dump/dump" + i + ".png", Texture.class);
		}

		manager.load("gameScreenAssets/gamePopUps/perfectDump/perfectFirst.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/perfectDump/perfectLast.png", Texture.class);

		for (int i = 0; i < 9; i++){
			manager.load("gameScreenAssets/gamePopUps/perfectDumpSuccess/dump" + i + ".png", Texture.class);
		}

		manager.load("gameScreenAssets/gamePopUps/ready.png", Texture.class);

		manager.load("gameScreenAssets/gamePopUps/ready0.png", Texture.class);

		for (int i = 1; i < 23; i++){
			manager.load("gameScreenAssets/gamePopUps/rounds/round" + i + ".png", Texture.class);
		}

		manager.load("gameScreenAssets/gamePopUps/perfectDump/perfectFirst.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/perfectDump/perfectLast.png", Texture.class);
		for (int i = 0; i < 10; i++){
			manager.load("gameScreenAssets/gamePopUps/perfectDump/perfect" + i + ".png", Texture.class);
		}

		for (int i = 0; i < 10; i++){
			manager.load("gameScreenAssets/inGameMenuAssets/timerAssets/timer" + i + ".png", Texture.class);
			manager.load("gameScreenAssets/inGameMenuAssets/timerAssets/timerBright" + i + ".png", Texture.class);
		}

		manager.load("gameScreenAssets/inGameMenuAssets/timerAssets/colon.png", Texture.class);
		manager.load("gameScreenAssets/inGameMenuAssets/timerAssets/colonBright.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/gameOver.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/warning0.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/warning1.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/timesUp.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/bonus.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/noBonus.png", Texture.class);

		for (int i = 0; i < 6; i++){
			manager.load("gameAnimations/In-Game Items/Augmented Burst/" + i + ".png", Texture.class);
		}

		switch (junkWorldEngines.getTheme()){
		case 0: manager.load("backgrounds/firstBackground.png", Texture.class); break;
		case 1: manager.load("singlePlayerAssets/JunkWorld Areas/House/Kitchen.png", Texture.class); break;
		case 2: manager.load("singlePlayerAssets/JunkWorld Areas/House/Basement.png", Texture.class); break;
		case 3: manager.load("singlePlayerAssets/JunkWorld Areas/House/Garage.png", Texture.class); break;
		case 4: manager.load("singlePlayerAssets/JunkWorld Areas/House/Backyard.png", Texture.class); break;
		case 5: manager.load("singlePlayerAssets/JunkWorld Areas/House/Sidewalk.png", Texture.class); break;
		case 6: manager.load("singlePlayerAssets/JunkWorld Areas/City/Factory.png", Texture.class); break;
		case 7: manager.load("singlePlayerAssets/JunkWorld Areas/City/Highway.png", Texture.class); break;
		case 8: manager.load("singlePlayerAssets/JunkWorld Areas/City/Park.png", Texture.class); break;
		case 9: manager.load("singlePlayerAssets/JunkWorld Areas/City/Sewer.png", Texture.class); break;
		default: break;
		}

		manager.load("gameScreenAssets/trashAssets/burnedBag.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/dumpSignal.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/ready1.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/ready2.png", Texture.class);

		manager.load("gameAnimations/TrashCanAbilities/overchargeAbility/energyBar2.png", Texture.class);

		manager.load("gameAnimations/In-Game Items/Sticker/bSticker.png", Texture.class);
		manager.load("gameAnimations/In-Game Items/Sticker/rSticker.png", Texture.class);
		manager.load("gameAnimations/In-Game Items/Sticker/nrSticker.png", Texture.class);

		manager.load("backgrounds/garbageVolume.png", Texture.class);
		manager.load("gameScreenAssets/inGameMenuAssets/timerAssets/time.png", Texture.class);
		manager.load("gameScreenAssets/inGameMenuAssets/scoreIcon.png", Texture.class);
		manager.load("mainMenuAssets/loadingAssets/blackShader2.png", Texture.class);
		manager.load("backgrounds/whiteShader.png", Texture.class);
		manager.load("buttons/playAgainButton.png", Texture.class);
		manager.load("buttons/mainMenuButton.png", Texture.class);
		manager.load("buttons/nextRoundButton.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/roundSuccess.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/roundFailed.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/jobCompleted.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/jobFailed.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/goalSuccess.png", Texture.class);

		for (int i = 0; i < 3; i++){
			manager.load("gameAnimations/jobComplete/canExplosion" + i + ".png", Texture.class);
		}
		manager.load("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar1.png", Texture.class);
		manager.load("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar2.png", Texture.class);
		manager.load("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar0.png", Texture.class);
		manager.load("buttons/changeTrashCansButton.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/star.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/starOutline.png", Texture.class);
		for (int i = 0; i < 3; i++){
			manager.load("profileAssets/triesLeft/" + i + ".png", Texture.class);
		}
		manager.load("gameScreenAssets/gamePopUps/rating.png", Texture.class);
		manager.load("gameScreenAssets/gamePopUps/overallRating.png", Texture.class);

		for (int i = 0; i < 5;  i++){
			manager.load("gameScreenAssets/gamePopUps/highScore/" + i + ".png", Texture.class);
		}
		for (int i = 0; i < 5;  i++){
			manager.load("gameScreenAssets/gamePopUps/levelDown/" + i + ".png", Texture.class);
		}
		for (int i = 0; i < 5;  i++){
			manager.load("gameScreenAssets/gamePopUps/levelUp/" + i + ".png", Texture.class);
		}
		for (int i = 0; i < 8;  i++){
			manager.load("gameScreenAssets/gamePopUps/bestTime/" + i + ".png", Texture.class);
		}

		manager.load("mainMenuAssets/junkWorldCoins.png", Texture.class);

		manager.load("audioAssets/sound/augmentedBurst.ogg", Sound.class);
		manager.load("audioAssets/sound/bomb.ogg", Sound.class);
		manager.load("audioAssets/sound/dump.ogg", Sound.class);
		manager.load("audioAssets/sound/glue.ogg", Sound.class);
		manager.load("audioAssets/sound/iceflake.ogg", Sound.class);
		manager.load("audioAssets/sound/perfectDump.ogg", Sound.class);
		manager.load("audioAssets/sound/switchMachine.ogg", Sound.class);
		manager.load("audioAssets/sound/unofficialDump.wav", Sound.class);
		manager.load("audioAssets/sound/warning.ogg", Sound.class);
		manager.load("audioAssets/sound/gameover.ogg", Sound.class);
		manager.load("audioAssets/sound/winning.ogg", Sound.class);
		manager.load("audioAssets/sound/applause.ogg", Sound.class);
	}

	private void unloadManager(){
		//		TODO
		if (trashCan1Properties.getTrashCan() == 1 ||
				trashCan2Properties.getTrashCan() == 1 ||
				trashCan3Properties.getTrashCan() == 1 ||
				trashCan4Properties.getTrashCan() == 1){
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/purple.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/purple.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/purple.png");
		}

		if (trashCan1Properties.getTrashCan() == 2 ||
				trashCan2Properties.getTrashCan() == 2 ||
				trashCan3Properties.getTrashCan() == 2 ||
				trashCan4Properties.getTrashCan() == 2){
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/purple.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/purple.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/purple.png");
		}

		if (trashCan1Properties.getTrashCan() == 3 ||
				trashCan2Properties.getTrashCan() == 3 ||
				trashCan3Properties.getTrashCan() == 3 ||
				trashCan4Properties.getTrashCan() == 3){
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/purple.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/purple.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/purple.png");
		}

		if (trashCan1Properties.getTrashCan() == 4 ||
				trashCan2Properties.getTrashCan() == 4 ||
				trashCan3Properties.getTrashCan() == 4 ||
				trashCan4Properties.getTrashCan() == 4){
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/purple.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/purple.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/purple.png");
		}

		if (trashCan1Properties.getTrashCan() == 5 ||
				trashCan2Properties.getTrashCan() == 5 ||
				trashCan3Properties.getTrashCan() == 5 ||
				trashCan4Properties.getTrashCan() == 5){
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/purple.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/purple.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/purple.png");
		}

		if (trashCan1Properties.getTrashCan() == 6 ||
				trashCan2Properties.getTrashCan() == 6 ||
				trashCan3Properties.getTrashCan() == 6 ||
				trashCan4Properties.getTrashCan() == 6){
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/purple.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/purple.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/red.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/orange.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/yellow.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/green.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/blue.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/purple.png");
		}

		if (trashCan1Properties.getTrashCan() == 1 ||
				trashCan2Properties.getTrashCan() == 1 ||
				trashCan3Properties.getTrashCan() == 1 ||
				trashCan4Properties.getTrashCan() == 1){
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/purpleClicked.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/purpleClicked.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/purpleClicked.png");
		}

		if (trashCan1Properties.getTrashCan() == 2 ||
				trashCan2Properties.getTrashCan() == 2 ||
				trashCan3Properties.getTrashCan() == 2 ||
				trashCan4Properties.getTrashCan() == 2){
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/purpleClicked.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/purpleClicked.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/purpleClicked.png");
		}

		if (trashCan1Properties.getTrashCan() == 3 ||
				trashCan2Properties.getTrashCan() == 3 ||
				trashCan3Properties.getTrashCan() == 3 ||
				trashCan4Properties.getTrashCan() == 3){
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/purpleClicked.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/purpleClicked.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/purpleClicked.png");
		}

		if (trashCan1Properties.getTrashCan() == 4 ||
				trashCan2Properties.getTrashCan() == 4 ||
				trashCan3Properties.getTrashCan() == 4 ||
				trashCan4Properties.getTrashCan() == 4){
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/purpleClicked.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/purpleClicked.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/purpleClicked.png");
		}

		if (trashCan1Properties.getTrashCan() == 5 ||
				trashCan2Properties.getTrashCan() == 5 ||
				trashCan3Properties.getTrashCan() == 5 ||
				trashCan4Properties.getTrashCan() == 5){
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/purpleClicked.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/purpleClicked.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/purpleClicked.png");
		}

		if (trashCan1Properties.getTrashCan() == 6 ||
				trashCan2Properties.getTrashCan() == 6 ||
				trashCan3Properties.getTrashCan() == 6 ||
				trashCan4Properties.getTrashCan() == 6){
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/purpleClicked.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/purpleClicked.png");

			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/redClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/orangeClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/yellowClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/greenClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/blueClicked.png");
			manager.unload("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/purpleClicked.png");
		}

		manager.unload("gameScreenAssets/blankCan/blankCan.png");
		manager.unload("gameScreenAssets/trashBagColors/redTrashBag.png");
		manager.unload("gameScreenAssets/trashBagColors/orangeTrashBag.png");
		manager.unload("gameScreenAssets/trashBagColors/yellowTrashBag.png");
		manager.unload("gameScreenAssets/trashBagColors/greenTrashBag.png");
		manager.unload("gameScreenAssets/trashBagColors/blueTrashBag.png");
		manager.unload("gameScreenAssets/trashBagColors/purpleTrashBag.png");

		manager.unload("buttons/coverAbilityButton.png");
		manager.unload("buttons/coverAbilityButtonClicked.png");
		manager.unload("buttons/coverAbilityButtonUnclickable.png");
		manager.unload("buttons/burnAbilityButton.png");
		manager.unload("buttons/burnAbilityButtonClicked.png");
		manager.unload("buttons/burnAbilityButtonCD.png");
		manager.unload("buttons/burnAbilityButtonUnclickable.png");
		manager.unload("buttons/drainAbilityButton.png");
		manager.unload("buttons/drainAbilityButtonClicked.png");
		manager.unload("buttons/drainAbilityButtonCD.png");
		manager.unload("buttons/drainAbilityButtonUnclickable.png");
		manager.unload("buttons/blowAbilityButton.png");
		manager.unload("buttons/blowAbilityButtonCD.png");
		manager.unload("buttons/blowAbilityButtonClicked.png");
		manager.unload("buttons/blowAbilityButtonUnclickable.png");
		manager.unload("buttons/beautifyAbilityButton.png");			
		manager.unload("buttons/beautifyAbilityButtonClicked.png");
		manager.unload("buttons/beautifyAbilityButtonUnclickable.png");
		manager.unload("buttons/overchargeAbilityButton.png");
		manager.unload("buttons/overchargeAbilityButtonClicked.png");
		manager.unload("buttons/overchargeAbilityButtonUnclickable.png");
		manager.unload("buttons/burstButtonClickable.png");
		manager.unload("buttons/burstButtonUnclickable.png");
		manager.unload("buttons/burstButton.png");

		for (int i = 0; i < 25; i++){
			manager.unload("buttons/burstButtonCD/burstButtonCD" + i + ".png");
			manager.unload("buttons/burstButtonClicked/burstButtonCD" + i + ".png");
		}

		manager.unload("gameScreenAssets/blankCan/blankCan.png");
		manager.unload("buttons/redColor.png");
		manager.unload("buttons/redColorClicked.png");
		manager.unload("buttons/orangeColor.png");
		manager.unload("buttons/orangeColorClicked.png");
		manager.unload("buttons/yellowColor.png");
		manager.unload("buttons/yellowColorClicked.png");
		manager.unload("buttons/greenColor.png");
		manager.unload("buttons/greenColorClicked.png");
		manager.unload("buttons/blueColor.png");
		manager.unload("buttons/blueColorClicked.png");
		manager.unload("buttons/purpleColor.png");
		manager.unload("buttons/purpleColorClicked.png");

		manager.unload("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/biodegradable.png");
		manager.unload("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/biodegradableClicked.png");
		manager.unload("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/recyclable.png");
		manager.unload("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/recyclableClicked.png");
		manager.unload("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/nonRecyclable.png");
		manager.unload("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/nonRecyclableClicked.png");
		manager.unload("buttons/changedToColorSelection.png");
		manager.unload("buttons/changedToTypeSelection.png");
		manager.unload("buttons/changedToAbilitySelection.png");
		manager.unload("buttons/changedToAbilitySelectionClicked.png");
		manager.unload("gameScreenAssets/inGameMenuAssets/capacityBar.png");
		manager.unload("gameScreenAssets/inGameMenuAssets/capacityBarOutline.png");
		manager.unload("gameScreenAssets/trashCanSelectionAssets/The Average Can/averageOpened.png");
		for (int i = 0; i < 12; i++){
			manager.unload("gameAnimations/TrashCanAbilities/burnAbility/fire" + i + ".png");
		}
		for (int i = 0; i < 10; i++){
			manager.unload("gameAnimations/TrashCanAbilities/drainAbility/drain" + i + ".png");
		}
		for (int i = 0; i < 9; i++){
			manager.unload("gameAnimations/TrashCanAbilities/blowAbility/fan" + i + ".png");
		}
		manager.unload("gameAnimations/TrashCanAbilities/overchargeAbility/discharged.png");
		manager.unload("gameAnimations/TrashCanAbilities/overchargeAbility/energy.png");
		manager.unload("gameAnimations/TrashCanAbilities/overchargeAbility/energyBar.png");
		manager.unload("gameAnimations/TrashCanAbilities/overchargeAbility/energyBarred.png");
		manager.unload("gameAnimations/TrashCanAbilities/overchargeAbility/indic0.png");
		manager.unload("gameAnimations/TrashCanAbilities/overchargeAbility/indic1.png");
		manager.unload("gameAnimations/TrashCanAbilities/overchargeAbility/indic2.png");

		manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/all.png");
		manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/allClicked.png");
		manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/all.png");
		manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/allClicked.png");
		manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/all.png");
		manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/allClicked.png");

		for (int i = 0; i < 15; i++){
			manager.unload("gameScreenAssets/dumpster/dumpster" + i + ".png");
		}

		manager.unload("gameScreenAssets/inGameMenuAssets/mainMenu.png");
		manager.unload("gameScreenAssets/inGameMenuAssets/showOpponent.png");
		manager.unload("backgrounds/mainMenu.png");
		manager.unload("buttons/resumeButton.png");
		manager.unload("buttons/quitButton.png");
		manager.unload("buttons/yesButton.png");
		manager.unload("buttons/noButton.png");
		manager.unload("gameScreenAssets/inGameMenuAssets/itemArrowLeft.png");
		manager.unload("gameScreenAssets/inGameMenuAssets/itemArrowRight.png");
		manager.unload("gameScreenAssets/inGameMenuAssets/itemOutline.png");
		manager.unload("screenLabels/quitNotifier.png");

		manager.unload("gameScreenAssets/itemAssets/itemTextures/tntBomb.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/glue.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/iceflake.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/switchMachine.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/augmentedBurst.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/sticker.png");

		manager.unload("gameScreenAssets/itemAssets/itemTextures/tntBombCD.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/glueCD.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/iceflakeCD.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/switchMachineCD.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/augmentedBurstCD.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/stickerCD.png");

		manager.unload("gameScreenAssets/itemAssets/itemTextures/tntBombClicked.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/glueClicked.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/iceflakeClicked.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/switchMachineClicked.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/augmentedBurstClicked.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/stickerClicked.png");

		manager.unload("gameScreenAssets/itemAssets/itemTextures/tntBombUnclickable.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/glueUnclickable.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/iceflakeUnclickable.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/switchMachineUnclickable.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/augmentedBurstUnclickable.png");
		manager.unload("gameScreenAssets/itemAssets/itemTextures/stickerUnclickable.png");

		for (int i = 0; i < 11; i++){
			manager.unload("gameAnimations/In-Game Items/Bomb/" + i + ".png");
		}

		for (int i = 0; i < 6; i++){
			manager.unload("gameAnimations/In-Game Items/Iceflake/" + i + ".png");
		}
		manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultB.png");
		manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultBClicked.png");
		manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultR.png");
		manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultRClicked.png");
		manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultNR.png");
		manager.unload("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultNRClicked.png");

		manager.unload("gameScreenAssets/trashAssets/biodegradableTrash/acorn.png");
		manager.unload("gameScreenAssets/trashAssets/biodegradableTrash/apple.png");
		manager.unload("gameScreenAssets/trashAssets/biodegradableTrash/bananaPeel.png");
		manager.unload("gameScreenAssets/trashAssets/biodegradableTrash/branch.png");
		manager.unload("gameScreenAssets/trashAssets/biodegradableTrash/deadMouse.png");
		manager.unload("gameScreenAssets/trashAssets/biodegradableTrash/eggShell.png");
		manager.unload("gameScreenAssets/trashAssets/biodegradableTrash/feather.png");
		manager.unload("gameScreenAssets/trashAssets/biodegradableTrash/fishBone.png");
		manager.unload("gameScreenAssets/trashAssets/biodegradableTrash/flower.png");
		manager.unload("gameScreenAssets/trashAssets/biodegradableTrash/grass.png");
		manager.unload("gameScreenAssets/trashAssets/biodegradableTrash/hair.png");
		manager.unload("gameScreenAssets/trashAssets/biodegradableTrash/hay.png");
		manager.unload("gameScreenAssets/trashAssets/biodegradableTrash/leaves.png");
		manager.unload("gameScreenAssets/trashAssets/biodegradableTrash/manure.png");
		manager.unload("gameScreenAssets/trashAssets/biodegradableTrash/roots.png");

		//			Recyclable
		manager.unload("gameScreenAssets/trashAssets/recyclableTrash/bottle.png");
		manager.unload("gameScreenAssets/trashAssets/recyclableTrash/can.png");
		manager.unload("gameScreenAssets/trashAssets/recyclableTrash/cardboard.png");
		manager.unload("gameScreenAssets/trashAssets/recyclableTrash/cerealBox.png");
		manager.unload("gameScreenAssets/trashAssets/recyclableTrash/dirtyShirt.png");
		manager.unload("gameScreenAssets/trashAssets/recyclableTrash/envelope.png");
		manager.unload("gameScreenAssets/trashAssets/recyclableTrash/funnel.png");
		manager.unload("gameScreenAssets/trashAssets/recyclableTrash/hanger.png");
		manager.unload("gameScreenAssets/trashAssets/recyclableTrash/newspaper.png");
		manager.unload("gameScreenAssets/trashAssets/recyclableTrash/paper.png");
		manager.unload("gameScreenAssets/trashAssets/recyclableTrash/pillBottle.png");
		manager.unload("gameScreenAssets/trashAssets/recyclableTrash/plasticBag.png");
		manager.unload("gameScreenAssets/trashAssets/recyclableTrash/tyre.png");
		manager.unload("gameScreenAssets/trashAssets/recyclableTrash/vase.png");
		manager.unload("gameScreenAssets/trashAssets/recyclableTrash/waffleIron.png");

		//			Non-Recyclable
		manager.unload("gameScreenAssets/trashAssets/nonRecyclableTrash/aerosolCan.png");
		manager.unload("gameScreenAssets/trashAssets/nonRecyclableTrash/brokenBulb.png");
		manager.unload("gameScreenAssets/trashAssets/nonRecyclableTrash/brokenGlass.png");
		manager.unload("gameScreenAssets/trashAssets/nonRecyclableTrash/chewingGum.png");
		manager.unload("gameScreenAssets/trashAssets/nonRecyclableTrash/cigarette.png");
		manager.unload("gameScreenAssets/trashAssets/nonRecyclableTrash/deadBattery.png");
		manager.unload("gameScreenAssets/trashAssets/nonRecyclableTrash/dirtyDiaper.png");
		manager.unload("gameScreenAssets/trashAssets/nonRecyclableTrash/insecticideSpray.png");
		manager.unload("gameScreenAssets/trashAssets/nonRecyclableTrash/leftoverCake.png");
		manager.unload("gameScreenAssets/trashAssets/nonRecyclableTrash/leftoverChicken.png");
		manager.unload("gameScreenAssets/trashAssets/nonRecyclableTrash/nail.png");
		manager.unload("gameScreenAssets/trashAssets/nonRecyclableTrash/paintCan.png");
		manager.unload("gameScreenAssets/trashAssets/nonRecyclableTrash/syringe.png");
		manager.unload("gameScreenAssets/trashAssets/nonRecyclableTrash/tornPaper.png");
		manager.unload("gameScreenAssets/trashAssets/nonRecyclableTrash/usedMotorOil.png");

		for (int i = 0; i < 3; i++){
			manager.unload("gameScreenAssets/gamePopUps/dump/dump" + i + ".png");
		}

		manager.unload("gameScreenAssets/gamePopUps/perfectDump/perfectFirst.png");
		manager.unload("gameScreenAssets/gamePopUps/perfectDump/perfectLast.png");

		for (int i = 0; i < 9; i++){
			manager.unload("gameScreenAssets/gamePopUps/perfectDumpSuccess/dump" + i + ".png");
		}

		manager.unload("gameScreenAssets/gamePopUps/ready.png");

		manager.unload("gameScreenAssets/gamePopUps/ready0.png");

		manager.unload("gameScreenAssets/gamePopUps/perfectDump/perfectFirst.png");
		manager.unload("gameScreenAssets/gamePopUps/perfectDump/perfectLast.png");
		for (int i = 0; i < 10; i++){
			manager.unload("gameScreenAssets/gamePopUps/perfectDump/perfect" + i + ".png");
		}

		for (int i = 0; i < 10; i++){
			manager.unload("gameScreenAssets/inGameMenuAssets/timerAssets/timer" + i + ".png");
			manager.unload("gameScreenAssets/inGameMenuAssets/timerAssets/timerBright" + i + ".png");
		}

		manager.unload("gameScreenAssets/inGameMenuAssets/timerAssets/colon.png");
		manager.unload("gameScreenAssets/inGameMenuAssets/timerAssets/colonBright.png");
		manager.unload("gameScreenAssets/gamePopUps/gameOver.png");
		manager.unload("gameScreenAssets/gamePopUps/warning0.png");
		manager.unload("gameScreenAssets/gamePopUps/warning1.png");
		manager.unload("gameScreenAssets/gamePopUps/timesUp.png");
		manager.unload("gameScreenAssets/gamePopUps/bonus.png");
		manager.unload("gameScreenAssets/gamePopUps/noBonus.png");

		for (int i = 0; i < 6; i++){
			manager.unload("gameAnimations/In-Game Items/Augmented Burst/" + i + ".png");
		}


		switch (junkWorldEngines.getTheme()){
		case 0: manager.unload("backgrounds/firstBackground.png"); break;
		case 1: manager.unload("singlePlayerAssets/JunkWorld Areas/House/Kitchen.png"); break;
		case 2: manager.unload("singlePlayerAssets/JunkWorld Areas/House/Basement.png"); break;
		case 3: manager.unload("singlePlayerAssets/JunkWorld Areas/House/Garage.png"); break;
		case 4: manager.unload("singlePlayerAssets/JunkWorld Areas/House/Backyard.png"); break;
		case 5: manager.unload("singlePlayerAssets/JunkWorld Areas/House/Sidewalk.png"); break;
		case 6: manager.unload("singlePlayerAssets/JunkWorld Areas/City/Factory.png"); break;
		case 7: manager.unload("singlePlayerAssets/JunkWorld Areas/City/Highway.png"); break;
		case 8: manager.unload("singlePlayerAssets/JunkWorld Areas/City/Park.png"); break;
		case 9: manager.unload("singlePlayerAssets/JunkWorld Areas/City/Sewer.png"); break;
		default: break;
		}

		manager.unload("gameScreenAssets/trashAssets/burnedBag.png");
		manager.unload("gameScreenAssets/gamePopUps/dumpSignal.png");
		manager.unload("gameScreenAssets/gamePopUps/ready1.png");
		manager.unload("gameScreenAssets/gamePopUps/ready2.png");

		manager.unload("gameAnimations/TrashCanAbilities/overchargeAbility/energyBar2.png");

		manager.unload("gameAnimations/In-Game Items/Sticker/bSticker.png");
		manager.unload("gameAnimations/In-Game Items/Sticker/rSticker.png");
		manager.unload("gameAnimations/In-Game Items/Sticker/nrSticker.png");

		manager.unload("backgrounds/garbageVolume.png");
		manager.unload("gameScreenAssets/inGameMenuAssets/timerAssets/time.png");
		manager.unload("gameScreenAssets/inGameMenuAssets/scoreIcon.png");
		manager.unload("backgrounds/whiteShader.png");
		manager.unload("buttons/playAgainButton.png");
		manager.unload("buttons/mainMenuButton.png");
		manager.unload("buttons/nextRoundButton.png");
		manager.unload("gameScreenAssets/gamePopUps/roundSuccess.png");
		manager.unload("gameScreenAssets/gamePopUps/roundFailed.png");
		manager.unload("gameScreenAssets/gamePopUps/jobCompleted.png");
		manager.unload("gameScreenAssets/gamePopUps/jobFailed.png");
		manager.unload("gameScreenAssets/gamePopUps/goalSuccess.png");

		for (int i = 0; i < 3; i++){
			manager.unload("gameAnimations/jobComplete/canExplosion" + i + ".png");
		}
		manager.unload("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar1.png");
		manager.unload("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar2.png");
		manager.unload("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar0.png");
		manager.unload("buttons/changeTrashCansButton.png");
		manager.unload("gameScreenAssets/gamePopUps/star.png");
		manager.unload("gameScreenAssets/gamePopUps/starOutline.png");
		for (int i = 0; i < 3; i++){
			manager.unload("profileAssets/triesLeft/" + i + ".png");
		}
		manager.unload("gameScreenAssets/gamePopUps/rating.png");
		manager.unload("gameScreenAssets/gamePopUps/overallRating.png");

		for (int i = 0; i < 5;  i++){
			manager.unload("gameScreenAssets/gamePopUps/highScore/" + i + ".png");
		}
		for (int i = 0; i < 5;  i++){
			manager.unload("gameScreenAssets/gamePopUps/levelDown/" + i + ".png");
		}
		for (int i = 0; i < 5;  i++){
			manager.unload("gameScreenAssets/gamePopUps/levelUp/" + i + ".png");
		}
		for (int i = 0; i < 8;  i++){
			manager.unload("gameScreenAssets/gamePopUps/bestTime/" + i + ".png");
		}
		manager.unload("mainMenuAssets/junkWorldCoins.png");

		manager.unload("audioAssets/sound/augmentedBurst.ogg");
		manager.unload("audioAssets/sound/bomb.ogg");
		manager.unload("audioAssets/sound/dump.ogg");
		manager.unload("audioAssets/sound/glue.ogg");
		manager.unload("audioAssets/sound/iceflake.ogg");
		manager.unload("audioAssets/sound/perfectDump.ogg");
		manager.unload("audioAssets/sound/switchMachine.ogg");
		manager.unload("audioAssets/sound/unofficialDump.wav");
		manager.unload("audioAssets/sound/warning.ogg");
		manager.unload("audioAssets/sound/gameover.ogg");
		manager.unload("audioAssets/sound/winning.ogg");

		for (int i = 1; i < 23; i++){
			manager.unload("gameScreenAssets/gamePopUps/rounds/round" + i + ".png");
		}
		manager.unload("audioAssets/sound/applause.ogg");
	}

	protected void declareVariables() {
		dumpStarter = false;
		moveTrash = true;
		delayPerfectCombo = false;
		dumpTrash = true;
		displayTimerRegions = false;
		toggleTimer = true;
		warningActive = false;
		delayActivateReset = false;
		toggleNewRecord = false;

		perfectDump = 0;
		dump = 0; 
		unofficialDump = 0;
		notDumped = 0;
		perfectDumpNumCombo = 0;

		delayItem1CD = 0;
		delayItem2CD = 0;
		delayItem3CD = 0; 
		delayItem4CD = 0;
		delayItem5CD = 0;
		delayItem6CD = 0;
		item1CD = 0;
		item2CD = 0;
		item3CD = 0;
		item4CD = 0;
		item5CD = 0;
		item6CD = 0;
		delayItemActive = 0;
		delayReadyToggle = 0;
		delayPerfectDumpCombo = 0;
		delayDump = 0;
		delayDumpingSpeed = 0;
		delayTimeCountdown = 0;
		delayTimer = 0;
		delayCurrentWarning = 0;
		delayAugmentAni = TimeUtils.millis();

		currentScore = 0;
		currentItem1 = 1;
		currentItem2 = 2;
		currentItem3 = 3;
		currentItem4 = 4;
		startingValue = 0;
		currentCapacity1 = 0;
		currentCapacity2 = 0;
		currentCapacity3 = 0;
		currentCapacity4 = 0;
		delayCooldown1 = 0;
		delayCooldown2 = 0;
		delayCooldown3 = 0;
		delayCooldown4 = 0;
		delayFrameRate1 = 0;
		delayFrameRate2 = 0;
		delayFrameRate3 = 0;
		delayFrameRate4 = 0;
		delayDuration1 = 0;
		delayDuration2 = 0;
		delayDuration3 = 0;
		delayDuration4 = 0;
		delayResetTap1 = 0;
		delayResetTap2 = 0;
		delayResetTap3 = 0;
		delayResetTap4 = 0;
		delayPopUps = TimeUtils.millis();
		badDump = 0;

		currentAbility1 = 0;
		currentAbility2 = 0;
		currentAbility3 = 0;
		currentAbility4 = 0;
		delayApplause = 0;

		playMusic = true;
		setTrashCanColor = false;
		setTrashCanDelay = true;
		setTrashCanType = true;
		itemActive = false;

		setOtherListeners = true;
		quitClicked = false;
		itemListeners = true;

		trashCan1AbilityPos = 1;
		trashCan2AbilityPos = 2;
		trashCan3AbilityPos = 3;
		trashCan4AbilityPos = 4;

		dumpsterAmount = 0;
		garbageVolumeY = -800f;
		gameOverScale = 0.05f;

		noTrashCan = false;

		returnTrashCanOf1 = false;
		returnTrashCanOf2 = false;
		returnTrashCanOf3 = false;
		returnTrashCanOf4 = false;
		averageCanSpeed = 3f;
		scorchingCanSpeed = 2.3f;
		vacuumCanSpeed = 2f;
		trashBlowerSpeed = 2f;
		dullCanSpeed = 2.6f;
		swiftCanSpeed = 3.5f;
		dumpAlpha = 1;

		trashCan1Used = false;
		trashCan2Used = false;
		trashCan3Used = false;
		trashCan4Used = false;
		moveTrashCan1 = false;
		moveTrashCan2 = false;
		moveTrashCan3 = false;
		moveTrashCan4 = false;
		addListener = true;
		removeListeners = false;

		addLayer2 = true;
		addLayer3 = true;
		addLayer4 = true;
		createTrashCanTextures = true;

		delayTutoralArrow = TimeUtils.millis();
		delayTrashSpawn = 0;
		delayColorTypeListener = 0;
		delayAbilityListener = 0;
		delaySelection1 = 0;
		delaySelection2 = 0;
		delaySelection3 = 0;
		delaySelection4 = 0;
		delayTrashCanSelection1 = 0;
		delayTrashCanSelection2 = 0;
		delayTrashCanSelection3 = 0;
		delayTrashCanSelection4 = 0;
		delayCancelCurrentSelections = 0;
		currentPopAnim2 = 0;
		delayPopAnim2 = TimeUtils.millis();
		disallow = false;
		unclickableCan1 = false;
		unclickableCan2 = false;
		unclickableCan3 = false;
		unclickableCan4 = false;
		augmentCan1 = false;
		augmentCan2 = false;
		augmentCan3 = false;
		augmentCan4 = false;

		isLongPressed = false;
		occupied1 = false;
		occupied2 = false;
		occupied3 = false;
		occupied4 = false;
		occupied5 = false;
		occupied6 = false;
		occupied7 = false;
		occupied8 = false;
		occupied9 = false;
		occupied10 = false;
		occupied11 = false;
		occupied12 = false;
		occupied13 = false;
		occupied14 = false;
		occupied15 = false;
		occupied16 = false;
		breakLoop = false;
		toggleHighestScore = false;
		toggleLevelUp = false;
		toggleLevelDown = false;

		gameOverY = 400;
		delayGameOver = 0;
		delayPlayAgain = 0;
		scoreMultiplier = 1;
		delayDisplayStatistics = 0;
		displayStatistics = true;
		delayRemoveTrash = false;
		averageCount1 = 0;
		averageCount2 = 0;
		averageCount3 = 0;
		averageCount4 = 0;
		xpUp = 100;
		currentPopAnim = 0;
		previousXpUp = 0;

		delayBurstModeCooldown = 0;
		delayBurstModeClickable = TimeUtils.millis();
		delayBurstModeClicked = 0;
		delayBurstMode2Clicked = 0;
		currentClickedBurstMode = 0;
		currentCDBurstMode = 0;

		delaySwiftCan1Energy = 0;
		delaySwiftCan2Energy = 0;
		delaySwiftCan3Energy = 0;
		delaySwiftCan4Energy = 0;

		swiftCan1Energy = junkWorldEngines.getSwiftCanEnergyTot();
		swiftCan2Energy = junkWorldEngines.getSwiftCanEnergyTot();
		swiftCan3Energy = junkWorldEngines.getSwiftCanEnergyTot();
		swiftCan4Energy = junkWorldEngines.getSwiftCanEnergyTot();
		delayEnergy1Anim = 0;
		delayEnergy2Anim = 0;
		delayEnergy3Anim = 0;
		delayEnergy4Anim = 0;
		delayGluedTrash = 0;
		delaySelectSecond = 0;
		highlightFirstPick = false;
		delayUnaugmentCans = 0;
		aniBack = false;
		delaySticker = 0;
		delayDullCanColor1 = 0;
		delayDullCanColor2 = 0;
		delayDullCanColor3 = 0;
		delayDullCanColor4 = 0;
		delayAds = 0;
		survivalLevel = 1;
		isLoading = false;
		if (junkWorldEngines.getGameMode() == 0) tutor = true;
		//		Declare Variable Here! TODO
	}

	public GameScreen(final JunkWorld game,final  TrashCan1Properties trashCan1Properties,
			final TrashCan2Properties trashCan2Properties, final  TrashCan3Properties trashCan3Properties, 
			final TrashCan4Properties trashCan4Properties, final  AssetManager manager, final  JunkWorldEngines junkWorldEngines,
			final GamePalette gamePalette, final  CurrentItemOfSlot1 currentItemOfSlot1, final  CurrentItemOfSlot2 currentItemOfSlot2,
			final CurrentItemOfSlot3 currentItemOfSlot3,final  CurrentItemOfSlot4 currentItemOfSlot4, final  CurrentItemOfSlot5 currentItemOfSlot5,
			final CurrentItemOfSlot6 currentItemOfSlot6){
		this.game = game;
		this.trashCan1Properties = trashCan1Properties;
		this.trashCan2Properties = trashCan2Properties;
		this.trashCan3Properties = trashCan3Properties;
		this.trashCan4Properties = trashCan4Properties;
		this.manager = manager;
		this.junkWorldEngines = junkWorldEngines;
		this.gamePalette = gamePalette;
		this.currentItemOfSlot1 = currentItemOfSlot1;
		this.currentItemOfSlot2 = currentItemOfSlot2;
		this.currentItemOfSlot3 = currentItemOfSlot3;
		this.currentItemOfSlot4 = currentItemOfSlot4;
		this.currentItemOfSlot5 = currentItemOfSlot5;
		this.currentItemOfSlot6 = currentItemOfSlot6;
		loadManager();

		//		junkWorldEngines.setXPos(MathUtils.roundPositive(trashCan1Layer.x));
		createMechanics();
	}

	@SuppressWarnings("deprecation")
	private void createMechanics() {
		camera = new OrthographicCamera();
		camera.setToOrtho(false, 512, 800);
		batch = new SpriteBatch();
		inputMultiplexer = new InputMultiplexer();
		touchPos = new Vector3();
		stageCoordinates = new Vector2();
		gameOverUI = new Stage();
		declareVariables();
		//	    <<<	LOAD TRASH >>>

		if (trashCan1Properties.getTrashCan() != 0){
			isTrashCan1 = true;
		} else isTrashCan1 = false;
		if (trashCan2Properties.getTrashCan() != 0){
			isTrashCan2 = true;
		} else isTrashCan2 = false;
		if (trashCan3Properties.getTrashCan() != 0){
			isTrashCan3 = true;
		} else isTrashCan3 = false;
		if (trashCan4Properties.getTrashCan() != 0){
			isTrashCan4 = true;
		} else isTrashCan4 = false;

		JunkWorld.loading.setOrigin(JunkWorld.loading.getWidth() / 2, JunkWorld.loading.getHeight() / 2);
		JunkWorld.loading.setPosition(64, 208);

		trashType = new Array<TextureRegion>();
		dumpsterRegions = new Array<TextureRegion>();

		capacitorRec = new Rectangle();
		trashLayer = new Array<Rectangle>();
		initialSpeed = new Array<Float>();
		trashValue = new Array<Integer>();
		trashValue.clear();
		biodegradable = new Array<Rectangle>();
		recyclable = new Array<Rectangle>();
		nonRecyclable = new Array<Rectangle>();
		burstRegion = new TextureRegion();
		paletteColors = new Array<TextureRegion>();
		currentTrashBagColor = new Array<Integer>();
		itemsRegion = new Array<TextureRegion>();
		itemsCDRegion = new Array<TextureRegion>();
		itemsClickedRegion = new Array<TextureRegion>();
		itemsUnclickableRegion = new Array<TextureRegion>();
		items = new Array<Actor>();
		bombRegions = new Array<TextureRegion>();
		trashTypeLayers = new Array<Array<Rectangle>>();
		trashNameLayers = new Array<Array<Rectangle>>();
		trashBagColorLayers = new Array<Array<Rectangle>>();
		bLayers = new Array<Rectangle>();
		rLayers = new Array<Rectangle>();
		nrLayers = new Array<Rectangle>();
		redLayers = new Array<Rectangle>();
		orangeLayers = new Array<Rectangle>();
		yellowLayers = new Array<Rectangle>();
		greenLayers = new Array<Rectangle>();
		blueLayers = new Array<Rectangle>();
		purpleLayers = new Array<Rectangle>();
		spawnTimes = new Array<Float>();
		xTrashSpawn = new Array<Integer>();
		yTrashSpawn = new Array<Integer>();
		trash = new Array<Array<Array<Rectangle>>>();
		dumpPopUpsRegions = new Array<TextureRegion>();
		perfectDumpPopUpsRegions = new Array<TextureRegion>();
		perfectDumpSuccessPopUpsRegions = new Array<TextureRegion>();
		perfectDumpComboNums = new Array<Integer>();
		trashValue = new Array<Integer>();
		timerNumRegions = new Array<TextureRegion>();
		timerBrightNumRegions = new Array<TextureRegion>();
		colonRegion = new Array<TextureRegion>();
		gameOverRegion = new TextureRegion();
		highestPerfectDumpCombo = new Array<Integer>();
		burnedTrash1Layer = new Array<Rectangle>();
		burnedTrash2Layer = new Array<Rectangle>();
		burnedTrash3Layer = new Array<Rectangle>();
		burnedTrash4Layer = new Array<Rectangle>();
		burnedTrash5Layer = new Array<Rectangle>();
		burnedTrash6Layer = new Array<Rectangle>();
		burnedAbility1Layer = new Array<Rectangle>();
		burnedAbility2Layer = new Array<Rectangle>();
		burnedAbility3Layer = new Array<Rectangle>();
		burnedAbility4Layer = new Array<Rectangle>();
		frozenTrashLayer = new Array<Rectangle>();
		burst2Region = new TextureRegion();
		burstModeCDRegion = new Array<TextureRegion>();
		clickedBurstModeRegion = new Array<TextureRegion>();
		gluedTrashLayer = new Rectangle();
		iceflakeRegions = new Array<TextureRegion>();
		iceflakeLayers = new Rectangle();
		selectedTrash1 = new Rectangle();
		selectedTrash2 = new Rectangle();
		firstTrash = new Rectangle();
		augmentedBurstRegion = new Array<TextureRegion>();
		delaySpeedRush = new Array<Long>();
		swiftCanPerfectDump = new Array<Boolean>();
		ifCanIsDull = new Array<Boolean>();
		previousDullCanColor = new Array<Integer>();
		scrollItemsLeft = new Actor();
		scrollItemsRight = new Actor();
		profileFile = Gdx.files.local(junkWorldEngines.getProfileName() + ".json");
		jsonValue = new JsonReader().parse(profileFile);

		//TODO	
		FreeTypeFontGenerator generator = new FreeTypeFontGenerator(Gdx.files.internal("fonts/SHOWG.TTF"));
		font = generator.generateFont(22);
		score = generator.generateFont(22);
		garbageGoal = generator.generateFont(20);
		garbageGoal.setColor(.8f, 0, .8f, 1);
		score.setColor(1, .5f, 0, 1);
		score2 = generator.generateFont(28);
		score2.setColor(1, .5f, 0, 1);
		highestPerfectDumpFont = generator.generateFont(20);
		totalPerfectDumpFont = generator.generateFont(20);
		totalDumpFont = generator.generateFont(20);
		totalUnofficialDumpFont = generator.generateFont(20);
		othersFont = generator.generateFont(22);
		timeLeftFont = generator.generateFont(20);
		totalScore = generator.generateFont(22);
		currentItemStates = generator.generateFont(18);
		highestPerfectDumpFontLabel = generator.generateFont(20);
		totalPerfectDumpFontLabel = generator.generateFont(20);
		totalDumpFontLabel = generator.generateFont(20);
		totalUnofficialDumpFontLabel = generator.generateFont(20);
		greenFont = generator.generateFont(20);
		goldFont = generator.generateFont(20);
		redFont = generator.generateFont(20);
		greenFont.setColor(0, 1, 0, 1);
		goldFont.setColor(1, .65f, 0, 1);
		highestPerfectDumpFontLabel.setColor(1, 1, .8f, 1);
		totalPerfectDumpFontLabel.setColor(1, 1, .8f, 1);
		totalDumpFontLabel.setColor(1, 1, .8f, 1);
		totalUnofficialDumpFontLabel.setColor(1, 1, .8f, 1);
		othersFont.setColor(0, .2f, 0, 1);

		progress = generator.generateFont(30);
		progress.setColor(1, .5f, 0, 1);
		totalPerfectDumpFont.setColor(1, 0, 1, 1);
		totalDumpFont.setColor(1, 0, 1, 1);
		totalUnofficialDumpFont.setColor(1, 0, 1, 1);
		highestPerfectDumpFont.setColor(1, 0, 1, 1);
		timeLeftFont.setColor(1, 0, 0, 1);
		totalScore.setColor(1, 1, 0, 1);
		currentItemStates.setColor(1, 1, 1, 1);
		generator.dispose();

		trashCan1Layer = new Rectangle(0, 800 / 12 + 15, 128, 128);
		trashCan2Layer = new Rectangle(128, 800 / 12 + 15, 128, 128);
		trashCan3Layer = new Rectangle(256, 800 / 12 + 15, 128, 128);
		trashCan4Layer = new Rectangle(384, 800 / 12 + 15, 128, 128);
		perfectComboRectangle = new Rectangle();
		perfectComboRectangle.setY(500);
		perfectComboRectangle.setHeight(64);
		timerLayer = new Rectangle();
		mainMenuScreenLayer = new Rectangle(70, 60, 160, 54);
		playAgainLayer = new Rectangle(270, 50, 160, 60);

		backgroundLayer = new Rectangle(0, 0, 512, 800);
		upperHUD1Layer = new Rectangle(0, 800 - 800 / 4, 512, 800 / 4);
		upperHUD2Layer = new Rectangle(0, 800 - 800 / 4, 512, 80);
		bottomHUD1Layer = new Rectangle(0, 0, 512, 800 / 12);
		bottomHUD2Layer = new Rectangle(384, 800 / 12 + 15, 128, 128);
		bottomHUD3Layer = new Rectangle(384, 800 / 12 + 15, 128, 128);
		dumpsterLayer = new Rectangle(10, 800 - 110, 100, 100);
		garbageTruckLayer = new Rectangle(125, 755, 136, 40);
		scoreLayer = new Rectangle(271, 755, 136, 40);
		mainMenuLayer = new Rectangle(417, 755, 40, 40);
		showOpponentLayer = new Rectangle(467, 755, 40, 40);
		leftArrowItemLayer = new Rectangle(126, 683, 32, 64);
		rightArrowItemLayer = new Rectangle(474, 683, 32, 64);
		item1SlotLayer = new Rectangle(170, 683, 64, 64);
		item2SlotLayer = new Rectangle(246, 683, 64, 64);
		item3SlotLayer = new Rectangle(322, 683, 64, 64);
		item4SlotLayer = new Rectangle(398, 683, 64, 64);
		combo1Layer = new Rectangle(10, 600 + 13, 64, 64);
		combo2Layer = new Rectangle(94, 600 + 13, 64, 64);
		combo3Layer = new Rectangle(178, 600 + 13, 64, 64);
		combo4Layer = new Rectangle(262, 600 + 13, 64, 64);
		combo5Layer = new Rectangle(346, 600 + 13, 64, 64);
		combo6Layer = new Rectangle(430, 600 + 13, 64, 64);
		combo1TimerLayer = new Rectangle(10, 600 + 8, 64, 5);
		combo2TimerLayer = new Rectangle(94, 600 + 8, 64, 5);
		combo3TimerLayer = new Rectangle(178, 600 + 8, 64, 5);
		combo4TimerLayer = new Rectangle(262, 600 + 8, 64, 5);
		combo5TimerLayer = new Rectangle(346, 600 + 8, 64, 5);
		combo6TimerLayer = new Rectangle(430, 600 + 8, 64, 5);
		mainMenuToggledLayer = new Rectangle(128, 250, 256, 200);
		mainMenuQuitToggledLayer = new Rectangle(106, 300, 300, 128);
		resumeGameLayer = new Rectangle(162, 250 + ((200 / 3) * 2) - ((200 / 3) / 3), 192, 200 / 3);
		quitGameLayer = new Rectangle(162, 250 + ((200 / 3)) - ((200 / 3) / 2), 192, 200 / 3); 
		quitYesLayer = new Rectangle((256 - 75) - ((192 / 3) / 2), 300 + ((200 / 3) / 3), (192 / 3), 128 / 3);
		quitNoLayer = new Rectangle((256 + 75) - ((192 / 3) / 2), 300 + ((200 / 3) / 3), (192 / 3), 128 / 3);
		quitNotifierLayer = new Rectangle(256 - 100, 370, 200, 50);
		firstItemLayer = new Rectangle(170, 683, 64, 64);
		secondItemLayer = new Rectangle(246, 683, 64, 64);
		thirdItemLayer = new Rectangle(322, 683, 64, 64);
		fourthItemLayer = new Rectangle(398, 683, 64, 64);
		burnAbilityLayer1 = new Rectangle();
		burnAbilityLayer2 = new Rectangle();
		burnAbilityLayer3 = new Rectangle();
		burnAbilityLayer4 = new Rectangle();
		averageCan1Indicator = new Rectangle();
		averageCan2Indicator = new Rectangle();
		averageCan3Indicator = new Rectangle();
		averageCan4Indicator = new Rectangle();

		burstModeLayer = new Rectangle(2, 3, 124, 60);
		abilitySelectionLayer = new Rectangle(130, 3, 60, 60);
		typeOrColorSelectionLayer = new Rectangle(194, 3, 60, 60);
		selection1Layer = new Rectangle(194 + 64, 3, 60, 60);
		selection2Layer = new Rectangle(194 + 128, 3, 60, 60);
		selection3Layer = new Rectangle(194 + 192, 3, 60, 60);
		selection4Layer = new Rectangle(194 + 256, 3, 60, 60);
		dumpsterAmountLayer = new Rectangle();
		dumpsterAmountLayer.setHeight(60);
		dumpsterAmountLayer.setY(800 - 110 + 20);

		trashCan1Input = new Actor();
		trashCan2Input = new Actor();
		trashCan3Input = new Actor();
		trashCan4Input = new Actor();

		new Actor();
		new Actor();
		new Actor();
		new Actor();

		burstMode = new Actor();
		toAbilitySelection = new Actor();
		toColorOrTypeSelection = new Actor();
		selection1 = new Actor();
		selection2 = new Actor();
		selection3 = new Actor();
		selection4 = new Actor();

		mainMenu = new Actor();
		resumeGame = new Actor();
		quitGame = new Actor();
		quitGameYes = new Actor();
		quitGameNo = new Actor();
		dumpster = new Actor();

		mainMenuScreen = new Actor();
		playAgain = new Actor();
		changeTrashCans = new Actor();

		for (int i = 0; i < 4; i++){
			items.add(new Actor());
		}

		//		gestureDetector =  new GestureDetector(new GestureAdapter(){
		//			@Override
		//			public boolean longPress(float x, float y) {
		//				if (gestureDetector.isLongPressed() &&
		//						touchPos.y >= trashCan1Layer.y &&
		//						touchPos.y < trashCan1Layer.height){

		//				}
		//				return true;
		//			}
		//		});

		trashCanUI = new Stage();
		trashCanUI.addActor(trashCan1Input);
		trashCanUI.addActor(trashCan2Input);
		trashCanUI.addActor(trashCan3Input);
		trashCanUI.addActor(trashCan4Input);
		trashCanUI.addActor(burstMode);
		trashCanUI.addActor(toAbilitySelection);
		trashCanUI.addActor(toColorOrTypeSelection);
		trashCanUI.addActor(selection1);
		trashCanUI.addActor(selection2);
		trashCanUI.addActor(selection3);
		trashCanUI.addActor(selection4);
		trashCanUI.addActor(mainMenu);
		trashCanUI.addActor(items.get(0));
		trashCanUI.addActor(items.get(1));
		trashCanUI.addActor(items.get(2));
		trashCanUI.addActor(items.get(3));
		trashCanUI.addActor(dumpster);
		trashCanUI.addActor(scrollItemsLeft);
		trashCanUI.addActor(scrollItemsRight);

		mainMenuUI = new Stage();
		mainMenuUI.addActor(resumeGame);
		mainMenuUI.addActor(quitGame);

		quitUI = new Stage();
		quitUI.addActor(quitGameNo);
		quitUI.addActor(quitGameYes);

		gameOverUI.addActor(mainMenuScreen);
		gameOverUI.addActor(playAgain);
		gameOverUI.addActor(changeTrashCans);

		createActorsGestures();
		createHUDActors();
		loadGameMechanics();

		gameState = GAMESTATE.STARTED;
		junkWorldEngines.setClickableCan(false);
		junkWorldEngines.setGreaterThanXPos(false);
		junkWorldEngines.setLessThanXPos(false);
		junkWorldEngines.setGreaterThanReturningXPos(false);
		junkWorldEngines.setLessThanReturningXPos(false);
		noTrashCan = false;
		trashCanSelected = TRASHCANSELECTED.NONE;
		returningTrashCan = RETURNINGTRASHCAN.NONE;
		addListener = true;
		delayReUpdateStates = 0;
		junkWorldEngines.setOnPosX(true);
		currentSelectedItem = CurrentSelectedItem.NONE;
		currentItemSlotSelected = CurrentItemSlotSelected.NONE;
		trashCanSelected = TRASHCANSELECTED.NONE;
		currentCan1State = CURRENTCAN1STATE.EMPTY;
		currentCan2State = CURRENTCAN2STATE.EMPTY;
		currentCan3State = CURRENTCAN3STATE.EMPTY;
		currentCan4State = CURRENTCAN4STATE.EMPTY;
		currentItem1State = CurrentItem1State.CLICKABLE;
		currentItem2State = CurrentItem2State.CLICKABLE;
		currentItem3State = CurrentItem3State.CLICKABLE;
		currentItem4State = CurrentItem4State.CLICKABLE;
		currentItem5State = CurrentItem5State.CLICKABLE;
		currentItem6State = CurrentItem6State.CLICKABLE;
		currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
		currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
		currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
		currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
		currentBottomHUDState = CurrentBottomHUDState.COLOR_SELECTION;
		setTrashCanDelay = true;
		setTrashCanColor = false;
		setTrashCanType = true;
		currentSelectedPalette = CurrentSelectedPalette.NONE;
		currentSelectedCanColor = CurrentSelectedCanColor.NONE;
		currentSelectedType = CurrentSelectedType.NONE;
		burstModeButton = BurstModeButton.UNCLICKABLE;
		previousAbility1State = PreviousAbility1State.OFF;
		previousAbility2State = PreviousAbility2State.OFF;
		previousAbility3State = PreviousAbility3State.OFF;
		previousAbility4State = PreviousAbility4State.OFF;
		burstModeButton = BurstModeButton.CLICKABLE;
		returningTrashCan = RETURNINGTRASHCAN.NONE;
		currentGameTimer = junkWorldEngines.getGameTimer();
		setAllTrashFalse();
		setGarbages();
		setJunkWorldMusic();
		loadMusic();
//		game.adManager.showBannerAds(false);
	}

	private void loadGameMechanics() {
		switch (junkWorldEngines.getGameSelection()){
		case 1: {
			if (junkWorldEngines.getGameMode() == 0){
				spawnTimes.add(9f);
				junkWorldEngines.setTrashAccerleration(0.025f);
			}
			else {
				spawnTimes.addAll(junkWorldEngines.getSpawnTime());
			}
		}; break;
		case 2: {
			spawnTimes.addAll(junkWorldEngines.getSpawnTime());
		}; break;
		default: break;
		}

		randomSpawnDelay = spawnTimes.random();	

		xTrashSpawn.add(32);
		xTrashSpawn.add(160);
		xTrashSpawn.add(288);
		xTrashSpawn.add(419);
		yTrashSpawn.add(616);
		//		TODO 
		if (junkWorldEngines.isTrashSpawnRow2()){
			yTrashSpawn.add(552);
		}
		if (junkWorldEngines.isTrashSpawnRow3()){
			yTrashSpawn.add(488);
		}
		if (junkWorldEngines.isTrashSpawnRow4()){
			yTrashSpawn.add(424);
		}

		//		batch.draw(trashCombos, 10, 600 + 13, 64, 64);
		//		batch.draw(trashCombos, 94, 600 + 13, 64, 64);
		//		batch.draw(trashCombos, 178, 600 + 13, 64, 64);
		//		batch.draw(trashCombos, 262, 600 + 13, 64, 64);
		//		batch.draw(trashCombos, 346, 600 + 13, 64, 64);
		//		batch.draw(trashCombos, 430, 600 + 13, 64, 64);
		//		batch.draw(trashCombosTimersRegion, 10, 600 + 8, 64, 5);
		//		batch.draw(trashCombosTimersRegion, 94, 600 + 8, 64, 5);
		//		batch.draw(trashCombosTimersRegion, 178, 600 + 8, 64, 5); 
		//		batch.draw(trashCombosTimersRegion, 262, 600 + 8, 64, 5);
		//		batch.draw(trashCombosTimersRegion, 346, 600 + 8, 64, 5);
		//		batch.draw(trashCombosTimersRegion, 430, 600 + 8, 64, 5);
		//		batch.draw(comboLayout, 0, 800 - 800 / 4, 512, 80);	

		bombLayers = new Array<Rectangle>();
		bombLayers.add(new Rectangle());
		bombLayers.add(new Rectangle());
		bombLayers.add(new Rectangle());
		bombLayers.add(new Rectangle());
		bombLayers.add(new Rectangle());
		bombLayers.add(new Rectangle());

		if (junkWorldEngines.getGameSelection() == 1){
			perfectJC = (((((float)jsonValue.getInt("level") + 9) / 10)) * 2);
			dumpJC = (((((float)jsonValue.getInt("level") + 9) / 10)) * 2) * (2f / 3f);
			unoffDumpJC = (((((float)jsonValue.getInt("level") + 9) / 10)) * 2) * (1f / 3f);

			perfectXP = ((((((float)jsonValue.getInt("level") + 9) / 10)) * 5)) * ((float)junkWorldEngines.getCurrentDifficulty());
			dumpXP = (((((float)jsonValue.getInt("level") + 9) / 10)) * 5) * (2f / 3f) * ((float)junkWorldEngines.getCurrentDifficulty());
			unoffDumpXP = (((((float)jsonValue.getInt("level") + 9) / 10)) * 5) * (1f / 3f) * ((float)junkWorldEngines.getCurrentDifficulty());
		}
		else if (junkWorldEngines.getGameSelection() == 2){
			perfectJC = (((((float)jsonValue.getInt("level") + 9) / 10)) * 3);
			dumpJC = (((((float)jsonValue.getInt("level") + 9) / 10)) * 3) * (2 / 3);
			unoffDumpJC = (((((float)jsonValue.getInt("level") + 9) / 10)) * 3) * (1 / 3);

			perfectXP = ((((float)jsonValue.getInt("level") + 9) / 10) * 10) * ((float)junkWorldEngines.getCurrentDifficulty());
			dumpXP = ((((float)jsonValue.getInt("level") + 9) / 10) * 10) * (2f / 3f) * ((float)junkWorldEngines.getCurrentDifficulty());
			unoffDumpXP = ((((float)jsonValue.getInt("level") + 9) / 10) * 10) * (1f / 3f) * ((float)junkWorldEngines.getCurrentDifficulty());
		}

		previousLevel = jsonValue.getInt("level");

		if (jsonValue.getInt("level") != 100){
			for (int i = 1; i < jsonValue.getInt("level"); i++){
				float lastXPUp;
				lastXPUp = previousXpUp;
				previousXpUp = xpUp;
				xpUp += (xpUp -lastXPUp) + ((xpUp - lastXPUp) * 0.09f);
			}
		}
		else {
			for (int i = 1; i < (jsonValue.getInt("level") - 1); i++){
				float lastXPUp;
				lastXPUp = previousXpUp;
				previousXpUp = xpUp;
				xpUp += (xpUp -lastXPUp) + ((xpUp - lastXPUp) * 0.09f);
			}
		}

		//		TODO
	}

	private void createActorsGestures() {

		actorGestures = new Array<ActorGestureListener>();
		//		Ability Selection
		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				if (junkWorldEngines.getGameMode() == 0){
					junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
				}
				delayAbilityListener = TimeUtils.nanoTime();
			}
		});

		//		Type Or Color Selection
		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				if (junkWorldEngines.getGameMode() == 0){
					junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
				}
				delayColorTypeListener = TimeUtils.nanoTime();
			}
		});

		//		Main Menu
		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				gameState = GAMESTATE.UNPAUSABLE;
			}
		});

		//		Resume Game
		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				gameState = GAMESTATE.RUNNING;
			}
		});

		//		Quit Game
		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				quitClicked = true;
			}
		});

		//		Quit Game Yes
		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
//				game.adManager.showBannerAds(true);
				resetJunkWorldMusic();
				unlockables();
				isLoading = true;
				unloadManager();
				profileFile.writeString(jsonValue.toString(), false);
				disposeAssets();
				game.setScreen(new MainMenuScreen(game, manager, junkWorldEngines));
			}
		});

		//		Quit Game No
		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				quitClicked = false;
			}
		});

		//		TrashCan1Input
		actorGestures.add(new ActorGestureListener(){
			@Override
			public void fling(InputEvent event, float velocityX,
					float velocityY, int button) {
				isLongPressed = true;
				delaySelection1 = TimeUtils.nanoTime();
				super.fling(event, velocityX, velocityY, button);
			}

			@Override
			public boolean longPress(Actor actor, float x, float y) {
				isLongPressed = true;
				delaySelection1 = TimeUtils.nanoTime();
				return super.longPress(actor, x, y);
			}

			@Override
			public void touchUp(InputEvent event, float x, float y, int pointer, int button) {
				if (!isLongPressed){
					if (!trashCan1Used &&
							!unclickableCan1){
						if (trashCanSelected == TRASHCANSELECTED.NONE &&
								!disallow){
							if (!setTrashCanColor ||
									!setTrashCanType){
								delayActivateReset = true;
								disallow = true;
								trashCan1Used = true;
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
								trashCanSelected = TRASHCANSELECTED.FIRST;
								currentCan1State = CURRENTCAN1STATE.FULL;
								delayColListener = TimeUtils.nanoTime();
							}
							if (setTrashCanDelay){
								setTrashCanDelay = false;
								delayTrashCanSelection1 = TimeUtils.nanoTime();
							}
						}
					}
				}
				else {
					isLongPressed = false;
				}
			}
		});

		//		TrashCan2Input
		actorGestures.add(new ActorGestureListener(){
			@Override
			public void fling(InputEvent event, float velocityX,
					float velocityY, int button) {
				isLongPressed = true;
				delaySelection2 = TimeUtils.nanoTime();
				super.fling(event, velocityX, velocityY, button);
			}

			@Override
			public boolean longPress(Actor actor, float x, float y) {
				isLongPressed = true;
				delaySelection2 = TimeUtils.nanoTime();
				return super.longPress(actor, x, y);
			}

			@Override
			public void touchUp(InputEvent event, float x, float y, int pointer, int button) {
				if (!isLongPressed){
					if (!trashCan2Used &&
							!unclickableCan2){
						if (trashCanSelected == TRASHCANSELECTED.NONE &&
								!disallow){
							if (!setTrashCanColor ||
									!setTrashCanType){
								disallow = true;
								trashCan2Used = true;
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
								trashCanSelected = TRASHCANSELECTED.SECOND;
								currentCan2State = CURRENTCAN2STATE.FULL;
								delayColListener = TimeUtils.nanoTime();
							}
							if (setTrashCanDelay){
								setTrashCanDelay = false;
								delayTrashCanSelection2 = TimeUtils.nanoTime();
							}
						}
					}
				}
				else {
					isLongPressed = false;
				}
			}
		});

		//		TrashCan3Input
		actorGestures.add(new ActorGestureListener(){
			@Override
			public void fling(InputEvent event, float velocityX,
					float velocityY, int button) {
				isLongPressed = true;
				delaySelection3 = TimeUtils.nanoTime();
				super.fling(event, velocityX, velocityY, button);
			}

			@Override
			public boolean longPress(Actor actor, float x, float y) {
				isLongPressed = true;
				delaySelection3 = TimeUtils.nanoTime();
				return super.longPress(actor, x, y);
			}

			@Override
			public void touchUp(InputEvent event, float x, float y, int pointer, int button) {
				if (!isLongPressed){
					if (!trashCan3Used &&
							!unclickableCan3){
						if (trashCanSelected == TRASHCANSELECTED.NONE &&
								!disallow){
							if (!setTrashCanColor ||
									!setTrashCanType){
								disallow = true;
								trashCan3Used = true;
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
								trashCanSelected = TRASHCANSELECTED.THIRD;
								currentCan3State = CURRENTCAN3STATE.FULL;
								delayColListener = TimeUtils.nanoTime();
							}
							if (setTrashCanDelay){
								setTrashCanDelay = false;
								delayTrashCanSelection3 = TimeUtils.nanoTime();
							}
						}
					}
				}
				else {
					isLongPressed = false;
				}
			}
		});

		//		TrashCan4Input
		actorGestures.add(new ActorGestureListener(){
			@Override
			public void fling(InputEvent event, float velocityX,
					float velocityY, int button) {
				isLongPressed = true;
				delaySelection4 = TimeUtils.nanoTime();
				super.fling(event, velocityX, velocityY, button);
			}

			@Override
			public boolean longPress(Actor actor, float x, float y) {
				isLongPressed = true;
				delaySelection4 = TimeUtils.nanoTime();
				return super.longPress(actor, x, y);
			}

			@Override
			public void touchUp(InputEvent event, float x, float y, int pointer, int button) {
				if (!isLongPressed){
					if (!trashCan4Used &&
							!unclickableCan4){
						if (trashCanSelected == TRASHCANSELECTED.NONE &&
								!disallow){
							if (!setTrashCanColor ||
									!setTrashCanType){
								disallow = true;
								trashCan4Used = true;
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
								trashCanSelected = TRASHCANSELECTED.FOURTH;
								currentCan4State = CURRENTCAN4STATE.FULL;
								delayColListener = TimeUtils.nanoTime();
							}
							if (setTrashCanDelay){
								setTrashCanDelay = false; 
								delayTrashCanSelection4 = TimeUtils.nanoTime();
							}
						}
					}
				}
				else {
					isLongPressed = false;
				}
			}
		});

		//		Selection1
		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				delaySelection1 = TimeUtils.nanoTime();
			}
		});

		//		Selection2
		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				delaySelection2 = TimeUtils.nanoTime();
			}
		});

		//		Selection3
		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				delaySelection3 = TimeUtils.nanoTime();
			}
		});

		//		Selection4
		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				delaySelection4 = TimeUtils.nanoTime();
			}
		});

		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				if (currentItemSlotSelected == CurrentItemSlotSelected.NONE){
					switch (currentItem1){
					case 1: {
						switch (currentItemOfSlot1){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (currentItemOfSlot2){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;

						case SWITCH_MACHINE: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
								delaySticker = TimeUtils.millis();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (currentItemOfSlot3){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;

						case SWITCH_MACHINE: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					case 4: {
						switch (currentItemOfSlot4){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					case 5: {
						switch (currentItemOfSlot5){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					case 6: {
						switch (currentItemOfSlot6){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
				}
			}
		});

		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				if (currentItemSlotSelected == CurrentItemSlotSelected.NONE){
					switch (currentItem2){
					case 1: {
						switch (currentItemOfSlot1){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					};
					case 2: {
						switch (currentItemOfSlot2){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
							};
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (currentItemOfSlot3){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					case 4: {
						switch (currentItemOfSlot4){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					case 5: {
						switch (currentItemOfSlot5){
						case NONE: {

						};
						case BOMB: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					case 6: {
						switch (currentItemOfSlot6){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
				}
			}
		});

		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				if (currentItemSlotSelected == CurrentItemSlotSelected.NONE){
					switch (currentItem3){
					case 1: {
						switch (currentItemOfSlot1){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (currentItemOfSlot2){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (currentItemOfSlot3){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					case 4: {
						switch (currentItemOfSlot4){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					case 5: {
						switch (currentItemOfSlot5){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					};
					case 6: {
						switch (currentItemOfSlot6){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
				}
			}
		});

		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				if (currentItemSlotSelected == CurrentItemSlotSelected.NONE){
					switch (currentItem4){
					case 1: {
						switch (currentItemOfSlot1){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							};
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem1State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem1State = CurrentItem1State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIRST;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (currentItemOfSlot2){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem2State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem2State = CurrentItem2State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SECOND;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (currentItemOfSlot3){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem3State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem3State = CurrentItem3State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.THIRD;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					};
					case 4: {
						switch (currentItemOfSlot4){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem4State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem4State = CurrentItem4State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FOURTH;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					case 5: {
						switch (currentItemOfSlot5){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem5State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem5State = CurrentItem5State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.FIFTH;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					case 6: {
						switch (currentItemOfSlot6){
						case NONE: {

						}; break;
						case BOMB: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.BOMB;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case FLYSWATTER: {

						}; break;
						case ICEFLAKE: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.ICEFLAKE;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ELECTRIC_ZAPPER: {

						}; break;
						case ACCELERATOR: {

						}; break;
						case ACCELERATOR_X: {

						}; break;
						case STEEL_FLYSWATTER: {

						}; break;
						case GLUE: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.GLUE;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
							};
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case ITEM_RESTORE: {

						}; break;
						case SUPER_GLUE: {

						}; break;
						case WIND_VANE: {

						}; break;
						case SWITCH_MACHINE: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.SWITCH_MACHINE;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case AUGMENTED_BURST: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.AUGMENTED_BURST;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delayItemActive = TimeUtils.nanoTime();
								trashCan1Input.clearListeners();
								trashCan2Input.clearListeners();
								trashCan3Input.clearListeners();
								trashCan4Input.clearListeners();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						case STICKER: {
							switch (currentItem6State){
							case CLICKABLE: {
								currentSelectedItem = CurrentSelectedItem.STICKER;
								currentItem6State = CurrentItem6State.CLICKED;
								currentItemSlotSelected = CurrentItemSlotSelected.SIXTH;
								delaySticker = TimeUtils.millis();
								setItemToCD();
							}; break;
							case UNCLICKABLE: {

							}; break;
							case COOLDOWN: {

							}; break;
							default: break;
							}
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
				}
			}
		});

		//		dumpster
		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				if (junkWorldEngines.getGameMode() == 0){
					junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
				}
				switch (trashCanSelected){
				case FIRST: {
					disallow = true;
					if (currentCapacity1 != 0 && (dumpsterAmount < (junkWorldEngines.getDumpsterCapacity() - 1))){
						if ((int)dumpsterAmount + currentCapacity1 <= (int)junkWorldEngines.getDumpsterCapacity()){
							dumpsterAmount += currentCapacity1;
							currentCapacity1 = 0;
						}
						else {
							currentCapacity1 -= (int)junkWorldEngines.getDumpsterCapacity() - (int)dumpsterAmount;
							dumpsterAmount = (int)junkWorldEngines.getDumpsterCapacity();
						}
					}
					disallow = false;
				}; break;
				case SECOND: {
					disallow = true;
					if (currentCapacity2 != 0 && (dumpsterAmount < (junkWorldEngines.getDumpsterCapacity() - 1))){
						if ((int)dumpsterAmount + currentCapacity2 <= (int)junkWorldEngines.getDumpsterCapacity()){
							dumpsterAmount += currentCapacity2;
							currentCapacity2 = 0;
						}
						else {
							currentCapacity2 -= (int)junkWorldEngines.getDumpsterCapacity() - (int)dumpsterAmount;
							dumpsterAmount = (int)junkWorldEngines.getDumpsterCapacity();
						}
					}
					disallow = false;
				}; break;
				case THIRD: {
					disallow = true;
					if (currentCapacity3 != 0 && (dumpsterAmount < (junkWorldEngines.getDumpsterCapacity() - 1))){
						if ((int)dumpsterAmount + currentCapacity3 <= (int)junkWorldEngines.getDumpsterCapacity()){
							dumpsterAmount += currentCapacity3;
							currentCapacity3 = 0;
						}
						else {
							currentCapacity3 -= (int)junkWorldEngines.getDumpsterCapacity() - (int)dumpsterAmount;
							dumpsterAmount = (int)junkWorldEngines.getDumpsterCapacity();
						}
					}
					disallow = false;
				}; break;
				case FOURTH: {
					disallow = true;
					if (currentCapacity4 != 0 && (dumpsterAmount < (junkWorldEngines.getDumpsterCapacity() - 1))){
						if ((int)dumpsterAmount + currentCapacity4 <= (int)junkWorldEngines.getDumpsterCapacity()){
							dumpsterAmount += currentCapacity4;
							currentCapacity4 = 0;
						}
						else {
							currentCapacity4 -= (int)junkWorldEngines.getDumpsterCapacity() - (int)dumpsterAmount;
							dumpsterAmount = (int)junkWorldEngines.getDumpsterCapacity();
						}
					}
					disallow = false;
				}; break;
				default: break;
				}
			}
		});

		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				delayPlayAgain = TimeUtils.millis();
			}
		});

		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
//				game.adManager.showBannerAds(true);
				resetJunkWorldMusic();
				unlockables();
				isLoading = true;
				unloadManager();
				profileFile.writeString(jsonValue.toString(), false);
				disposeAssets();
				game.setScreen(new MainMenuScreen(game, manager, junkWorldEngines));
			}
		});

		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				if (burstModeButton == BurstModeButton.CLICKABLE){
					if (junkWorldEngines.getGameMode() == 0){
						junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
					}
					burstModeButton = BurstModeButton.CLICKED;
					delayBurstModeClicked = TimeUtils.millis();
					delayBurstMode2Clicked = TimeUtils.millis();
				}
			}
		});

		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				if (junkWorldEngines.getTotalUnlockedItemsSlots() < 5){
					if (currentItem1 + 1 == 5){
						currentItem1 = 0;
					} else currentItem1 += 1;
					if (currentItem2 + 1 == 5){
						currentItem2 = 0;
					} else currentItem2 += 1;
					if (currentItem3 + 1 == 5){
						currentItem3 = 0;
					} else currentItem3 += 1;
					if (currentItem4 + 1 == 5){
						currentItem4 = 0;
					} else currentItem4 += 1;
				}
				else {
					if (currentItem1 + 1 == junkWorldEngines.getTotalUnlockedItemsSlots()){
						currentItem1 = 0;
					} else currentItem1 += 1;
					if (currentItem2 + 1 == junkWorldEngines.getTotalUnlockedItemsSlots()){
						currentItem2 = 0;
					} else currentItem2 += 1;
					if (currentItem3 + 1 == junkWorldEngines.getTotalUnlockedItemsSlots()){
						currentItem3 = 0;
					} else currentItem3 += 1;
					if (currentItem4 + 1 == junkWorldEngines.getTotalUnlockedItemsSlots()){
						currentItem4 = 0;
					} else currentItem4 += 1;
				}
			}
		});

		//		left itemScroll
		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {

				if (junkWorldEngines.getTotalUnlockedItemsSlots() < 5){
					if (currentItem1 - 1 == 0){
						currentItem1 = 4;
					} else currentItem1 -= 1;
					if (currentItem2 - 1 == 0){
						currentItem2 = 4;
					} else currentItem2 -= 1;
					if (currentItem3 - 1 == 0){
						currentItem3 = 4;
					} else currentItem3 -= 1;
					if (currentItem4 - 1 == 0){
						currentItem4 = 4;
					} else currentItem4 -= 1;
				}
				else {
					if (currentItem1 - 1 == 0){
						currentItem1 = junkWorldEngines.getTotalUnlockedItemsSlots();
					} else currentItem1 -= 1;
					if (currentItem2 - 1 == 0){
						currentItem2 = junkWorldEngines.getTotalUnlockedItemsSlots();
					} else currentItem2 -= 1;
					if (currentItem3 - 1 == 0){
						currentItem3 = junkWorldEngines.getTotalUnlockedItemsSlots();
					} else currentItem3 -= 1;
					if (currentItem4 - 1 == 0){
						currentItem4 = junkWorldEngines.getTotalUnlockedItemsSlots();
					} else currentItem4 -= 1;
				}
			}
		});

		actorGestures.add(new ActorGestureListener(){
			@Override
			public void touchDown(InputEvent event, float x, float y,
					int pointer, int button) {
				if (junkWorldEngines.getGameSelection() == 2){
					resetJunkWorldMusic();
					isLoading = true;
					unloadManager();
					disposeAssets();
					profileFile.writeString(jsonValue.toString(), false);
					game.setScreen(new TrashCanSelectionScreen(game, manager, junkWorldEngines));
				}
			}
		});

		//		right itemScroll
		//		TODO actors
	}

	private void createHUDActors() {
		toAbilitySelection.addListener(actorGestures.get(0));
		toColorOrTypeSelection.addListener(actorGestures.get(1));
		mainMenu.addListener(actorGestures.get(2));
		resumeGame.addListener(actorGestures.get(3));
		quitGame.addListener(actorGestures.get(4));
		quitGameYes.addListener(actorGestures.get(5));
		quitGameNo.addListener(actorGestures.get(6));

		dumpster.addListener(actorGestures.get(19));
		playAgain.addListener(actorGestures.get(20));
		mainMenuScreen.addListener(actorGestures.get(21));
		burstMode.addListener(actorGestures.get(22));
		scrollItemsLeft.addListener(actorGestures.get(23));
		scrollItemsRight.addListener(actorGestures.get(24));
		changeTrashCans.addListener(actorGestures.get(25));

		if (junkWorldEngines.getGameMode() == 0){
			junkWorldEngines.setQuitTutorial(new Actor());
			junkWorldEngines.getQuitTutorial().addListener(new ActorGestureListener(){
				@Override
				public void touchDown(InputEvent event, float x, float y,
						int pointer, int button) {
//					game.adManager.showBannerAds(true);
					resetJunkWorldMusic();
					unlockables();
					isLoading = true;
					unloadManager();
					disposeAssets();
					profileFile.writeString(jsonValue.toString(), false);
					game.setScreen(new MainMenuScreen(game, manager, junkWorldEngines));
					super.touchDown(event, x, y, pointer, button);
				}
			});

			junkWorldEngines.setTutorialStage(new Stage());
			junkWorldEngines.getTutorialStage().addActor(junkWorldEngines.getClickContinueTutorial());
			junkWorldEngines.getTutorialStage().addActor(junkWorldEngines.getQuitTutorial());
			junkWorldEngines.getTutorialStage().addActor(trashCan1Input);
			junkWorldEngines.getTutorialStage().addActor(trashCan2Input);
			junkWorldEngines.getTutorialStage().addActor(trashCan3Input);
			junkWorldEngines.getTutorialStage().addActor(trashCan4Input);
			junkWorldEngines.getTutorialStage().addActor(dumpster);
			junkWorldEngines.getTutorialStage().addActor(burstMode);
			junkWorldEngines.getTutorialStage().addActor(selection1);
			junkWorldEngines.getTutorialStage().addActor(selection2);
			junkWorldEngines.getTutorialStage().addActor(selection3);
			junkWorldEngines.getTutorialStage().addActor(selection4);
			junkWorldEngines.getTutorialStage().addActor(toColorOrTypeSelection);
			junkWorldEngines.getTutorialStage().addActor(toAbilitySelection);
			junkWorldEngines.getTutorialStage().addActor(selection1);
			junkWorldEngines.getTutorialStage().addActor(selection1);
		}
	}

	private void addActorListener() {
		//		Listeners
		if (addListener){
			addListener = false;
			trashCan1Input.addListener(actorGestures.get(7));
			trashCan2Input.addListener(actorGestures.get(8));
			trashCan3Input.addListener(actorGestures.get(9));
			trashCan4Input.addListener(actorGestures.get(10));
		}
		if (setOtherListeners){
			setOtherListeners = false;
			selection1.addListener(actorGestures.get(11));
			selection2.addListener(actorGestures.get(12));
			selection3.addListener(actorGestures.get(13));
			selection4.addListener(actorGestures.get(14));
		}

		if (itemListeners){
			itemListeners = false;
			items.get(0).addListener(actorGestures.get(15));
			items.get(1).addListener(actorGestures.get(16));
			items.get(2).addListener(actorGestures.get(17));
			items.get(3).addListener(actorGestures.get(18));
		}

		if (removeListeners){
			removeListeners = false;
			trashCan1Input.clearListeners();
			trashCan2Input.clearListeners();
			trashCan3Input.clearListeners();
			trashCan4Input.clearListeners();
		}
	}

	private void createTextures(){

		if (createTrashCanTextures){
			createTrashCanTextures = false;

			if (isTrashCan1){

				switch (trashCan1Properties.getTrashCan()){
				case 1: {
					switch (junkWorldEngines.getPreviousTrashCan1Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan1 = averageCanSpeed;
				}; break;
				case 2: {
					switch (junkWorldEngines.getPreviousTrashCan1Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan1 = scorchingCanSpeed;
				}; break;
				case 3: {
					switch (junkWorldEngines.getPreviousTrashCan1Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan1 = vacuumCanSpeed;
				}; break;
				case 4: {
					switch (junkWorldEngines.getPreviousTrashCan1Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan1 = trashBlowerSpeed;
				}; break;
				case 5: {
					switch (junkWorldEngines.getPreviousTrashCan1Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan1 = dullCanSpeed;
				}; break;
				case 6: {
					switch (junkWorldEngines.getPreviousTrashCan1Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan1Color()){
						case 1: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/red.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/orange.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/green.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/blue.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/purple.png", Texture.class));
							trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan1 = swiftCanSpeed;
				}; break;
				default: break;
				}
				currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
			} else {
				trashCan1Region = new TextureRegion(manager.get("gameScreenAssets/blankCan/blankCan.png", Texture.class));
				trashCan1RegionFull = new TextureRegion(manager.get("gameScreenAssets/blankCan/blankCan.png", Texture.class));
				unclickableCan1 = true;
				currentAbilityState1 = CURRENTABILITYSTATE1.UNCLICKABLE;
			}

			if (isTrashCan2){

				switch (trashCan2Properties.getTrashCan()){
				case 1: {
					switch (junkWorldEngines.getPreviousTrashCan2Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan2 = averageCanSpeed;
				}; break;
				case 2: {
					switch (junkWorldEngines.getPreviousTrashCan2Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan2 = scorchingCanSpeed;
				}; break;
				case 3: {
					switch (junkWorldEngines.getPreviousTrashCan2Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan2 = vacuumCanSpeed;
				}; break;
				case 4: {
					switch (junkWorldEngines.getPreviousTrashCan2Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan2 = trashBlowerSpeed;
				}; break;
				case 5: {
					switch (junkWorldEngines.getPreviousTrashCan2Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan2 = dullCanSpeed;
				}; break;
				case 6: {
					switch (junkWorldEngines.getPreviousTrashCan2Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan2Color()){
						case 1: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/red.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/orange.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/green.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/blue.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/purple.png", Texture.class));
							trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan2 = swiftCanSpeed;
				}; break;
				default: break;
				}
				currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
			} else {
				trashCan2Region = new TextureRegion(manager.get("gameScreenAssets/blankCan/blankCan.png", Texture.class));
				trashCan2RegionFull = new TextureRegion(manager.get("gameScreenAssets/blankCan/blankCan.png", Texture.class));
				unclickableCan2 = true;
				currentAbilityState2 = CURRENTABILITYSTATE2.UNCLICKABLE;
			}

			if (isTrashCan3){

				switch (trashCan3Properties.getTrashCan()){
				case 1: {
					switch (junkWorldEngines.getPreviousTrashCan3Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan3 = averageCanSpeed;
				}; break;
				case 2: {
					switch (junkWorldEngines.getPreviousTrashCan3Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan3 = scorchingCanSpeed;
				}; break;
				case 3: {
					switch (junkWorldEngines.getPreviousTrashCan3Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan3 = vacuumCanSpeed;
				}; break;
				case 4: {
					switch (junkWorldEngines.getPreviousTrashCan3Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan3 = trashBlowerSpeed;
				}; break;
				case 5: {
					switch (junkWorldEngines.getPreviousTrashCan3Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan3 = dullCanSpeed;
				}; break;
				case 6: {
					switch (junkWorldEngines.getPreviousTrashCan3Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan3Color()){
						case 1: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/red.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/orange.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/green.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/blue.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/purple.png", Texture.class));
							trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan3 = swiftCanSpeed;
				}; break;
				default: break;
				}
				currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
			} else {
				trashCan3Region = new TextureRegion(manager.get("gameScreenAssets/blankCan/blankCan.png", Texture.class));
				trashCan3RegionFull = new TextureRegion(manager.get("gameScreenAssets/blankCan/blankCan.png", Texture.class));
				unclickableCan3 = true;
				currentAbilityState3 = CURRENTABILITYSTATE3.UNCLICKABLE;
			}

			if (isTrashCan4){

				switch (trashCan4Properties.getTrashCan()){
				case 1: {
					switch (junkWorldEngines.getPreviousTrashCan4Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan4 = averageCanSpeed;
				}; break;
				case 2: {
					switch (junkWorldEngines.getPreviousTrashCan4Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan4 = scorchingCanSpeed;
				}; break;
				case 3: {
					switch (junkWorldEngines.getPreviousTrashCan4Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan4 = vacuumCanSpeed;
				}; break;
				case 4: {
					switch (junkWorldEngines.getPreviousTrashCan4Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan4 = trashBlowerSpeed;
				}; break;
				case 5: {
					switch (junkWorldEngines.getPreviousTrashCan4Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan4 = dullCanSpeed;
				}; break;
				case 6: {
					switch (junkWorldEngines.getPreviousTrashCan4Type()) {
					case 1: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 2: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					case 3: {
						switch (junkWorldEngines.getPreviousTrashCan4Color()){
						case 1: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/red.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/redClicked.png", Texture.class));
						}; break;
						case 2: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/orange.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/orangeClicked.png", Texture.class));
						}; break;
						case 3: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/yellow.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/yellowClicked.png", Texture.class));
						}; break;
						case 4: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/green.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/greenClicked.png", Texture.class));
						}; break;
						case 5: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/blue.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/blueClicked.png", Texture.class));
						}; break;
						case 6: {
							trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/purple.png", Texture.class));
							trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/purpleClicked.png", Texture.class));
						}; break;
						default: break;
						}
					}; break;
					default: break;
					}
					speedOfCan4 = swiftCanSpeed;
				}; break;
				default: break;
				}
				currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
			} else {
				trashCan4Region = new TextureRegion(manager.get("gameScreenAssets/blankCan/blankCan.png", Texture.class));
				trashCan4RegionFull = new TextureRegion(manager.get("gameScreenAssets/blankCan/blankCan.png", Texture.class));
				unclickableCan4 = true;
				currentAbilityState4 = CURRENTABILITYSTATE4.UNCLICKABLE;
			}
			//			switch ENDS HERE

			if (trashCan1Properties.getTrashCan() == 1 ||
					trashCan2Properties.getTrashCan() == 1 ||
					trashCan3Properties.getTrashCan() == 1 ||
					trashCan4Properties.getTrashCan() == 1){
				redAverageBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/red.png", Texture.class));
				redAverageBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/redClicked.png", Texture.class));
				redAverageRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/red.png", Texture.class));
				redAverageRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/redClicked.png", Texture.class));
				redAverageNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/red.png", Texture.class));
				redAverageNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/redClicked.png", Texture.class));
				orangeAverageBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/orange.png", Texture.class));
				orangeAverageBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/orangeClicked.png", Texture.class));
				orangeAverageRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/orange.png", Texture.class));
				orangeAverageRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/orangeClicked.png", Texture.class));
				orangeAverageNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/orange.png", Texture.class));
				orangeAverageNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/orangeClicked.png", Texture.class));
				yellowAverageBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/yellow.png", Texture.class));
				yellowAverageBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/yellowClicked.png", Texture.class));
				yellowAverageRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/yellow.png", Texture.class));
				yellowAverageRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/yellowClicked.png", Texture.class));
				yellowAverageNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/yellow.png", Texture.class));
				yellowAverageNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/yellowClicked.png", Texture.class));
				greenAverageBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/green.png", Texture.class));
				greenAverageBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/greenClicked.png", Texture.class));
				greenAverageRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/green.png", Texture.class));
				greenAverageRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/greenClicked.png", Texture.class));
				greenAverageNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/green.png", Texture.class));
				greenAverageNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/greenClicked.png", Texture.class));
				blueAverageBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/blue.png", Texture.class));
				blueAverageBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/blueClicked.png", Texture.class));
				blueAverageRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/blue.png", Texture.class));
				blueAverageRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/blueClicked.png", Texture.class));
				blueAverageNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/blue.png", Texture.class));
				blueAverageNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/blueClicked.png", Texture.class));
				purpleAverageBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/purple.png", Texture.class));
				purpleAverageBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Biodegradable/purpleClicked.png", Texture.class));
				purpleAverageRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/purple.png", Texture.class));
				purpleAverageRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Recyclable/purpleClicked.png", Texture.class));
				purpleAverageNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/purple.png", Texture.class));
				purpleAverageNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/Non-Recyclable/purpleClicked.png", Texture.class));
			}

			if (trashCan1Properties.getTrashCan() == 2 ||
					trashCan2Properties.getTrashCan() == 2 ||
					trashCan3Properties.getTrashCan() == 2 ||
					trashCan4Properties.getTrashCan() == 2){
				redScorchingBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/red.png", Texture.class));
				redScorchingBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/redClicked.png", Texture.class));
				redScorchingRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/red.png", Texture.class));
				redScorchingRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/redClicked.png", Texture.class));
				redScorchingNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/red.png", Texture.class));
				redScorchingNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/redClicked.png", Texture.class));
				orangeScorchingBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/orange.png", Texture.class));
				orangeScorchingBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/orangeClicked.png", Texture.class));
				orangeScorchingRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/orange.png", Texture.class));
				orangeScorchingRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/orangeClicked.png", Texture.class));
				orangeScorchingNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/orange.png", Texture.class));
				orangeScorchingNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/orangeClicked.png", Texture.class));
				yellowScorchingBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/yellow.png", Texture.class));
				yellowScorchingBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/yellowClicked.png", Texture.class));
				yellowScorchingRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/yellow.png", Texture.class));
				yellowScorchingRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/yellowClicked.png", Texture.class));
				yellowScorchingNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/yellow.png", Texture.class));
				yellowScorchingNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/yellowClicked.png", Texture.class));
				greenScorchingBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/green.png", Texture.class));
				greenScorchingBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/greenClicked.png", Texture.class));
				greenScorchingRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/green.png", Texture.class));
				greenScorchingRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/greenClicked.png", Texture.class));
				greenScorchingNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/green.png", Texture.class));
				greenScorchingNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/greenClicked.png", Texture.class));
				blueScorchingBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/blue.png", Texture.class));
				blueScorchingBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/blueClicked.png", Texture.class));
				blueScorchingRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/blue.png", Texture.class));
				blueScorchingRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/blueClicked.png", Texture.class));
				blueScorchingNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/blue.png", Texture.class));
				blueScorchingNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/blueClicked.png", Texture.class));
				purpleScorchingBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/purple.png", Texture.class));
				purpleScorchingBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Biodegradable/purpleClicked.png", Texture.class));
				purpleScorchingRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/purple.png", Texture.class));
				purpleScorchingRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Recyclable/purpleClicked.png", Texture.class));
				purpleScorchingNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/purple.png", Texture.class));
				purpleScorchingNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Scorching Can/Non-Recyclable/purpleClicked.png", Texture.class));
			}

			if (trashCan1Properties.getTrashCan() == 3 ||
					trashCan2Properties.getTrashCan() == 3 ||
					trashCan3Properties.getTrashCan() == 3 ||
					trashCan4Properties.getTrashCan() == 3){
				redVacuumBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/red.png", Texture.class));
				redVacuumBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/redClicked.png", Texture.class));
				redVacuumRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/red.png", Texture.class));
				redVacuumRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/redClicked.png", Texture.class));
				redVacuumNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/red.png", Texture.class));
				redVacuumNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/redClicked.png", Texture.class));
				orangeVacuumBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/orange.png", Texture.class));
				orangeVacuumBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/orangeClicked.png", Texture.class));
				orangeVacuumRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/orange.png", Texture.class));
				orangeVacuumRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/orangeClicked.png", Texture.class));
				orangeVacuumNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/orange.png", Texture.class));
				orangeVacuumNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/orangeClicked.png", Texture.class));
				yellowVacuumBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/yellow.png", Texture.class));
				yellowVacuumBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/yellowClicked.png", Texture.class));
				yellowVacuumRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/yellow.png", Texture.class));
				yellowVacuumRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/yellowClicked.png", Texture.class));
				yellowVacuumNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/yellow.png", Texture.class));
				yellowVacuumNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/yellowClicked.png", Texture.class));
				greenVacuumBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/green.png", Texture.class));
				greenVacuumBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/greenClicked.png", Texture.class));
				greenVacuumRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/green.png", Texture.class));
				greenVacuumRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/greenClicked.png", Texture.class));
				greenVacuumNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/green.png", Texture.class));
				greenVacuumNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/greenClicked.png", Texture.class));
				blueVacuumBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/blue.png", Texture.class));
				blueVacuumBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/blueClicked.png", Texture.class));
				blueVacuumRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/blue.png", Texture.class));
				blueVacuumRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/blueClicked.png", Texture.class));
				blueVacuumNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/blue.png", Texture.class));
				blueVacuumNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/blueClicked.png", Texture.class));
				purpleVacuumBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/purple.png", Texture.class));
				purpleVacuumBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Biodegradable/purpleClicked.png", Texture.class));
				purpleVacuumRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/purple.png", Texture.class));
				purpleVacuumRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Recyclable/purpleClicked.png", Texture.class));
				purpleVacuumNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/purple.png", Texture.class));
				purpleVacuumNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Vacuum Can/Non-Recyclable/purpleClicked.png", Texture.class));
			}

			if (trashCan1Properties.getTrashCan() == 4 ||
					trashCan2Properties.getTrashCan() == 4 ||
					trashCan3Properties.getTrashCan() == 4 ||
					trashCan4Properties.getTrashCan() == 4){
				redTrashBBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/red.png", Texture.class));
				redTrashBBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/redClicked.png", Texture.class));
				redTrashRBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/red.png", Texture.class));
				redTrashRBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/redClicked.png", Texture.class));
				redTrashNRBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/red.png", Texture.class));
				redTrashNRBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/redClicked.png", Texture.class));
				orangeTrashBBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/orange.png", Texture.class));
				orangeTrashBBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/orangeClicked.png", Texture.class));
				orangeTrashRBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/orange.png", Texture.class));
				orangeTrashRBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/orangeClicked.png", Texture.class));
				orangeTrashNRBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/orange.png", Texture.class));
				orangeTrashNRBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/orangeClicked.png", Texture.class));
				yellowTrashBBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/yellow.png", Texture.class));
				yellowTrashBBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/yellowClicked.png", Texture.class));
				yellowTrashRBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/yellow.png", Texture.class));
				yellowTrashRBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/yellowClicked.png", Texture.class));
				yellowTrashNRBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/yellow.png", Texture.class));
				yellowTrashNRBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/yellowClicked.png", Texture.class));
				greenTrashBBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/green.png", Texture.class));
				greenTrashBBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/greenClicked.png", Texture.class));
				greenTrashRBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/green.png", Texture.class));
				greenTrashRBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/greenClicked.png", Texture.class));
				greenTrashNRBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/green.png", Texture.class));
				greenTrashNRBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/greenClicked.png", Texture.class));
				blueTrashBBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/blue.png", Texture.class));
				blueTrashBBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/blueClicked.png", Texture.class));
				blueTrashRBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/blue.png", Texture.class));
				blueTrashRBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/blueClicked.png", Texture.class));
				blueTrashNRBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/blue.png", Texture.class));
				blueTrashNRBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/blueClicked.png", Texture.class));
				purpleTrashBBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/purple.png", Texture.class));
				purpleTrashBBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Biodegradable/purpleClicked.png", Texture.class));
				purpleTrashRBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/purple.png", Texture.class));
				purpleTrashRBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Recyclable/purpleClicked.png", Texture.class));
				purpleTrashNRBlower = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/purple.png", Texture.class));
				purpleTrashNRBlowerClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Trash Blower/Non-Recyclable/purpleClicked.png", Texture.class));
			}

			if (trashCan1Properties.getTrashCan() == 5 ||
					trashCan2Properties.getTrashCan() == 5 ||
					trashCan3Properties.getTrashCan() == 5 ||
					trashCan4Properties.getTrashCan() == 5){
				redDullBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/red.png", Texture.class));
				redDullBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/redClicked.png", Texture.class));
				redDullRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/red.png", Texture.class));
				redDullRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/redClicked.png", Texture.class));
				redDullNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/red.png", Texture.class));
				redDullNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/redClicked.png", Texture.class));
				orangeDullBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/orange.png", Texture.class));
				orangeDullBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/orangeClicked.png", Texture.class));
				orangeDullRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/orange.png", Texture.class));
				orangeDullRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/orangeClicked.png", Texture.class));
				orangeDullNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/orange.png", Texture.class));
				orangeDullNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/orangeClicked.png", Texture.class));
				yellowDullBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/yellow.png", Texture.class));
				yellowDullBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/yellowClicked.png", Texture.class));
				yellowDullRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/yellow.png", Texture.class));
				yellowDullRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/yellowClicked.png", Texture.class));
				yellowDullNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/yellow.png", Texture.class));
				yellowDullNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/yellowClicked.png", Texture.class));
				greenDullBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/green.png", Texture.class));
				greenDullBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/greenClicked.png", Texture.class));
				greenDullRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/green.png", Texture.class));
				greenDullRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/greenClicked.png", Texture.class));
				greenDullNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/green.png", Texture.class));
				greenDullNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/greenClicked.png", Texture.class));
				blueDullBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/blue.png", Texture.class));
				blueDullBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/blueClicked.png", Texture.class));
				blueDullRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/blue.png", Texture.class));
				blueDullRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/blueClicked.png", Texture.class));
				blueDullNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/blue.png", Texture.class));
				blueDullNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/blueClicked.png", Texture.class));
				purpleDullBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/purple.png", Texture.class));
				purpleDullBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/purpleClicked.png", Texture.class));
				purpleDullRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/purple.png", Texture.class));
				purpleDullRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/purpleClicked.png", Texture.class));
				purpleDullNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/purple.png", Texture.class));
				purpleDullNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/purpleClicked.png", Texture.class));
				noneDullBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultB.png", Texture.class));
				noneDullBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultBClicked.png", Texture.class));
				noneDullRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultR.png", Texture.class));
				noneDullRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultRClicked.png", Texture.class));
				noneDullNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultNR.png", Texture.class));
				noneDullNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/defaultNRClicked.png", Texture.class));
			}

			if (trashCan1Properties.getTrashCan() == 6 ||
					trashCan2Properties.getTrashCan() == 6 ||
					trashCan3Properties.getTrashCan() == 6 ||
					trashCan4Properties.getTrashCan() == 6){
				redSwiftBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/red.png", Texture.class));
				redSwiftBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/redClicked.png", Texture.class));
				redSwiftRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/red.png", Texture.class));
				redSwiftRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/redClicked.png", Texture.class));
				redSwiftNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/red.png", Texture.class));
				redSwiftNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/redClicked.png", Texture.class));
				orangeSwiftBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/orange.png", Texture.class));
				orangeSwiftBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/orangeClicked.png", Texture.class));
				orangeSwiftRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/orange.png", Texture.class));
				orangeSwiftRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/orangeClicked.png", Texture.class));
				orangeSwiftNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/orange.png", Texture.class));
				orangeSwiftNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/orangeClicked.png", Texture.class));
				yellowSwiftBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/yellow.png", Texture.class));
				yellowSwiftBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/yellowClicked.png", Texture.class));
				yellowSwiftRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/yellow.png", Texture.class));
				yellowSwiftRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/yellowClicked.png", Texture.class));
				yellowSwiftNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/yellow.png", Texture.class));
				yellowSwiftNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/yellowClicked.png", Texture.class));
				greenSwiftBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/green.png", Texture.class));
				greenSwiftBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/greenClicked.png", Texture.class));
				greenSwiftRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/green.png", Texture.class));
				greenSwiftRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/greenClicked.png", Texture.class));
				greenSwiftNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/green.png", Texture.class));
				greenSwiftNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/greenClicked.png", Texture.class));
				blueSwiftBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/blue.png", Texture.class));
				blueSwiftBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/blueClicked.png", Texture.class));
				blueSwiftRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/blue.png", Texture.class));
				blueSwiftRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/blueClicked.png", Texture.class));
				blueSwiftNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/blue.png", Texture.class));
				blueSwiftNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/blueClicked.png", Texture.class));
				purpleSwiftBCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/purple.png", Texture.class));
				purpleSwiftBCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Biodegradable/purpleClicked.png", Texture.class));
				purpleSwiftRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/purple.png", Texture.class));
				purpleSwiftRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Recyclable/purpleClicked.png", Texture.class));
				purpleSwiftNRCan = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/purple.png", Texture.class));
				purpleSwiftNRCanClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Swift Can/Non-Recyclable/purpleClicked.png", Texture.class));
			}

			trash1Cell = new Rectangle(32, 534, 64, 64);
			trash2Cell = new Rectangle(160, 534, 64, 64);
			trash3Cell = new Rectangle(288, 534, 64, 64);
			trash4Cell = new Rectangle(419, 534, 64, 64);
			trash5Cell = new Rectangle(32, 468, 64, 64);
			trash6Cell = new Rectangle(160, 468, 64, 64);
			trash7Cell = new Rectangle(288, 468, 64, 64);
			trash8Cell = new Rectangle(419, 468, 64, 64);
			trash9Cell = new Rectangle(32, 402, 64, 64);
			trash10Cell = new Rectangle(160, 402, 64, 64);
			trash11Cell = new Rectangle(288, 402, 64, 64);
			trash12Cell = new Rectangle(419, 402, 64, 64);
			trash13Cell = new Rectangle(32, 336, 64, 64);
			trash14Cell = new Rectangle(160, 336, 64, 64);
			trash15Cell = new Rectangle(288, 336, 64, 64);
			trash16Cell = new Rectangle(419, 336, 64, 64);

			redBag = new TextureRegion(manager.get("gameScreenAssets/trashBagColors/redTrashBag.png", Texture.class));
			orangeBag = new TextureRegion(manager.get("gameScreenAssets/trashBagColors/orangeTrashBag.png", Texture.class));
			yellowBag = new TextureRegion(manager.get("gameScreenAssets/trashBagColors/yellowTrashBag.png", Texture.class));
			greenBag = new TextureRegion(manager.get("gameScreenAssets/trashBagColors/greenTrashBag.png", Texture.class));
			blueBag = new TextureRegion(manager.get("gameScreenAssets/trashBagColors/blueTrashBag.png", Texture.class));
			purpleBag = new TextureRegion(manager.get("gameScreenAssets/trashBagColors/purpleTrashBag.png", Texture.class));

			trashBagColors = new Array<TextureRegion>();
			trashBagColors.add(redBag);
			trashBagColors.add(orangeBag);
			trashBagColors.add(yellowBag);
			trashBagColors.add(greenBag);
			trashBagColors.add(blueBag);
			trashBagColors.add(purpleBag);

			//			COMBO ASSETS

			averageCanAbility = new TextureRegion(manager.get("buttons/coverAbilityButton.png", Texture.class));
			averageCanAbilityClicked = new TextureRegion(manager.get("buttons/coverAbilityButtonClicked.png", Texture.class));
			averageCanAbilityUnclickable = new TextureRegion(manager.get("buttons/coverAbilityButtonUnclickable.png", Texture.class));
			scorchingCanAbility = new TextureRegion(manager.get("buttons/burnAbilityButton.png", Texture.class));
			scorchingCanAbilityClicked = new TextureRegion(manager.get("buttons/burnAbilityButtonClicked.png", Texture.class));
			scorchingCanAbilityCD = new TextureRegion(manager.get("buttons/burnAbilityButtonCD.png", Texture.class));
			scorchingCanAbilityUnclickable = new TextureRegion(manager.get("buttons/burnAbilityButtonUnclickable.png", Texture.class));
			vacuumCanAbility = new TextureRegion(manager.get("buttons/drainAbilityButton.png", Texture.class));
			vacuumCanAbilityClicked = new TextureRegion(manager.get("buttons/drainAbilityButtonClicked.png", Texture.class));
			vacuumCanAbilityCD = new TextureRegion(manager.get("buttons/drainAbilityButtonCD.png", Texture.class));
			vacuumCanAbilityUnclickable = new TextureRegion(manager.get("buttons/drainAbilityButtonUnclickable.png", Texture.class));
			trashBlowerAbility = new TextureRegion(manager.get("buttons/blowAbilityButton.png", Texture.class));
			trashBlowerAbilityCD = new TextureRegion(manager.get("buttons/blowAbilityButtonCD.png", Texture.class));
			trashBlowerAbilityClicked = new TextureRegion(manager.get("buttons/blowAbilityButtonClicked.png", Texture.class));
			trashBlowerAbilityUnclickable = new TextureRegion(manager.get("buttons/blowAbilityButtonUnclickable.png", Texture.class));
			dullCanAbility = new TextureRegion(manager.get("buttons/beautifyAbilityButton.png", Texture.class));			
			dullCanAbilityClicked = new TextureRegion(manager.get("buttons/beautifyAbilityButtonClicked.png", Texture.class));
			dullCanAbilityUnclickable = new TextureRegion(manager.get("buttons/beautifyAbilityButtonUnclickable.png", Texture.class));
			swiftCanAbility = new TextureRegion(manager.get("buttons/overchargeAbilityButton.png", Texture.class));
			swiftCanAbilityClicked = new TextureRegion(manager.get("buttons/overchargeAbilityButtonClicked.png", Texture.class));
			swiftCanAbilityUnclickable = new TextureRegion(manager.get("buttons/overchargeAbilityButtonUnclickable.png", Texture.class));

			clickableBurstModeRegion = new TextureRegion(manager.get("buttons/burstButtonClickable.png", Texture.class));
			unclickableBurstModeRegion = new TextureRegion(manager.get("buttons/burstButtonUnclickable.png", Texture.class));
			burstModeRegion = new TextureRegion(manager.get("buttons/burstButton.png", Texture.class));

			for (int i = 0; i < 25; i++){
				burstModeCDRegion.add(new TextureRegion(manager.get("buttons/burstButtonCD/burstButtonCD" + i + ".png", Texture.class)));
				clickedBurstModeRegion.add(new TextureRegion(manager.get("buttons/burstButtonClicked/burstButtonCD" + i + ".png", Texture.class)));
			}

			blankRegion = new TextureRegion(manager.get("gameScreenAssets/blankCan/blankCan.png", Texture.class));
			paletteColors.add(new TextureRegion(manager.get("buttons/redColor.png", Texture.class)));
			paletteColors.add(new TextureRegion(manager.get("buttons/redColorClicked.png", Texture.class)));
			paletteColors.add(new TextureRegion(manager.get("buttons/orangeColor.png", Texture.class)));
			paletteColors.add(new TextureRegion(manager.get("buttons/orangeColorClicked.png", Texture.class)));
			paletteColors.add(new TextureRegion(manager.get("buttons/yellowColor.png", Texture.class)));
			paletteColors.add(new TextureRegion(manager.get("buttons/yellowColorClicked.png", Texture.class)));
			paletteColors.add(new TextureRegion(manager.get("buttons/greenColor.png", Texture.class)));
			paletteColors.add(new TextureRegion(manager.get("buttons/greenColorClicked.png", Texture.class)));
			paletteColors.add(new TextureRegion(manager.get("buttons/blueColor.png", Texture.class)));
			paletteColors.add(new TextureRegion(manager.get("buttons/blueColorClicked.png", Texture.class)));
			paletteColors.add(new TextureRegion(manager.get("buttons/purpleColor.png", Texture.class)));
			paletteColors.add(new TextureRegion(manager.get("buttons/purpleColorClicked.png", Texture.class)));

			biodegradableRegion = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/biodegradable.png", Texture.class));
			biodegradableClickedRegion = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/biodegradableClicked.png", Texture.class));
			recyclableRegion = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/recyclable.png", Texture.class));
			recyclableClickedRegion = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/recyclableClicked.png", Texture.class));
			nonRecyclableRegion = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/nonRecyclable.png", Texture.class));
			nonRecyclableClickedRegion = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/trashTypeIcons/nonRecyclableClicked.png", Texture.class));

			colorSelectionRegion = new TextureRegion(manager.get("buttons/changedToColorSelection.png", Texture.class));
			typeSelectionRegion = new TextureRegion(manager.get("buttons/changedToTypeSelection.png", Texture.class));
			abilitySelectionOff = new TextureRegion(manager.get("buttons/changedToAbilitySelection.png", Texture.class));
			abilitySelectionOn = new TextureRegion(manager.get("buttons/changedToAbilitySelectionClicked.png", Texture.class));
			currentTypeColorSelection = new TextureRegion(colorSelectionRegion);

			capacitorBarRegion = new TextureRegion(manager.get("gameScreenAssets/inGameMenuAssets/capacityBar.png", Texture.class));
			capacitorBarOutlineRegion = new TextureRegion(manager.get("gameScreenAssets/inGameMenuAssets/capacityBarOutline.png", Texture.class));

			//			INSTANTIATE ABILITY ASSETS
			switch (trashCan1Properties.getTrashCan()){
			case 1: {
				ability1Region = new TextureRegion[1];
				ability1Region[0] = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/averageOpened.png", Texture.class));
				cooldown1 = 0;
			}; break;
			case 2: {
				ability1Region = new TextureRegion[12];
				for (int i = 0; i < 12; i++){
					ability1Region[i] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/burnAbility/fire" + i + ".png", Texture.class));
				}
				cooldown1 = 9000;
			}; break;
			case 3: {
				ability1Region = new TextureRegion[10];
				for (int i = 0; i < 10; i++){
					ability1Region[i] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/drainAbility/drain" + i + ".png", Texture.class));
				}
				cooldown1 = 10000;
			}; break;
			case 4: {
				ability1Region = new TextureRegion[9];
				for (int i = 0; i < 9; i++){
					ability1Region[i] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/blowAbility/fan" + i + ".png", Texture.class));
				}
				cooldown1 = 10000;
			}; break;
			case 5: {
				cooldown1 = 0;
			}; break;
			case 6: {
				ability1Region = new TextureRegion[7];
				ability1Region[0] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/discharged.png", Texture.class));
				ability1Region[1] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/energy.png", Texture.class));
				ability1Region[2] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/energyBar.png", Texture.class));
				ability1Region[3] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/energyBarred.png", Texture.class));
				ability1Region[4] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/indic0.png", Texture.class));
				ability1Region[5] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/indic1.png", Texture.class));
				ability1Region[6] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/indic2.png", Texture.class));
				cooldown1 = 0;
			}; break;
			default: break;
			}

			switch (trashCan2Properties.getTrashCan()){
			case 1: {
				ability2Region = new TextureRegion[1];
				ability2Region[0] = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/averageOpened.png", Texture.class));
				cooldown2 = 0;
			}; break;
			case 2: {
				ability2Region = new TextureRegion[12];
				for (int i = 0; i < 12; i++){
					ability2Region[i] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/burnAbility/fire" + i + ".png", Texture.class));
				}
				cooldown2 = 9000;
			}; break;
			case 3: {
				ability2Region = new TextureRegion[10];
				for (int i = 0; i < 10; i++){
					ability2Region[i] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/drainAbility/drain" + i + ".png", Texture.class));
				}
				cooldown2 = 10000;
			}; break;
			case 4: {
				ability2Region = new TextureRegion[9];
				for (int i = 0; i < 9; i++){
					ability2Region[i] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/blowAbility/fan" + i + ".png", Texture.class));
				}
				cooldown2 = 10000;
			}; break;
			case 5: {

				cooldown2 = 0;
			}; break;
			case 6: {
				ability2Region = new TextureRegion[7];
				ability2Region[0] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/discharged.png", Texture.class));
				ability2Region[1] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/energy.png", Texture.class));
				ability2Region[2] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/energyBar.png", Texture.class));
				ability2Region[3] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/energyBarred.png", Texture.class));
				ability2Region[4] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/indic0.png", Texture.class));
				ability2Region[5] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/indic1.png", Texture.class));
				ability2Region[6] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/indic2.png", Texture.class));
				cooldown2 = 0;
			}; break;
			default: break;
			}

			switch (trashCan3Properties.getTrashCan()){
			case 1: {
				ability3Region = new TextureRegion[1];
				ability3Region[0] = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/averageOpened.png", Texture.class));
				cooldown3 = 0;
			}; break;
			case 2: {
				ability3Region = new TextureRegion[12];
				for (int i = 0; i < 12; i++){
					ability3Region[i] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/burnAbility/fire" + i + ".png", Texture.class));
				}
				cooldown3 = 9000;
			}; break;
			case 3: {
				ability3Region = new TextureRegion[10];
				for (int i = 0; i < 10; i++){
					ability3Region[i] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/drainAbility/drain" + i + ".png", Texture.class));
				}
				cooldown3 = 10000;
			}; break;
			case 4: {
				ability3Region = new TextureRegion[9];
				for (int i = 0; i < 9; i++){
					ability3Region[i] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/blowAbility/fan" + i + ".png", Texture.class));
				}
				cooldown3 = 10000;
			}; break;
			case 5: {
				cooldown3 = 0;
			}; break;
			case 6: {
				ability3Region = new TextureRegion[7];
				ability3Region[0] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/discharged.png", Texture.class));
				ability3Region[1] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/energy.png", Texture.class));
				ability3Region[2] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/energyBar.png", Texture.class));
				ability3Region[3] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/energyBarred.png", Texture.class));
				ability3Region[4] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/indic0.png", Texture.class));
				ability3Region[5] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/indic1.png", Texture.class));
				ability3Region[6] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/indic2.png", Texture.class));
				cooldown3 = 0;
			}; break;
			default: break;
			}

			switch (trashCan4Properties.getTrashCan()){
			case 1: {
				ability4Region = new TextureRegion[1];
				ability4Region[0] = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Average Can/averageOpened.png", Texture.class));
				cooldown4 = 0;
			}; break;
			case 2: {
				ability4Region = new TextureRegion[12];
				for (int i = 0; i < 12; i++){
					ability4Region[i] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/burnAbility/fire" + i + ".png", Texture.class));
				}
				cooldown4 = 9000;
			}; break;
			case 3: {
				ability4Region = new TextureRegion[10];
				for (int i = 0; i < 10; i++){
					ability4Region[i] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/drainAbility/drain" + i + ".png", Texture.class));
				}
				cooldown4 = 10000;
			}; break;
			case 4: {
				ability4Region = new TextureRegion[9];
				for (int i = 0; i < 9; i++){
					ability4Region[i] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/blowAbility/fan" + i + ".png", Texture.class));
				}
				cooldown4 = 10000;
			}; break;
			case 5: {
				cooldown4 = 0;
			}; break;
			case 6: {
				ability4Region = new TextureRegion[7];
				ability4Region[0] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/discharged.png", Texture.class));
				ability4Region[1] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/energy.png", Texture.class));
				ability4Region[2] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/energyBar.png", Texture.class));
				ability4Region[3] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/energyBarred.png", Texture.class));
				ability4Region[4] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/indic0.png", Texture.class));
				ability4Region[5] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/indic1.png", Texture.class));
				ability4Region[6] = new TextureRegion(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/indic2.png", Texture.class));
				cooldown4 = 0;
			};
			default: break;
			}

			if (trashCan1Properties.getTrashCan() == 5 ||
					trashCan2Properties.getTrashCan() == 5 ||
					trashCan3Properties.getTrashCan() == 5 ||
					trashCan4Properties.getTrashCan() == 5){
				dullCanBAll = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/all.png", Texture.class));
				dullCanBAllClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Biodegradable/allClicked.png", Texture.class));
				dullCanRAll = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/all.png", Texture.class));
				dullCanRAllClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Recyclable/allClicked.png", Texture.class));
				dullCanNRAll = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/all.png", Texture.class));
				dullCanNRAllClicked = new TextureRegion(manager.get("gameScreenAssets/trashCanSelectionAssets/The Dull Can/Non-Recyclable/allClicked.png", Texture.class));
			}

			//			INSTANTIATE TRASHCAN CAPACITIES
			switch (trashCan1Properties.getTrashCan()){
			case 1: trashCan1Capacity = junkWorldEngines.getAverageCanCapacity(); break;
			case 2: trashCan1Capacity = junkWorldEngines.getScorchingCanCapacity(); break;
			case 3: trashCan1Capacity = junkWorldEngines.getVacuumCanCapacity(); break;
			case 4: trashCan1Capacity = junkWorldEngines.getTrashBlowerCapacity(); break;
			case 5: trashCan1Capacity = junkWorldEngines.getDullCanCapacity(); break;
			case 6: trashCan1Capacity = junkWorldEngines.getSwiftCanCapacity(); break;
			default: trashCan1Capacity = 0; break;
			}
			switch (trashCan2Properties.getTrashCan()){
			case 1: trashCan2Capacity = junkWorldEngines.getAverageCanCapacity(); break;
			case 2: trashCan2Capacity = junkWorldEngines.getScorchingCanCapacity(); break;
			case 3: trashCan2Capacity = junkWorldEngines.getVacuumCanCapacity(); break;
			case 4: trashCan2Capacity = junkWorldEngines.getTrashBlowerCapacity(); break;
			case 5: trashCan2Capacity = junkWorldEngines.getDullCanCapacity(); break;
			case 6: trashCan2Capacity = junkWorldEngines.getSwiftCanCapacity(); break;
			default: trashCan2Capacity = 0; break;
			}
			switch (trashCan3Properties.getTrashCan()){
			case 1: trashCan3Capacity = junkWorldEngines.getAverageCanCapacity(); break;
			case 2: trashCan3Capacity = junkWorldEngines.getScorchingCanCapacity(); break;
			case 3: trashCan3Capacity = junkWorldEngines.getVacuumCanCapacity(); break;
			case 4: trashCan3Capacity = junkWorldEngines.getTrashBlowerCapacity(); break;
			case 5: trashCan3Capacity = junkWorldEngines.getDullCanCapacity(); break;
			case 6: trashCan3Capacity = junkWorldEngines.getSwiftCanCapacity(); break;
			default: trashCan3Capacity = 0; break;
			}
			switch (trashCan4Properties.getTrashCan()){
			case 1: trashCan4Capacity = junkWorldEngines.getAverageCanCapacity(); break;
			case 2: trashCan4Capacity = junkWorldEngines.getScorchingCanCapacity(); break;
			case 3: trashCan4Capacity = junkWorldEngines.getVacuumCanCapacity(); break;
			case 4: trashCan4Capacity = junkWorldEngines.getTrashBlowerCapacity(); break;
			case 5: trashCan4Capacity = junkWorldEngines.getDullCanCapacity(); break;
			case 6: trashCan4Capacity = junkWorldEngines.getSwiftCanCapacity(); break;
			default: trashCan4Capacity = 0; break;
			}
			capacitors1Layer = new Array<Rectangle>();
			capacitors2Layer = new Array<Rectangle>();
			capacitors3Layer = new Array<Rectangle>();
			capacitors4Layer = new Array<Rectangle>();

			for (int i = 0; i < 15; i++){
				dumpsterRegions.add(new TextureRegion(manager.get("gameScreenAssets/dumpster/dumpster" + i + ".png", Texture.class)));
			}

			mainMenuRegion = new TextureRegion(manager.get("gameScreenAssets/inGameMenuAssets/mainMenu.png", Texture.class));
			showOpponentRegion = new TextureRegion(manager.get("gameScreenAssets/inGameMenuAssets/showOpponent.png", Texture.class));

			trashbagsRegion = new Array<TextureRegion>();
			trashbagsRegion.add(new TextureRegion(manager.get("gameScreenAssets/trashBagColors/redTrashBag.png", Texture.class)));
			trashbagsRegion.add(new TextureRegion(manager.get("gameScreenAssets/trashBagColors/orangeTrashBag.png", Texture.class)));
			trashbagsRegion.add(new TextureRegion(manager.get("gameScreenAssets/trashBagColors/yellowTrashBag.png", Texture.class)));
			trashbagsRegion.add(new TextureRegion(manager.get("gameScreenAssets/trashBagColors/greenTrashBag.png", Texture.class)));
			trashbagsRegion.add(new TextureRegion(manager.get("gameScreenAssets/trashBagColors/blueTrashBag.png", Texture.class)));
			trashbagsRegion.add(new TextureRegion(manager.get("gameScreenAssets/trashBagColors/purpleTrashBag.png", Texture.class)));
			mainMenuToggledRegion = new TextureRegion(manager.get("backgrounds/mainMenu.png", Texture.class));
			mainMenuQuitToggledRegion = new TextureRegion(manager.get("backgrounds/mainMenu.png", Texture.class));
			resumeGameRegion = new TextureRegion(manager.get("buttons/resumeButton.png", Texture.class));
			quitGameRegion = new TextureRegion(manager.get("buttons/quitButton.png", Texture.class));
			quitYesRegion = new TextureRegion(manager.get("buttons/yesButton.png", Texture.class));
			quitNoRegion = new TextureRegion(manager.get("buttons/noButton.png", Texture.class));
			itemArrowLeftRegion = new TextureRegion(manager.get("gameScreenAssets/inGameMenuAssets/itemArrowLeft.png", Texture.class));
			itemArrowRightRegion = new TextureRegion(manager.get("gameScreenAssets/inGameMenuAssets/itemArrowRight.png", Texture.class));
			itemOutlineRegion = new TextureRegion(manager.get("gameScreenAssets/inGameMenuAssets/itemOutline.png", Texture.class));
			quitNotifierRegion = new TextureRegion(manager.get("screenLabels/quitNotifier.png", Texture.class));

			itemsRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/tntBomb.png", Texture.class)));
			itemsRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/glue.png", Texture.class)));
			itemsRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/iceflake.png", Texture.class)));
			itemsRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/switchMachine.png", Texture.class)));
			itemsRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/augmentedBurst.png", Texture.class)));
			itemsRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/sticker.png", Texture.class)));

			itemsCDRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/tntBombCD.png", Texture.class)));
			itemsCDRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/glueCD.png", Texture.class)));
			itemsCDRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/iceflakeCD.png", Texture.class)));
			itemsCDRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/switchMachineCD.png", Texture.class)));
			itemsCDRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/augmentedBurstCD.png", Texture.class)));
			itemsCDRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/stickerCD.png", Texture.class)));

			itemsClickedRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/tntBombClicked.png", Texture.class)));
			itemsClickedRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/glueClicked.png", Texture.class)));
			itemsClickedRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/iceflakeClicked.png", Texture.class)));
			itemsClickedRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/switchMachineClicked.png", Texture.class)));
			itemsClickedRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/augmentedBurstClicked.png", Texture.class)));
			itemsClickedRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/stickerClicked.png", Texture.class)));

			itemsUnclickableRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/tntBombUnclickable.png", Texture.class)));
			itemsUnclickableRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/glueUnclickable.png", Texture.class)));
			itemsUnclickableRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/iceflakeUnclickable.png", Texture.class)));
			itemsUnclickableRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/switchMachineUnclickable.png", Texture.class)));
			itemsUnclickableRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/augmentedBurstUnclickable.png", Texture.class)));
			itemsUnclickableRegion.add(new TextureRegion(manager.get("gameScreenAssets/itemAssets/itemTextures/stickerUnclickable.png", Texture.class)));

			currentBombRegion = new Array<Integer>();
			currentBombRegion.add(0);
			currentBombRegion.add(0);
			currentBombRegion.add(0);
			currentBombRegion.add(0);
			currentBombRegion.add(0);
			currentBombRegion.add(0);

			delayBombPics = new Array<Long>();
			delayBombPics.add((long) 0);
			delayBombPics.add((long) 0);
			delayBombPics.add((long) 0);
			delayBombPics.add((long) 0);
			delayBombPics.add((long) 0);
			delayBombPics.add((long) 0);

			currentIceflakeRegion = 0;
			delayIceflakePics = 0;

			for (int i = 0; i < 11; i++){
				bombRegions.add(new TextureRegion(manager.get("gameAnimations/In-Game Items/Bomb/" + i + ".png", Texture.class)));
			}

			for (int i = 0; i < 6; i++){
				iceflakeRegions.add(new TextureRegion(manager.get("gameAnimations/In-Game Items/Iceflake/" + i + ".png", Texture.class)));
			}

			trashCan1Indicator = new Rectangle();
			trashCan2Indicator = new Rectangle();
			trashCan3Indicator = new Rectangle();
			trashCan4Indicator = new Rectangle();

			//			CREATE TRASH LAYERS here!!!    VVV      TODO 
		}
	}

	private void createTextures2() {
		if (true){
			Rectangle acornRed = new Rectangle(0, 0, 64, 32);
			Rectangle appleRed = new Rectangle(0, 0, 64, 32);
			Rectangle bananaPeelRed = new Rectangle(0, 0, 64, 32);
			Rectangle branchRed = new Rectangle(0, 0, 64, 32);
			Rectangle deadMouseRed = new Rectangle(0, 0, 64, 32);
			Rectangle eggShellRed = new Rectangle(0, 0, 64, 32);
			Rectangle featherRed = new Rectangle(0, 0, 64, 32);
			Rectangle fishBoneRed = new Rectangle(0, 0, 64, 32);
			Rectangle flowerRed = new Rectangle(0, 0, 64, 32);
			Rectangle grassRed = new Rectangle(0, 0, 64, 32);
			Rectangle hairRed = new Rectangle(0, 0, 64, 32);
			Rectangle hayRed = new Rectangle(0, 0, 64, 32);
			Rectangle leavesRed = new Rectangle(0, 0, 64, 32);
			Rectangle manureRed = new Rectangle(0, 0, 64, 32);
			Rectangle rootsRed = new Rectangle(0, 0, 64, 32);

			Rectangle acornOrange = new Rectangle(0, 0, 64, 32);
			Rectangle appleOrange = new Rectangle(0, 0, 64, 32);
			Rectangle bananaPeelOrange = new Rectangle(0, 0, 64, 32);
			Rectangle branchOrange = new Rectangle(0, 0, 64, 32);
			Rectangle deadMouseOrange = new Rectangle(0, 0, 64, 32);
			Rectangle eggShellOrange = new Rectangle(0, 0, 64, 32);
			Rectangle featherOrange = new Rectangle(0, 0, 64, 32);
			Rectangle fishBoneOrange = new Rectangle(0, 0, 64, 32);
			Rectangle flowerOrange = new Rectangle(0, 0, 64, 32);
			Rectangle grassOrange = new Rectangle(0, 0, 64, 32);
			Rectangle hairOrange = new Rectangle(0, 0, 64, 32);
			Rectangle hayOrange = new Rectangle(0, 0, 64, 32);
			Rectangle leavesOrange = new Rectangle(0, 0, 64, 32);
			Rectangle manureOrange = new Rectangle(0, 0, 64, 32);
			Rectangle rootsOrange = new Rectangle(0, 0, 64, 32);

			Rectangle acornYellow = new Rectangle(0, 0, 64, 32);
			Rectangle appleYellow = new Rectangle(0, 0, 64, 32);
			Rectangle bananaPeelYellow = new Rectangle(0, 0, 64, 32);
			Rectangle branchYellow = new Rectangle(0, 0, 64, 32);
			Rectangle deadMouseYellow = new Rectangle(0, 0, 64, 32);
			Rectangle eggShellYellow = new Rectangle(0, 0, 64, 32);
			Rectangle featherYellow = new Rectangle(0, 0, 64, 32);
			Rectangle fishBoneYellow = new Rectangle(0, 0, 64, 32);
			Rectangle flowerYellow = new Rectangle(0, 0, 64, 32);
			Rectangle grassYellow = new Rectangle(0, 0, 64, 32);
			Rectangle hairYellow = new Rectangle(0, 0, 64, 32);
			Rectangle hayYellow = new Rectangle(0, 0, 64, 32);
			Rectangle leavesYellow = new Rectangle(0, 0, 64, 32);
			Rectangle manureYellow = new Rectangle(0, 0, 64, 32);
			Rectangle rootsYellow = new Rectangle(0, 0, 64, 32);

			Rectangle acornGreen = new Rectangle(0, 0, 64, 32);
			Rectangle appleGreen = new Rectangle(0, 0, 64, 32);
			Rectangle bananaPeelGreen = new Rectangle(0, 0, 64, 32);
			Rectangle branchGreen = new Rectangle(0, 0, 64, 32);
			Rectangle deadMouseGreen = new Rectangle(0, 0, 64, 32);
			Rectangle eggShellGreen = new Rectangle(0, 0, 64, 32);
			Rectangle featherGreen = new Rectangle(0, 0, 64, 32);
			Rectangle fishBoneGreen = new Rectangle(0, 0, 64, 32);
			Rectangle flowerGreen = new Rectangle(0, 0, 64, 32);
			Rectangle grassGreen = new Rectangle(0, 0, 64, 32);
			Rectangle hairGreen = new Rectangle(0, 0, 64, 32);
			Rectangle hayGreen = new Rectangle(0, 0, 64, 32);
			Rectangle leavesGreen = new Rectangle(0, 0, 64, 32);
			Rectangle manureGreen = new Rectangle(0, 0, 64, 32);
			Rectangle rootsGreen = new Rectangle(0, 0, 64, 32);

			Rectangle acornBlue = new Rectangle(0, 0, 64, 32);
			Rectangle appleBlue = new Rectangle(0, 0, 64, 32);
			Rectangle bananaPeelBlue = new Rectangle(0, 0, 64, 32);
			Rectangle branchBlue = new Rectangle(0, 0, 64, 32);
			Rectangle deadMouseBlue = new Rectangle(0, 0, 64, 32);
			Rectangle eggShellBlue = new Rectangle(0, 0, 64, 32);
			Rectangle featherBlue = new Rectangle(0, 0, 64, 32);
			Rectangle fishBoneBlue = new Rectangle(0, 0, 64, 32);
			Rectangle flowerBlue = new Rectangle(0, 0, 64, 32);
			Rectangle grassBlue = new Rectangle(0, 0, 64, 32);
			Rectangle hairBlue = new Rectangle(0, 0, 64, 32);
			Rectangle hayBlue = new Rectangle(0, 0, 64, 32);
			Rectangle leavesBlue = new Rectangle(0, 0, 64, 32);
			Rectangle manureBlue = new Rectangle(0, 0, 64, 32);
			Rectangle rootsBlue = new Rectangle(0, 0, 64, 32);

			Rectangle acornPurple = new Rectangle(0, 0, 64, 32);
			Rectangle applePurple = new Rectangle(0, 0, 64, 32);
			Rectangle bananaPeelPurple = new Rectangle(0, 0, 64, 32);
			Rectangle branchPurple = new Rectangle(0, 0, 64, 32);
			Rectangle deadMousePurple = new Rectangle(0, 0, 64, 32);
			Rectangle eggShellPurple = new Rectangle(0, 0, 64, 32);
			Rectangle featherPurple = new Rectangle(0, 0, 64, 32);
			Rectangle fishBonePurple = new Rectangle(0, 0, 64, 32);
			Rectangle flowerPurple = new Rectangle(0, 0, 64, 32);
			Rectangle grassPurple = new Rectangle(0, 0, 64, 32);
			Rectangle hairPurple = new Rectangle(0, 0, 64, 32);
			Rectangle hayPurple = new Rectangle(0, 0, 64, 32);
			Rectangle leavesPurple = new Rectangle(0, 0, 64, 32);
			Rectangle manurePurple = new Rectangle(0, 0, 64, 32);
			Rectangle rootsPurple = new Rectangle(0, 0, 64, 32);

			Rectangle bottleRed = new Rectangle(0, 0, 64, 32);
			Rectangle canRed = new Rectangle(0, 0, 64, 32);
			Rectangle cardboardRed = new Rectangle(0, 0, 64, 32);
			Rectangle cerealBoxRed = new Rectangle(0, 0, 64, 32);
			Rectangle dirtyShirtRed = new Rectangle(0, 0, 64, 32);
			Rectangle envelopeRed = new Rectangle(0, 0, 64, 32);
			Rectangle funnelRed = new Rectangle(0, 0, 64, 32);
			Rectangle hangerRed = new Rectangle(0, 0, 64, 32);
			Rectangle newspaperRed = new Rectangle(0, 0, 64, 32);
			Rectangle paperRed = new Rectangle(0, 0, 64, 32);
			Rectangle pillBottleRed = new Rectangle(0, 0, 64, 32);
			Rectangle plasticBagRed = new Rectangle(0, 0, 64, 32);
			Rectangle tyreRed = new Rectangle(0, 0, 64, 32);
			Rectangle vaseRed = new Rectangle(0, 0, 64, 32);
			Rectangle waffleIronRed = new Rectangle(0, 0, 64, 32);

			Rectangle bottleOrange = new Rectangle(0, 0, 64, 32);
			Rectangle canOrange = new Rectangle(0, 0, 64, 32);
			Rectangle cardboardOrange = new Rectangle(0, 0, 64, 32);
			Rectangle cerealBoxOrange = new Rectangle(0, 0, 64, 32);
			Rectangle dirtyShirtOrange = new Rectangle(0, 0, 64, 32);
			Rectangle envelopeOrange = new Rectangle(0, 0, 64, 32);
			Rectangle funnelOrange = new Rectangle(0, 0, 64, 32);
			Rectangle hangerOrange = new Rectangle(0, 0, 64, 32);
			Rectangle newspaperOrange = new Rectangle(0, 0, 64, 32);
			Rectangle paperOrange = new Rectangle(0, 0, 64, 32);
			Rectangle pillBottleOrange = new Rectangle(0, 0, 64, 32);
			Rectangle plasticBagOrange = new Rectangle(0, 0, 64, 32);
			Rectangle tyreOrange = new Rectangle(0, 0, 64, 32);
			Rectangle vaseOrange = new Rectangle(0, 0, 64, 32);
			Rectangle waffleIronOrange = new Rectangle(0, 0, 64, 32);

			Rectangle bottleYellow = new Rectangle(0, 0, 64, 32);
			Rectangle canYellow = new Rectangle(0, 0, 64, 32);
			Rectangle cardboardYellow = new Rectangle(0, 0, 64, 32);
			Rectangle cerealBoxYellow = new Rectangle(0, 0, 64, 32);
			Rectangle dirtyShirtYellow = new Rectangle(0, 0, 64, 32);
			Rectangle envelopeYellow = new Rectangle(0, 0, 64, 32);
			Rectangle funnelYellow = new Rectangle(0, 0, 64, 32);
			Rectangle hangerYellow = new Rectangle(0, 0, 64, 32);
			Rectangle newspaperYellow = new Rectangle(0, 0, 64, 32);
			Rectangle paperYellow = new Rectangle(0, 0, 64, 32);
			Rectangle pillBottleYellow = new Rectangle(0, 0, 64, 32);
			Rectangle plasticBagYellow = new Rectangle(0, 0, 64, 32);
			Rectangle tyreYellow = new Rectangle(0, 0, 64, 32);
			Rectangle vaseYellow = new Rectangle(0, 0, 64, 32);
			Rectangle waffleIronYellow = new Rectangle(0, 0, 64, 32);

			Rectangle bottleGreen = new Rectangle(0, 0, 64, 32);
			Rectangle canGreen = new Rectangle(0, 0, 64, 32);
			Rectangle cardboardGreen = new Rectangle(0, 0, 64, 32);
			Rectangle cerealBoxGreen = new Rectangle(0, 0, 64, 32);
			Rectangle dirtyShirtGreen = new Rectangle(0, 0, 64, 32);
			Rectangle envelopeGreen = new Rectangle(0, 0, 64, 32);
			Rectangle funnelGreen = new Rectangle(0, 0, 64, 32);
			Rectangle hangerGreen = new Rectangle(0, 0, 64, 32);
			Rectangle newspaperGreen = new Rectangle(0, 0, 64, 32);
			Rectangle paperGreen = new Rectangle(0, 0, 64, 32);
			Rectangle pillBottleGreen = new Rectangle(0, 0, 64, 32);
			Rectangle plasticBagGreen = new Rectangle(0, 0, 64, 32);
			Rectangle tyreGreen = new Rectangle(0, 0, 64, 32);
			Rectangle vaseGreen = new Rectangle(0, 0, 64, 32);
			Rectangle waffleIronGreen = new Rectangle(0, 0, 64, 32);

			Rectangle bottleBlue = new Rectangle(0, 0, 64, 32);
			Rectangle canBlue = new Rectangle(0, 0, 64, 32);
			Rectangle cardboardBlue = new Rectangle(0, 0, 64, 32);
			Rectangle cerealBoxBlue = new Rectangle(0, 0, 64, 32);
			Rectangle dirtyShirtBlue = new Rectangle(0, 0, 64, 32);
			Rectangle envelopeBlue = new Rectangle(0, 0, 64, 32);
			Rectangle funnelBlue = new Rectangle(0, 0, 64, 32);
			Rectangle hangerBlue = new Rectangle(0, 0, 64, 32);
			Rectangle newspaperBlue = new Rectangle(0, 0, 64, 32);
			Rectangle paperBlue = new Rectangle(0, 0, 64, 32);
			Rectangle pillBottleBlue = new Rectangle(0, 0, 64, 32);
			Rectangle plasticBagBlue = new Rectangle(0, 0, 64, 32);
			Rectangle tyreBlue = new Rectangle(0, 0, 64, 32);
			Rectangle vaseBlue = new Rectangle(0, 0, 64, 32);
			Rectangle waffleIronBlue = new Rectangle(0, 0, 64, 32);

			Rectangle bottlePurple = new Rectangle(0, 0, 64, 32);
			Rectangle canPurple = new Rectangle(0, 0, 64, 32);
			Rectangle cardboardPurple = new Rectangle(0, 0, 64, 32);
			Rectangle cerealBoxPurple = new Rectangle(0, 0, 64, 32);
			Rectangle dirtyShirtPurple = new Rectangle(0, 0, 64, 32);
			Rectangle envelopePurple = new Rectangle(0, 0, 64, 32);
			Rectangle funnelPurple = new Rectangle(0, 0, 64, 32);
			Rectangle hangerPurple = new Rectangle(0, 0, 64, 32);
			Rectangle newspaperPurple = new Rectangle(0, 0, 64, 32);
			Rectangle paperPurple = new Rectangle(0, 0, 64, 32);
			Rectangle pillBottlePurple = new Rectangle(0, 0, 64, 32);
			Rectangle plasticBagPurple = new Rectangle(0, 0, 64, 32);
			Rectangle tyrePurple = new Rectangle(0, 0, 64, 32);
			Rectangle vasePurple = new Rectangle(0, 0, 64, 32);
			Rectangle waffleIronPurple = new Rectangle(0, 0, 64, 32);

			Rectangle aerosolCanRed = new Rectangle(0, 0, 64, 32);
			Rectangle brokenBulbRed = new Rectangle(0, 0, 64, 32);
			Rectangle brokenGlassRed = new Rectangle(0, 0, 64, 32);
			Rectangle chewingGumRed = new Rectangle(0, 0, 64, 32);
			Rectangle cigaretteRed = new Rectangle(0, 0, 64, 32);
			Rectangle deadBatteryRed = new Rectangle(0, 0, 64, 32);
			Rectangle dirtyDiaperRed = new Rectangle(0, 0, 64, 32);
			Rectangle insecticideSprayRed = new Rectangle(0, 0, 64, 32);
			Rectangle leftoverCakeRed = new Rectangle(0, 0, 64, 32);
			Rectangle leftoverChickenRed = new Rectangle(0, 0, 64, 32);
			Rectangle nailRed = new Rectangle(0, 0, 64, 32);
			Rectangle paintCanRed = new Rectangle(0, 0, 64, 32);
			Rectangle syringeRed = new Rectangle(0, 0, 64, 32);
			Rectangle tornPaperRed = new Rectangle(0, 0, 64, 32);
			Rectangle usedMotorOilRed = new Rectangle(0, 0, 64, 32);

			Rectangle aerosolCanOrange = new Rectangle(0, 0, 64, 32);
			Rectangle brokenBulbOrange = new Rectangle(0, 0, 64, 32);
			Rectangle brokenGlassOrange = new Rectangle(0, 0, 64, 32);
			Rectangle chewingGumOrange = new Rectangle(0, 0, 64, 32);
			Rectangle cigaretteOrange = new Rectangle(0, 0, 64, 32);
			Rectangle deadBatteryOrange = new Rectangle(0, 0, 64, 32);
			Rectangle dirtyDiaperOrange = new Rectangle(0, 0, 64, 32);
			Rectangle insecticideSprayOrange = new Rectangle(0, 0, 64, 32);
			Rectangle leftoverCakeOrange = new Rectangle(0, 0, 64, 32);
			Rectangle leftoverChickenOrange = new Rectangle(0, 0, 64, 32);
			Rectangle nailOrange = new Rectangle(0, 0, 64, 32);
			Rectangle paintCanOrange = new Rectangle(0, 0, 64, 32);
			Rectangle syringeOrange = new Rectangle(0, 0, 64, 32);
			Rectangle tornPaperOrange = new Rectangle(0, 0, 64, 32);
			Rectangle usedMotorOilOrange = new Rectangle(0, 0, 64, 32);

			Rectangle aerosolCanYellow = new Rectangle(0, 0, 64, 32);
			Rectangle brokenBulbYellow = new Rectangle(0, 0, 64, 32);
			Rectangle brokenGlassYellow = new Rectangle(0, 0, 64, 32);
			Rectangle chewingGumYellow = new Rectangle(0, 0, 64, 32);
			Rectangle cigaretteYellow = new Rectangle(0, 0, 64, 32);
			Rectangle deadBatteryYellow = new Rectangle(0, 0, 64, 32);
			Rectangle dirtyDiaperYellow = new Rectangle(0, 0, 64, 32);
			Rectangle insecticideSprayYellow = new Rectangle(0, 0, 64, 32);
			Rectangle leftoverCakeYellow = new Rectangle(0, 0, 64, 32);
			Rectangle leftoverChickenYellow = new Rectangle(0, 0, 64, 32);
			Rectangle nailYellow = new Rectangle(0, 0, 64, 32);
			Rectangle paintCanYellow = new Rectangle(0, 0, 64, 32);
			Rectangle syringeYellow = new Rectangle(0, 0, 64, 32);
			Rectangle tornPaperYellow = new Rectangle(0, 0, 64, 32);
			Rectangle usedMotorOilYellow = new Rectangle(0, 0, 64, 32);

			Rectangle aerosolCanGreen = new Rectangle(0, 0, 64, 32);
			Rectangle brokenBulbGreen = new Rectangle(0, 0, 64, 32);
			Rectangle brokenGlassGreen = new Rectangle(0, 0, 64, 32);
			Rectangle chewingGumGreen = new Rectangle(0, 0, 64, 32);
			Rectangle cigaretteGreen = new Rectangle(0, 0, 64, 32);
			Rectangle deadBatteryGreen = new Rectangle(0, 0, 64, 32);
			Rectangle dirtyDiaperGreen = new Rectangle(0, 0, 64, 32);
			Rectangle insecticideSprayGreen = new Rectangle(0, 0, 64, 32);
			Rectangle leftoverCakeGreen = new Rectangle(0, 0, 64, 32);
			Rectangle leftoverChickenGreen = new Rectangle(0, 0, 64, 32);
			Rectangle nailGreen = new Rectangle(0, 0, 64, 32);
			Rectangle paintCanGreen = new Rectangle(0, 0, 64, 32);
			Rectangle syringeGreen = new Rectangle(0, 0, 64, 32);
			Rectangle tornPaperGreen = new Rectangle(0, 0, 64, 32);
			Rectangle usedMotorOilGreen = new Rectangle(0, 0, 64, 32);

			Rectangle aerosolCanBlue = new Rectangle(0, 0, 64, 32);
			Rectangle brokenBulbBlue = new Rectangle(0, 0, 64, 32);
			Rectangle brokenGlassBlue = new Rectangle(0, 0, 64, 32);
			Rectangle chewingGumBlue = new Rectangle(0, 0, 64, 32);
			Rectangle cigaretteBlue = new Rectangle(0, 0, 64, 32);
			Rectangle deadBatteryBlue = new Rectangle(0, 0, 64, 32);
			Rectangle dirtyDiaperBlue = new Rectangle(0, 0, 64, 32);
			Rectangle insecticideSprayBlue = new Rectangle(0, 0, 64, 32);
			Rectangle leftoverCakeBlue = new Rectangle(0, 0, 64, 32);
			Rectangle leftoverChickenBlue = new Rectangle(0, 0, 64, 32);
			Rectangle nailBlue = new Rectangle(0, 0, 64, 32);
			Rectangle paintCanBlue = new Rectangle(0, 0, 64, 32);
			Rectangle syringeBlue = new Rectangle(0, 0, 64, 32);
			Rectangle tornPaperBlue = new Rectangle(0, 0, 64, 32);
			Rectangle usedMotorOilBlue = new Rectangle(0, 0, 64, 32);

			Rectangle aerosolCanPurple = new Rectangle(0, 0, 64, 32);
			Rectangle brokenBulbPurple = new Rectangle(0, 0, 64, 32);
			Rectangle brokenGlassPurple = new Rectangle(0, 0, 64, 32);
			Rectangle chewingGumPurple = new Rectangle(0, 0, 64, 32);
			Rectangle cigarettePurple = new Rectangle(0, 0, 64, 32);
			Rectangle deadBatteryPurple = new Rectangle(0, 0, 64, 32);
			Rectangle dirtyDiaperPurple = new Rectangle(0, 0, 64, 32);
			Rectangle insecticideSprayPurple = new Rectangle(0, 0, 64, 32);
			Rectangle leftoverCakePurple = new Rectangle(0, 0, 64, 32);
			Rectangle leftoverChickenPurple = new Rectangle(0, 0, 64, 32);
			Rectangle nailPurple = new Rectangle(0, 0, 64, 32);
			Rectangle paintCanPurple = new Rectangle(0, 0, 64, 32);
			Rectangle syringePurple = new Rectangle(0, 0, 64, 32);
			Rectangle tornPaperPurple = new Rectangle(0, 0, 64, 32);
			Rectangle usedMotorOilPurple = new Rectangle(0, 0, 64, 32);

			acornLayer = new Array<Rectangle>();
			appleLayer = new Array<Rectangle>();
			bananaPeelLayer = new Array<Rectangle>();
			branchLayer = new Array<Rectangle>();
			deadMouseLayer = new Array<Rectangle>();
			eggShellLayer = new Array<Rectangle>();
			featherLayer = new Array<Rectangle>();
			fishBoneLayer = new Array<Rectangle>();
			flowerLayer = new Array<Rectangle>();
			grassLayer = new Array<Rectangle>();
			hairLayer = new Array<Rectangle>();
			hayLayer = new Array<Rectangle>();
			leavesLayer = new Array<Rectangle>();
			manureLayer = new Array<Rectangle>();
			rootsLayer = new Array<Rectangle>();

			bottleLayer = new Array<Rectangle>();
			canLayer = new Array<Rectangle>();
			cardboardLayer = new Array<Rectangle>();
			cerealBoxLayer = new Array<Rectangle>();
			dirtyShirtLayer = new Array<Rectangle>();
			envelopeLayer = new Array<Rectangle>();
			funnelLayer = new Array<Rectangle>();
			hangerLayer = new Array<Rectangle>();
			newspaperLayer = new Array<Rectangle>();
			paperLayer = new Array<Rectangle>();
			pillBottleLayer = new Array<Rectangle>();
			plasticBagLayer = new Array<Rectangle>();
			tyreLayer = new Array<Rectangle>();
			vaseLayer = new Array<Rectangle>();
			waffleIronLayer = new Array<Rectangle>();

			aerosolCanLayer = new Array<Rectangle>();
			brokenBulbLayer = new Array<Rectangle>();
			brokenGlassLayer = new Array<Rectangle>();
			chewingGumLayer = new Array<Rectangle>();
			cigaretteLayer = new Array<Rectangle>();
			deadBatteryLayer = new Array<Rectangle>();
			dirtyDiaperLayer = new Array<Rectangle>();
			insecticideSprayLayer = new Array<Rectangle>();
			leftoverCakeLayer = new Array<Rectangle>();
			leftoverChickenLayer = new Array<Rectangle>();
			nailLayer = new Array<Rectangle>();
			paintCanLayer = new Array<Rectangle>();
			syringeLayer = new Array<Rectangle>();
			tornPaperLayer = new Array<Rectangle>();
			usedMotorOilLayer = new Array<Rectangle>();

			if (junkWorldEngines.isBiodegradable()){
				if (junkWorldEngines.isAcorn()){
					if (junkWorldEngines.isRed()){
						acornLayer.add(acornRed);
					}
					if (junkWorldEngines.isOrange()){
						acornLayer.add(acornOrange);
					}
					if (junkWorldEngines.isYellow()){
						acornLayer.add(acornYellow);
					}
					if (junkWorldEngines.isGreen()){
						acornLayer.add(acornGreen);
					}
					if (junkWorldEngines.isBlue()){
						acornLayer.add(acornBlue);
					}
					if (junkWorldEngines.isPurple()){
						acornLayer.add(acornPurple);
					}
				}
				if (junkWorldEngines.isApple()){
					if (junkWorldEngines.isRed()){
						appleLayer.add(appleRed);
					}
					if (junkWorldEngines.isOrange()){
						appleLayer.add(appleOrange);
					}
					if (junkWorldEngines.isYellow()){
						appleLayer.add(appleYellow);
					}
					if (junkWorldEngines.isGreen()){
						appleLayer.add(appleGreen);
					}
					if (junkWorldEngines.isBlue()){
						appleLayer.add(appleBlue);
					}
					if (junkWorldEngines.isPurple()){
						appleLayer.add(applePurple);
					}
				}
				if (junkWorldEngines.isBananaPeel()){
					if (junkWorldEngines.isRed()){
						bananaPeelLayer.add(bananaPeelRed);
					}
					if (junkWorldEngines.isOrange()){
						bananaPeelLayer.add(bananaPeelOrange);
					}
					if (junkWorldEngines.isYellow()){
						bananaPeelLayer.add(bananaPeelYellow);
					}
					if (junkWorldEngines.isGreen()){
						bananaPeelLayer.add(bananaPeelGreen);
					}
					if (junkWorldEngines.isBlue()){
						bananaPeelLayer.add(bananaPeelBlue);
					}
					if (junkWorldEngines.isPurple()){
						bananaPeelLayer.add(bananaPeelPurple);
					}
				}
				if (junkWorldEngines.isBranch()){
					if (junkWorldEngines.isRed()){
						branchLayer.add(branchRed);
					}
					if (junkWorldEngines.isOrange()){
						branchLayer.add(branchOrange);
					}
					if (junkWorldEngines.isYellow()){
						branchLayer.add(branchYellow);
					}
					if (junkWorldEngines.isGreen()){
						branchLayer.add(branchGreen);
					}
					if (junkWorldEngines.isBlue()){
						branchLayer.add(branchBlue);
					}
					if (junkWorldEngines.isPurple()){
						branchLayer.add(branchPurple);
					}
				}
				if (junkWorldEngines.isDeadMouse()){
					if (junkWorldEngines.isRed()){
						deadMouseLayer.add(deadMouseRed);
					}
					if (junkWorldEngines.isOrange()){
						deadMouseLayer.add(deadMouseOrange);
					}
					if (junkWorldEngines.isYellow()){
						deadMouseLayer.add(deadMouseYellow);
					}
					if (junkWorldEngines.isGreen()){
						deadMouseLayer.add(deadMouseGreen);
					}
					if (junkWorldEngines.isBlue()){
						deadMouseLayer.add(deadMouseBlue);
					}
					if (junkWorldEngines.isPurple()){
						deadMouseLayer.add(deadMousePurple);
					}
				}
				if (junkWorldEngines.isEggShell()){
					if (junkWorldEngines.isRed()){
						eggShellLayer.add(eggShellRed);
					}
					if (junkWorldEngines.isOrange()){
						eggShellLayer.add(eggShellOrange);
					}
					if (junkWorldEngines.isYellow()){
						eggShellLayer.add(eggShellYellow);
					}
					if (junkWorldEngines.isGreen()){
						eggShellLayer.add(eggShellGreen);
					}
					if (junkWorldEngines.isBlue()){
						eggShellLayer.add(eggShellBlue);
					}
					if (junkWorldEngines.isPurple()){
						eggShellLayer.add(eggShellPurple);
					}
				}
				if (junkWorldEngines.isFeather()){
					if (junkWorldEngines.isRed()){
						featherLayer.add(featherRed);
					}
					if (junkWorldEngines.isOrange()){
						featherLayer.add(featherOrange);
					}
					if (junkWorldEngines.isYellow()){
						featherLayer.add(featherYellow);
					}
					if (junkWorldEngines.isGreen()){
						featherLayer.add(featherGreen);
					}
					if (junkWorldEngines.isBlue()){
						featherLayer.add(featherBlue);
					}
					if (junkWorldEngines.isPurple()){
						featherLayer.add(featherPurple);
					}
				}
				if (junkWorldEngines.isFishBone()){
					if (junkWorldEngines.isRed()){
						fishBoneLayer.add(fishBoneRed);
					}
					if (junkWorldEngines.isOrange()){
						fishBoneLayer.add(fishBoneOrange);
					}
					if (junkWorldEngines.isYellow()){
						fishBoneLayer.add(fishBoneYellow);
					}
					if (junkWorldEngines.isGreen()){
						fishBoneLayer.add(fishBoneGreen);
					}
					if (junkWorldEngines.isBlue()){
						fishBoneLayer.add(fishBoneBlue);
					}
					if (junkWorldEngines.isPurple()){
						fishBoneLayer.add(fishBonePurple);
					}
				}
				if (junkWorldEngines.isFlower()){
					if (junkWorldEngines.isRed()){
						flowerLayer.add(flowerRed);
					}
					if (junkWorldEngines.isOrange()){
						flowerLayer.add(flowerOrange);
					}
					if (junkWorldEngines.isYellow()){
						flowerLayer.add(flowerYellow);
					}
					if (junkWorldEngines.isGreen()){
						flowerLayer.add(flowerGreen);
					}
					if (junkWorldEngines.isBlue()){
						flowerLayer.add(flowerBlue);
					}
					if (junkWorldEngines.isPurple()){
						flowerLayer.add(flowerPurple);
					}
				}
				if (junkWorldEngines.isGrass()){
					if (junkWorldEngines.isRed()){
						grassLayer.add(grassRed);
					}
					if (junkWorldEngines.isOrange()){
						grassLayer.add(grassOrange);
					}
					if (junkWorldEngines.isYellow()){
						grassLayer.add(grassYellow);
					}
					if (junkWorldEngines.isGreen()){
						grassLayer.add(grassGreen);
					}
					if (junkWorldEngines.isBlue()){
						grassLayer.add(grassBlue);
					}
					if (junkWorldEngines.isPurple()){
						grassLayer.add(grassPurple);
					}
				}
				if (junkWorldEngines.isHair()){
					if (junkWorldEngines.isRed()){
						hairLayer.add(hairRed);
					}
					if (junkWorldEngines.isOrange()){
						hairLayer.add(hairOrange);
					}
					if (junkWorldEngines.isYellow()){
						hairLayer.add(hairYellow);
					}
					if (junkWorldEngines.isGreen()){
						hairLayer.add(hairGreen);
					}
					if (junkWorldEngines.isBlue()){
						hairLayer.add(hairBlue);
					}
					if (junkWorldEngines.isPurple()){
						hairLayer.add(hairPurple);
					}
				}
				if (junkWorldEngines.isHay()){
					if (junkWorldEngines.isRed()){
						hayLayer.add(hayRed);
					}
					if (junkWorldEngines.isOrange()){
						hayLayer.add(hayOrange);
					}
					if (junkWorldEngines.isYellow()){
						hayLayer.add(hayYellow);
					}
					if (junkWorldEngines.isGreen()){
						hayLayer.add(hayGreen);
					}
					if (junkWorldEngines.isBlue()){
						hayLayer.add(hayBlue);
					}
					if (junkWorldEngines.isPurple()){
						hayLayer.add(hayPurple);
					}
				}
				if (junkWorldEngines.isLeaves()){
					if (junkWorldEngines.isRed()){
						leavesLayer.add(leavesRed);
					}
					if (junkWorldEngines.isOrange()){
						leavesLayer.add(leavesOrange);
					}
					if (junkWorldEngines.isYellow()){
						leavesLayer.add(leavesYellow);
					}
					if (junkWorldEngines.isGreen()){
						leavesLayer.add(leavesGreen);
					}
					if (junkWorldEngines.isBlue()){
						leavesLayer.add(leavesBlue);
					}
					if (junkWorldEngines.isPurple()){
						leavesLayer.add(leavesPurple);
					}
				}
				if (junkWorldEngines.isManure()){
					if (junkWorldEngines.isRed()){
						manureLayer.add(manureRed);
					}
					if (junkWorldEngines.isOrange()){
						manureLayer.add(manureOrange);
					}
					if (junkWorldEngines.isYellow()){
						manureLayer.add(manureYellow);
					}
					if (junkWorldEngines.isGreen()){
						manureLayer.add(manureGreen);
					}
					if (junkWorldEngines.isBlue()){
						manureLayer.add(manureBlue);
					}
					if (junkWorldEngines.isPurple()){
						manureLayer.add(manurePurple);
					}
				}
				if (junkWorldEngines.isRoots()){
					if (junkWorldEngines.isRed()){
						rootsLayer.add(rootsRed);
					}
					if (junkWorldEngines.isOrange()){
						rootsLayer.add(rootsOrange);
					}
					if (junkWorldEngines.isYellow()){
						rootsLayer.add(rootsYellow);
					}
					if (junkWorldEngines.isGreen()){
						rootsLayer.add(rootsGreen);
					}
					if (junkWorldEngines.isBlue()){
						rootsLayer.add(rootsBlue);
					}
					if (junkWorldEngines.isPurple()){
						rootsLayer.add(rootsPurple);
					}
				}
			}

			if (junkWorldEngines.isRecyclable()){
				if (junkWorldEngines.isBottle()){
					if (junkWorldEngines.isRed()){
						bottleLayer.add(bottleRed);
					}
					if (junkWorldEngines.isOrange()){
						bottleLayer.add(bottleOrange);
					}
					if (junkWorldEngines.isYellow()){
						bottleLayer.add(bottleYellow);
					}
					if (junkWorldEngines.isGreen()){
						bottleLayer.add(bottleGreen);
					}
					if (junkWorldEngines.isBlue()){
						bottleLayer.add(bottleBlue);
					}
					if (junkWorldEngines.isPurple()){
						bottleLayer.add(bottlePurple);
					}
				}
				if (junkWorldEngines.isCan()){
					if (junkWorldEngines.isRed()){
						canLayer.add(canRed);
					}
					if (junkWorldEngines.isOrange()){
						canLayer.add(canOrange);
					}
					if (junkWorldEngines.isYellow()){
						canLayer.add(canYellow);
					}
					if (junkWorldEngines.isGreen()){
						canLayer.add(canGreen);
					}
					if (junkWorldEngines.isBlue()){
						canLayer.add(canBlue);
					}
					if (junkWorldEngines.isPurple()){
						canLayer.add(canPurple);
					}
				}
				if (junkWorldEngines.isCardboard()){
					if (junkWorldEngines.isRed()){
						cardboardLayer.add(cardboardRed);
					}
					if (junkWorldEngines.isOrange()){
						cardboardLayer.add(cardboardOrange);
					}
					if (junkWorldEngines.isYellow()){
						cardboardLayer.add(cardboardYellow);
					}
					if (junkWorldEngines.isGreen()){
						cardboardLayer.add(cardboardGreen);
					}
					if (junkWorldEngines.isBlue()){
						cardboardLayer.add(cardboardBlue);
					}
					if (junkWorldEngines.isPurple()){
						cardboardLayer.add(cardboardPurple);
					}
				}
				if (junkWorldEngines.isCerealBox()){
					if (junkWorldEngines.isRed()){
						cerealBoxLayer.add(cerealBoxRed);
					}
					if (junkWorldEngines.isOrange()){
						cerealBoxLayer.add(cerealBoxOrange);
					}
					if (junkWorldEngines.isYellow()){
						cerealBoxLayer.add(cerealBoxYellow);
					}
					if (junkWorldEngines.isGreen()){
						cerealBoxLayer.add(cerealBoxGreen);
					}
					if (junkWorldEngines.isBlue()){
						cerealBoxLayer.add(cerealBoxBlue);
					}
					if (junkWorldEngines.isPurple()){
						cerealBoxLayer.add(cerealBoxPurple);
					}
				}
				if (junkWorldEngines.isDirtyShirt()){
					if (junkWorldEngines.isRed()){
						dirtyShirtLayer.add(dirtyShirtRed);
					}
					if (junkWorldEngines.isOrange()){
						dirtyShirtLayer.add(dirtyShirtOrange);
					}
					if (junkWorldEngines.isYellow()){
						dirtyShirtLayer.add(dirtyShirtYellow);
					}
					if (junkWorldEngines.isGreen()){
						dirtyShirtLayer.add(dirtyShirtGreen);
					}
					if (junkWorldEngines.isBlue()){
						dirtyShirtLayer.add(dirtyShirtBlue);
					}
					if (junkWorldEngines.isPurple()){
						dirtyShirtLayer.add(dirtyShirtPurple);
					}
				}
				if (junkWorldEngines.isEnvelope()){
					if (junkWorldEngines.isRed()){
						envelopeLayer.add(envelopeRed);
					}
					if (junkWorldEngines.isOrange()){
						envelopeLayer.add(envelopeOrange);
					}
					if (junkWorldEngines.isYellow()){
						envelopeLayer.add(envelopeYellow);
					}
					if (junkWorldEngines.isGreen()){
						envelopeLayer.add(envelopeGreen);
					}
					if (junkWorldEngines.isBlue()){
						envelopeLayer.add(envelopeBlue);
					}
					if (junkWorldEngines.isPurple()){
						envelopeLayer.add(envelopePurple);
					}
				}
				if (junkWorldEngines.isFunnel()){
					if (junkWorldEngines.isRed()){
						funnelLayer.add(funnelRed);
					}
					if (junkWorldEngines.isOrange()){
						funnelLayer.add(funnelOrange);
					}
					if (junkWorldEngines.isYellow()){
						funnelLayer.add(funnelYellow);
					}
					if (junkWorldEngines.isGreen()){
						funnelLayer.add(funnelGreen);
					}
					if (junkWorldEngines.isBlue()){
						funnelLayer.add(funnelBlue);
					}
					if (junkWorldEngines.isPurple()){
						funnelLayer.add(funnelPurple);
					}
				}
				if (junkWorldEngines.isHanger()){
					if (junkWorldEngines.isRed()){
						hangerLayer.add(hangerRed);
					}
					if (junkWorldEngines.isOrange()){
						hangerLayer.add(hangerOrange);
					}
					if (junkWorldEngines.isYellow()){
						hangerLayer.add(hangerYellow);
					}
					if (junkWorldEngines.isGreen()){
						hangerLayer.add(hangerGreen);
					}
					if (junkWorldEngines.isBlue()){
						hangerLayer.add(hangerBlue);
					}
					if (junkWorldEngines.isPurple()){
						hangerLayer.add(hangerPurple);
					}
				}
				if (junkWorldEngines.isNewspaper()){
					if (junkWorldEngines.isRed()){
						newspaperLayer.add(newspaperRed);
					}
					if (junkWorldEngines.isOrange()){
						newspaperLayer.add(newspaperOrange);
					}
					if (junkWorldEngines.isYellow()){
						newspaperLayer.add(newspaperYellow);
					}
					if (junkWorldEngines.isGreen()){
						newspaperLayer.add(newspaperGreen);
					}
					if (junkWorldEngines.isBlue()){
						newspaperLayer.add(newspaperBlue);
					}
					if (junkWorldEngines.isPurple()){
						newspaperLayer.add(newspaperPurple);
					}
				}
				if (junkWorldEngines.isPaper()){
					if (junkWorldEngines.isRed()){
						paperLayer.add(paperRed);
					}
					if (junkWorldEngines.isOrange()){
						paperLayer.add(paperOrange);
					}
					if (junkWorldEngines.isYellow()){
						paperLayer.add(paperYellow);
					}
					if (junkWorldEngines.isGreen()){
						paperLayer.add(paperGreen);
					}
					if (junkWorldEngines.isBlue()){
						paperLayer.add(paperBlue);
					}
					if (junkWorldEngines.isPurple()){
						paperLayer.add(paperPurple);
					}
				}
				if (junkWorldEngines.isPillBottle()){
					if (junkWorldEngines.isRed()){
						pillBottleLayer.add(pillBottleRed);
					}
					if (junkWorldEngines.isOrange()){
						pillBottleLayer.add(pillBottleOrange);
					}
					if (junkWorldEngines.isYellow()){
						pillBottleLayer.add(pillBottleYellow);
					}
					if (junkWorldEngines.isGreen()){
						pillBottleLayer.add(pillBottleGreen);
					}
					if (junkWorldEngines.isBlue()){
						pillBottleLayer.add(pillBottleBlue);
					}
					if (junkWorldEngines.isPurple()){
						pillBottleLayer.add(pillBottlePurple);
					}
				}
				if (junkWorldEngines.isPlasticBag()){
					if (junkWorldEngines.isRed()){
						plasticBagLayer.add(plasticBagRed);
					}
					if (junkWorldEngines.isOrange()){
						plasticBagLayer.add(plasticBagOrange);
					}
					if (junkWorldEngines.isYellow()){
						plasticBagLayer.add(plasticBagYellow);
					}
					if (junkWorldEngines.isGreen()){
						plasticBagLayer.add(plasticBagGreen);
					}
					if (junkWorldEngines.isBlue()){
						plasticBagLayer.add(plasticBagBlue);
					}
					if (junkWorldEngines.isPurple()){
						plasticBagLayer.add(plasticBagPurple);
					}
				}
				if (junkWorldEngines.isTyre()){
					if (junkWorldEngines.isRed()){
						tyreLayer.add(tyreRed);
					}
					if (junkWorldEngines.isOrange()){
						tyreLayer.add(tyreOrange);
					}
					if (junkWorldEngines.isYellow()){
						tyreLayer.add(tyreYellow);
					}
					if (junkWorldEngines.isGreen()){
						tyreLayer.add(tyreGreen);
					}
					if (junkWorldEngines.isBlue()){
						tyreLayer.add(tyreBlue);
					}
					if (junkWorldEngines.isPurple()){
						tyreLayer.add(tyrePurple);
					}
				}
				if (junkWorldEngines.isVase()){
					if (junkWorldEngines.isRed()){
						vaseLayer.add(vaseRed);
					}
					if (junkWorldEngines.isOrange()){
						vaseLayer.add(vaseOrange);
					}
					if (junkWorldEngines.isYellow()){
						vaseLayer.add(vaseYellow);
					}
					if (junkWorldEngines.isGreen()){
						vaseLayer.add(vaseGreen);
					}
					if (junkWorldEngines.isBlue()){
						vaseLayer.add(vaseBlue);
					}
					if (junkWorldEngines.isPurple()){
						vaseLayer.add(vasePurple);
					}
				}
				if (junkWorldEngines.isWaffleIron()){
					if (junkWorldEngines.isRed()){
						waffleIronLayer.add(waffleIronRed);
					}
					if (junkWorldEngines.isOrange()){
						waffleIronLayer.add(waffleIronOrange);
					}
					if (junkWorldEngines.isYellow()){
						waffleIronLayer.add(waffleIronYellow);
					}
					if (junkWorldEngines.isGreen()){
						waffleIronLayer.add(waffleIronGreen);
					}
					if (junkWorldEngines.isBlue()){
						waffleIronLayer.add(waffleIronBlue);
					}
					if (junkWorldEngines.isPurple()){
						waffleIronLayer.add(waffleIronPurple);
					}
				}
			}

			if (junkWorldEngines.isNonRecyclable()){
				if (junkWorldEngines.isAerosolCan()){
					if (junkWorldEngines.isRed()){
						aerosolCanLayer.add(aerosolCanRed);
					}
					if (junkWorldEngines.isOrange()){
						aerosolCanLayer.add(aerosolCanOrange);
					}
					if (junkWorldEngines.isYellow()){
						aerosolCanLayer.add(aerosolCanYellow);
					}
					if (junkWorldEngines.isGreen()){
						aerosolCanLayer.add(aerosolCanGreen);
					}
					if (junkWorldEngines.isBlue()){
						aerosolCanLayer.add(aerosolCanBlue);
					}
					if (junkWorldEngines.isPurple()){
						aerosolCanLayer.add(aerosolCanPurple);
					}
				}
				if (junkWorldEngines.isBrokenBulb()){
					if (junkWorldEngines.isRed()){
						brokenBulbLayer.add(brokenBulbRed);
					}
					if (junkWorldEngines.isOrange()){
						brokenBulbLayer.add(brokenBulbOrange);
					}
					if (junkWorldEngines.isYellow()){
						brokenBulbLayer.add(brokenBulbYellow);
					}
					if (junkWorldEngines.isGreen()){
						brokenBulbLayer.add(brokenBulbGreen);
					}
					if (junkWorldEngines.isBlue()){
						brokenBulbLayer.add(brokenBulbBlue);
					}
					if (junkWorldEngines.isPurple()){
						brokenBulbLayer.add(brokenBulbPurple);
					}
				}
				if (junkWorldEngines.isBrokenGlass()){
					if (junkWorldEngines.isRed()){
						brokenGlassLayer.add(brokenGlassRed);
					}
					if (junkWorldEngines.isOrange()){
						brokenGlassLayer.add(brokenGlassOrange);
					}
					if (junkWorldEngines.isYellow()){
						brokenGlassLayer.add(brokenGlassYellow);
					}
					if (junkWorldEngines.isGreen()){
						brokenGlassLayer.add(brokenGlassGreen);
					}
					if (junkWorldEngines.isBlue()){
						brokenGlassLayer.add(brokenGlassBlue);
					}
					if (junkWorldEngines.isPurple()){
						brokenGlassLayer.add(brokenGlassPurple);
					}
				}
				if (junkWorldEngines.isChewingGum()){
					if (junkWorldEngines.isRed()){
						chewingGumLayer.add(chewingGumRed);
					}
					if (junkWorldEngines.isOrange()){
						chewingGumLayer.add(chewingGumOrange);
					}
					if (junkWorldEngines.isYellow()){
						chewingGumLayer.add(chewingGumYellow);
					}
					if (junkWorldEngines.isGreen()){
						chewingGumLayer.add(chewingGumGreen);
					}
					if (junkWorldEngines.isBlue()){
						chewingGumLayer.add(chewingGumBlue);
					}
					if (junkWorldEngines.isPurple()){
						chewingGumLayer.add(chewingGumPurple);
					}
				}
				if (junkWorldEngines.isCigarette()){
					if (junkWorldEngines.isRed()){
						cigaretteLayer.add(cigaretteRed);
					}
					if (junkWorldEngines.isOrange()){
						cigaretteLayer.add(cigaretteOrange);
					}
					if (junkWorldEngines.isYellow()){
						cigaretteLayer.add(cigaretteYellow);
					}
					if (junkWorldEngines.isGreen()){
						cigaretteLayer.add(cigaretteGreen);
					}
					if (junkWorldEngines.isBlue()){
						cigaretteLayer.add(cigaretteBlue);
					}
					if (junkWorldEngines.isPurple()){
						chewingGumLayer.add(cigarettePurple);
					}
				}
				if (junkWorldEngines.isDeadBattery()){
					if (junkWorldEngines.isRed()){
						deadBatteryLayer.add(deadBatteryRed);
					}
					if (junkWorldEngines.isOrange()){
						deadBatteryLayer.add(deadBatteryOrange);
					}
					if (junkWorldEngines.isYellow()){
						deadBatteryLayer.add(deadBatteryYellow);
					}
					if (junkWorldEngines.isGreen()){
						deadBatteryLayer.add(deadBatteryGreen);
					}
					if (junkWorldEngines.isBlue()){
						deadBatteryLayer.add(deadBatteryBlue);
					}
					if (junkWorldEngines.isPurple()){
						deadBatteryLayer.add(deadBatteryPurple);
					}
				}
				if (junkWorldEngines.isDirtyDiaper()){
					if (junkWorldEngines.isRed()){
						dirtyDiaperLayer.add(dirtyDiaperRed);
					}
					if (junkWorldEngines.isOrange()){
						dirtyDiaperLayer.add(dirtyDiaperOrange);
					}
					if (junkWorldEngines.isYellow()){
						dirtyDiaperLayer.add(dirtyDiaperYellow);
					}
					if (junkWorldEngines.isGreen()){
						dirtyDiaperLayer.add(dirtyDiaperGreen);
					}
					if (junkWorldEngines.isBlue()){
						dirtyDiaperLayer.add(dirtyDiaperBlue);
					}
					if (junkWorldEngines.isPurple()){
						dirtyDiaperLayer.add(dirtyDiaperPurple);
					}
				}
				if (junkWorldEngines.isInsecticideSpray()){
					if (junkWorldEngines.isRed()){
						insecticideSprayLayer.add(insecticideSprayRed);
					}
					if (junkWorldEngines.isOrange()){
						insecticideSprayLayer.add(insecticideSprayOrange);
					}
					if (junkWorldEngines.isYellow()){
						insecticideSprayLayer.add(insecticideSprayYellow);
					}
					if (junkWorldEngines.isGreen()){
						insecticideSprayLayer.add(insecticideSprayGreen);
					}
					if (junkWorldEngines.isBlue()){
						insecticideSprayLayer.add(insecticideSprayBlue);
					}
					if (junkWorldEngines.isPurple()){
						insecticideSprayLayer.add(insecticideSprayPurple);
					}
				}
				if (junkWorldEngines.isLeftoverCake()){
					if (junkWorldEngines.isRed()){
						leftoverCakeLayer.add(leftoverCakeRed);
					}
					if (junkWorldEngines.isOrange()){
						leftoverCakeLayer.add(leftoverCakeOrange);
					}
					if (junkWorldEngines.isYellow()){
						leftoverCakeLayer.add(leftoverCakeYellow);
					}
					if (junkWorldEngines.isGreen()){
						leftoverCakeLayer.add(leftoverCakeGreen);
					}
					if (junkWorldEngines.isBlue()){
						leftoverCakeLayer.add(leftoverCakeBlue);
					}
					if (junkWorldEngines.isPurple()){
						leftoverCakeLayer.add(leftoverCakePurple);
					}
				}
				if (junkWorldEngines.isLeftoverChicken()){
					if (junkWorldEngines.isRed()){
						leftoverChickenLayer.add(leftoverChickenRed);
					}
					if (junkWorldEngines.isOrange()){
						leftoverChickenLayer.add(leftoverChickenOrange);
					}
					if (junkWorldEngines.isYellow()){
						leftoverChickenLayer.add(leftoverChickenYellow);
					}
					if (junkWorldEngines.isGreen()){
						leftoverChickenLayer.add(leftoverChickenGreen);
					}
					if (junkWorldEngines.isBlue()){
						leftoverChickenLayer.add(leftoverChickenBlue);
					}
					if (junkWorldEngines.isPurple()){
						leftoverChickenLayer.add(leftoverChickenPurple);
					}
				}
				if (junkWorldEngines.isNail()){
					if (junkWorldEngines.isRed()){
						nailLayer.add(nailRed);
					}
					if (junkWorldEngines.isOrange()){
						nailLayer.add(nailOrange);
					}
					if (junkWorldEngines.isYellow()){
						nailLayer.add(nailYellow);
					}
					if (junkWorldEngines.isGreen()){
						nailLayer.add(nailGreen);
					}
					if (junkWorldEngines.isBlue()){
						nailLayer.add(nailBlue);
					}
					if (junkWorldEngines.isPurple()){
						nailLayer.add(nailPurple);
					}
				}
				if (junkWorldEngines.isPaintCan()){
					if (junkWorldEngines.isRed()){
						paintCanLayer.add(paintCanRed);
					}
					if (junkWorldEngines.isOrange()){
						paintCanLayer.add(paintCanOrange);
					}
					if (junkWorldEngines.isYellow()){
						paintCanLayer.add(paintCanYellow);
					}
					if (junkWorldEngines.isGreen()){
						paintCanLayer.add(paintCanGreen);
					}
					if (junkWorldEngines.isBlue()){
						paintCanLayer.add(paintCanBlue);
					}
					if (junkWorldEngines.isPurple()){
						paintCanLayer.add(paintCanPurple);
					}
				}
				if (junkWorldEngines.isSyringe()){
					if (junkWorldEngines.isRed()){
						syringeLayer.add(syringeRed);
					}
					if (junkWorldEngines.isOrange()){
						syringeLayer.add(syringeOrange);
					}
					if (junkWorldEngines.isYellow()){
						syringeLayer.add(syringeYellow);
					}
					if (junkWorldEngines.isGreen()){
						syringeLayer.add(syringeGreen);
					}
					if (junkWorldEngines.isBlue()){
						syringeLayer.add(syringeBlue);
					}
					if (junkWorldEngines.isPurple()){
						syringeLayer.add(syringePurple);
					}
				}
				if (junkWorldEngines.isTornPaper()){
					if (junkWorldEngines.isRed()){
						tornPaperLayer.add(tornPaperRed);
					}
					if (junkWorldEngines.isOrange()){
						tornPaperLayer.add(tornPaperOrange);
					}
					if (junkWorldEngines.isYellow()){
						tornPaperLayer.add(tornPaperYellow);
					}
					if (junkWorldEngines.isGreen()){
						tornPaperLayer.add(tornPaperGreen);
					}
					if (junkWorldEngines.isBlue()){
						tornPaperLayer.add(tornPaperBlue);
					}
					if (junkWorldEngines.isPurple()){
						tornPaperLayer.add(tornPaperPurple);
					}
				}
				if (junkWorldEngines.isUsedMotorOil()){
					if (junkWorldEngines.isRed()){
						usedMotorOilLayer.add(usedMotorOilRed);
					}
					if (junkWorldEngines.isOrange()){
						usedMotorOilLayer.add(usedMotorOilOrange);
					}
					if (junkWorldEngines.isYellow()){
						usedMotorOilLayer.add(usedMotorOilYellow);
					}
					if (junkWorldEngines.isGreen()){
						usedMotorOilLayer.add(usedMotorOilGreen);
					}
					if (junkWorldEngines.isBlue()){
						usedMotorOilLayer.add(usedMotorOilBlue);
					}
					if (junkWorldEngines.isPurple()){
						usedMotorOilLayer.add(usedMotorOilPurple);
					}
				}

				if (junkWorldEngines.isBiodegradable()){
					if (junkWorldEngines.isRed()){
						if (junkWorldEngines.isAcorn()){
							bLayers.add(acornRed);
						}
						if (junkWorldEngines.isApple()){
							bLayers.add(appleRed);
						}
						if (junkWorldEngines.isBananaPeel()){
							bLayers.add(bananaPeelRed);
						}
						if (junkWorldEngines.isBranch()){
							bLayers.add(branchRed);
						}
						if (junkWorldEngines.isDeadMouse()){
							bLayers.add(deadMouseRed);
						}
						if (junkWorldEngines.isEggShell()){
							bLayers.add(eggShellRed);
						}
						if (junkWorldEngines.isFeather()){
							bLayers.add(featherRed);
						}
						if (junkWorldEngines.isFishBone()){
							bLayers.add(fishBoneRed);
						}
						if (junkWorldEngines.isFlower()){
							bLayers.add(flowerRed);
						}
						if (junkWorldEngines.isGrass()){
							bLayers.add(grassRed);
						}
						if (junkWorldEngines.isHair()){
							bLayers.add(hairRed);
						}
						if (junkWorldEngines.isHay()){
							bLayers.add(hayRed);
						}
						if (junkWorldEngines.isLeaves()){
							bLayers.add(leavesRed);
						}
						if (junkWorldEngines.isManure()){
							bLayers.add(manureRed);
						}
						if (junkWorldEngines.isRoots()){
							bLayers.add(rootsRed);
						}
					}

					if (junkWorldEngines.isOrange()){
						if (junkWorldEngines.isAcorn()){
							bLayers.add(acornOrange);
						}
						if (junkWorldEngines.isApple()){
							bLayers.add(appleOrange);
						}
						if (junkWorldEngines.isBananaPeel()){
							bLayers.add(bananaPeelOrange);
						}
						if (junkWorldEngines.isBranch()){
							bLayers.add(branchOrange);
						}
						if (junkWorldEngines.isDeadMouse()){
							bLayers.add(deadMouseOrange);
						}
						if (junkWorldEngines.isEggShell()){
							bLayers.add(eggShellOrange);
						}
						if (junkWorldEngines.isFeather()){
							bLayers.add(featherOrange);
						}
						if (junkWorldEngines.isFishBone()){
							bLayers.add(fishBoneOrange);
						}
						if (junkWorldEngines.isFlower()){
							bLayers.add(flowerOrange);
						}
						if (junkWorldEngines.isGrass()){
							bLayers.add(grassOrange);
						}
						if (junkWorldEngines.isHair()){
							bLayers.add(hairOrange);
						}
						if (junkWorldEngines.isHay()){
							bLayers.add(hayOrange);
						}
						if (junkWorldEngines.isLeaves()){
							bLayers.add(leavesOrange);
						}
						if (junkWorldEngines.isManure()){
							bLayers.add(manureOrange);
						}
						if (junkWorldEngines.isRoots()){
							bLayers.add(rootsOrange);
						}
					}

					if (junkWorldEngines.isYellow()){
						if (junkWorldEngines.isAcorn()){
							bLayers.add(acornYellow);
						}
						if (junkWorldEngines.isApple()){
							bLayers.add(appleYellow);
						}
						if (junkWorldEngines.isBananaPeel()){
							bLayers.add(bananaPeelYellow);
						}
						if (junkWorldEngines.isBranch()){
							bLayers.add(branchYellow);
						}
						if (junkWorldEngines.isDeadMouse()){
							bLayers.add(deadMouseYellow);
						}
						if (junkWorldEngines.isEggShell()){
							bLayers.add(eggShellYellow);
						}
						if (junkWorldEngines.isFeather()){
							bLayers.add(featherYellow);
						}
						if (junkWorldEngines.isFishBone()){
							bLayers.add(fishBoneYellow);
						}
						if (junkWorldEngines.isFlower()){
							bLayers.add(flowerYellow);
						}
						if (junkWorldEngines.isGrass()){
							bLayers.add(grassYellow);
						}
						if (junkWorldEngines.isHair()){
							bLayers.add(hairYellow);
						}
						if (junkWorldEngines.isHay()){
							bLayers.add(hayYellow);
						}
						if (junkWorldEngines.isLeaves()){
							bLayers.add(leavesYellow);
						}
						if (junkWorldEngines.isManure()){
							bLayers.add(manureYellow);
						}
						if (junkWorldEngines.isRoots()){
							bLayers.add(rootsYellow);
						}
					}

					if (junkWorldEngines.isGreen()){
						if (junkWorldEngines.isAcorn()){
							bLayers.add(acornGreen);
						}
						if (junkWorldEngines.isApple()){
							bLayers.add(appleGreen);
						}
						if (junkWorldEngines.isBananaPeel()){
							bLayers.add(bananaPeelGreen);
						}
						if (junkWorldEngines.isBranch()){
							bLayers.add(branchGreen);
						}
						if (junkWorldEngines.isDeadMouse()){
							bLayers.add(deadMouseGreen);
						}
						if (junkWorldEngines.isEggShell()){
							bLayers.add(eggShellGreen);
						}
						if (junkWorldEngines.isFeather()){
							bLayers.add(featherGreen);
						}
						if (junkWorldEngines.isFishBone()){
							bLayers.add(fishBoneGreen);
						}
						if (junkWorldEngines.isFlower()){
							bLayers.add(flowerGreen);
						}
						if (junkWorldEngines.isGrass()){
							bLayers.add(grassGreen);
						}
						if (junkWorldEngines.isHair()){
							bLayers.add(hairGreen);
						}
						if (junkWorldEngines.isHay()){
							bLayers.add(hayGreen);
						}
						if (junkWorldEngines.isLeaves()){
							bLayers.add(leavesGreen);
						}
						if (junkWorldEngines.isManure()){
							bLayers.add(manureGreen);
						}
						if (junkWorldEngines.isRoots()){
							bLayers.add(rootsGreen);
						}
					}

					if (junkWorldEngines.isBlue()){
						if (junkWorldEngines.isAcorn()){
							bLayers.add(acornBlue);
						}
						if (junkWorldEngines.isApple()){
							bLayers.add(appleBlue);
						}
						if (junkWorldEngines.isBananaPeel()){
							bLayers.add(bananaPeelBlue);
						}
						if (junkWorldEngines.isBranch()){
							bLayers.add(branchBlue);
						}
						if (junkWorldEngines.isDeadMouse()){
							bLayers.add(deadMouseBlue);
						}
						if (junkWorldEngines.isEggShell()){
							bLayers.add(eggShellBlue);
						}
						if (junkWorldEngines.isFeather()){
							bLayers.add(featherBlue);
						}
						if (junkWorldEngines.isFishBone()){
							bLayers.add(fishBoneBlue);
						}
						if (junkWorldEngines.isFlower()){
							bLayers.add(flowerBlue);
						}
						if (junkWorldEngines.isGrass()){
							bLayers.add(grassBlue);
						}
						if (junkWorldEngines.isHair()){
							bLayers.add(hairBlue);
						}
						if (junkWorldEngines.isHay()){
							bLayers.add(hayBlue);
						}
						if (junkWorldEngines.isLeaves()){
							bLayers.add(leavesBlue);
						}
						if (junkWorldEngines.isManure()){
							bLayers.add(manureBlue);
						}
						if (junkWorldEngines.isRoots()){
							bLayers.add(rootsBlue);
						}
					}

					if (junkWorldEngines.isPurple()){
						if (junkWorldEngines.isAcorn()){
							bLayers.add(acornPurple);
						}
						if (junkWorldEngines.isApple()){
							bLayers.add(applePurple);
						}
						if (junkWorldEngines.isBananaPeel()){
							bLayers.add(bananaPeelPurple);
						}
						if (junkWorldEngines.isBranch()){
							bLayers.add(branchPurple);
						}
						if (junkWorldEngines.isDeadMouse()){
							bLayers.add(deadMousePurple);
						}
						if (junkWorldEngines.isEggShell()){
							bLayers.add(eggShellPurple);
						}
						if (junkWorldEngines.isFeather()){
							bLayers.add(featherPurple);
						}
						if (junkWorldEngines.isFishBone()){
							bLayers.add(fishBonePurple);
						}
						if (junkWorldEngines.isFlower()){
							bLayers.add(flowerPurple);
						}
						if (junkWorldEngines.isGrass()){
							bLayers.add(grassPurple);
						}
						if (junkWorldEngines.isHair()){
							bLayers.add(hairPurple);
						}
						if (junkWorldEngines.isHay()){
							bLayers.add(hayPurple);
						}
						if (junkWorldEngines.isLeaves()){
							bLayers.add(leavesPurple);
						}
						if (junkWorldEngines.isManure()){
							bLayers.add(manurePurple);
						}
						if (junkWorldEngines.isRoots()){
							bLayers.add(rootsPurple);
						}
					}
				}

				if (junkWorldEngines.isRecyclable()){
					if (junkWorldEngines.isRed()){
						if (junkWorldEngines.isBottle()){
							rLayers.add(bottleRed);
						}
						if (junkWorldEngines.isCan()){
							rLayers.add(canRed);
						}
						if (junkWorldEngines.isCardboard()){
							rLayers.add(cardboardRed);
						}
						if (junkWorldEngines.isCerealBox()){
							rLayers.add(cerealBoxRed);
						}
						if (junkWorldEngines.isDirtyShirt()){
							rLayers.add(dirtyShirtRed);
						}
						if (junkWorldEngines.isEnvelope()){
							rLayers.add(envelopeRed);
						}
						if (junkWorldEngines.isFunnel()){
							rLayers.add(funnelRed);
						}
						if (junkWorldEngines.isHanger()){
							rLayers.add(hangerRed);
						}
						if (junkWorldEngines.isNewspaper()){
							rLayers.add(newspaperRed);
						}
						if (junkWorldEngines.isPaper()){
							rLayers.add(paperRed);
						}
						if (junkWorldEngines.isPillBottle()){
							rLayers.add(pillBottleRed);
						}
						if (junkWorldEngines.isPlasticBag()){
							rLayers.add(plasticBagRed);
						}
						if (junkWorldEngines.isTyre()){
							rLayers.add(tyreRed);
						}
						if (junkWorldEngines.isVase()){
							rLayers.add(vaseRed);
						}
						if (junkWorldEngines.isWaffleIron()){
							rLayers.add(waffleIronRed);
						}
					}

					if (junkWorldEngines.isOrange()){
						if (junkWorldEngines.isBottle()){
							rLayers.add(bottleOrange);
						}
						if (junkWorldEngines.isCan()){
							rLayers.add(canOrange);
						}
						if (junkWorldEngines.isCardboard()){
							rLayers.add(cardboardOrange);
						}
						if (junkWorldEngines.isCerealBox()){
							rLayers.add(cerealBoxOrange);
						}
						if (junkWorldEngines.isDirtyShirt()){
							rLayers.add(dirtyShirtOrange);
						}
						if (junkWorldEngines.isEnvelope()){
							rLayers.add(envelopeOrange);
						}
						if (junkWorldEngines.isFunnel()){
							rLayers.add(funnelOrange);
						}
						if (junkWorldEngines.isHanger()){
							rLayers.add(hangerOrange);
						}
						if (junkWorldEngines.isNewspaper()){
							rLayers.add(newspaperOrange);
						}
						if (junkWorldEngines.isPaper()){
							rLayers.add(paperOrange);
						}
						if (junkWorldEngines.isPillBottle()){
							rLayers.add(pillBottleOrange);
						}
						if (junkWorldEngines.isPlasticBag()){
							rLayers.add(plasticBagOrange);
						}
						if (junkWorldEngines.isTyre()){
							rLayers.add(tyreOrange);
						}
						if (junkWorldEngines.isVase()){
							rLayers.add(vaseOrange);
						}
						if (junkWorldEngines.isWaffleIron()){
							rLayers.add(waffleIronOrange);
						}
					}

					if (junkWorldEngines.isYellow()){
						if (junkWorldEngines.isBottle()){
							rLayers.add(bottleYellow);
						}
						if (junkWorldEngines.isCan()){
							rLayers.add(canYellow);
						}
						if (junkWorldEngines.isCardboard()){
							rLayers.add(cardboardYellow);
						}
						if (junkWorldEngines.isCerealBox()){
							rLayers.add(cerealBoxYellow);
						}
						if (junkWorldEngines.isDirtyShirt()){
							rLayers.add(dirtyShirtYellow);
						}
						if (junkWorldEngines.isEnvelope()){
							rLayers.add(envelopeYellow);
						}
						if (junkWorldEngines.isFunnel()){
							rLayers.add(funnelYellow);
						}
						if (junkWorldEngines.isHanger()){
							rLayers.add(hangerYellow);
						}
						if (junkWorldEngines.isNewspaper()){
							rLayers.add(newspaperYellow);
						}
						if (junkWorldEngines.isPaper()){
							rLayers.add(paperYellow);
						}
						if (junkWorldEngines.isPillBottle()){
							rLayers.add(pillBottleYellow);
						}
						if (junkWorldEngines.isPlasticBag()){
							rLayers.add(plasticBagYellow);
						}
						if (junkWorldEngines.isTyre()){
							rLayers.add(tyreYellow);
						}
						if (junkWorldEngines.isVase()){
							rLayers.add(vaseYellow);
						}
						if (junkWorldEngines.isWaffleIron()){
							rLayers.add(waffleIronYellow);
						}
					}

					if (junkWorldEngines.isGreen()){
						if (junkWorldEngines.isBottle()){
							rLayers.add(bottleGreen);
						}
						if (junkWorldEngines.isCan()){
							rLayers.add(canGreen);
						}
						if (junkWorldEngines.isCardboard()){
							rLayers.add(cardboardGreen);
						}
						if (junkWorldEngines.isCerealBox()){
							rLayers.add(cerealBoxGreen);
						}
						if (junkWorldEngines.isDirtyShirt()){
							rLayers.add(dirtyShirtGreen);
						}
						if (junkWorldEngines.isEnvelope()){
							rLayers.add(envelopeGreen);
						}
						if (junkWorldEngines.isFunnel()){
							rLayers.add(funnelGreen);
						}
						if (junkWorldEngines.isHanger()){
							rLayers.add(hangerGreen);
						}
						if (junkWorldEngines.isNewspaper()){
							rLayers.add(newspaperGreen);
						}
						if (junkWorldEngines.isPaper()){
							rLayers.add(paperGreen);
						}
						if (junkWorldEngines.isPillBottle()){
							rLayers.add(pillBottleGreen);
						}
						if (junkWorldEngines.isPlasticBag()){
							rLayers.add(plasticBagGreen);
						}
						if (junkWorldEngines.isTyre()){
							rLayers.add(tyreGreen);
						}
						if (junkWorldEngines.isVase()){
							rLayers.add(vaseGreen);
						}
						if (junkWorldEngines.isWaffleIron()){
							rLayers.add(waffleIronGreen);
						}
					}

					if (junkWorldEngines.isBlue()){
						if (junkWorldEngines.isBottle()){
							rLayers.add(bottleBlue);
						}
						if (junkWorldEngines.isCan()){
							rLayers.add(canBlue);
						}
						if (junkWorldEngines.isCardboard()){
							rLayers.add(cardboardBlue);
						}
						if (junkWorldEngines.isCerealBox()){
							rLayers.add(cerealBoxBlue);
						}
						if (junkWorldEngines.isDirtyShirt()){
							rLayers.add(dirtyShirtBlue);
						}
						if (junkWorldEngines.isEnvelope()){
							rLayers.add(envelopeBlue);
						}
						if (junkWorldEngines.isFunnel()){
							rLayers.add(funnelBlue);
						}
						if (junkWorldEngines.isHanger()){
							rLayers.add(hangerBlue);
						}
						if (junkWorldEngines.isNewspaper()){
							rLayers.add(newspaperBlue);
						}
						if (junkWorldEngines.isPaper()){
							rLayers.add(paperBlue);
						}
						if (junkWorldEngines.isPillBottle()){
							rLayers.add(pillBottleBlue);
						}
						if (junkWorldEngines.isPlasticBag()){
							rLayers.add(plasticBagBlue);
						}
						if (junkWorldEngines.isTyre()){
							rLayers.add(tyreBlue);
						}
						if (junkWorldEngines.isVase()){
							rLayers.add(vaseBlue);
						}
						if (junkWorldEngines.isWaffleIron()){
							rLayers.add(waffleIronBlue);
						}
					}

					if (junkWorldEngines.isPurple()){
						if (junkWorldEngines.isBottle()){
							rLayers.add(bottlePurple);
						}
						if (junkWorldEngines.isCan()){
							rLayers.add(canPurple);
						}
						if (junkWorldEngines.isCardboard()){
							rLayers.add(cardboardPurple);
						}
						if (junkWorldEngines.isCerealBox()){
							rLayers.add(cerealBoxPurple);
						}
						if (junkWorldEngines.isDirtyShirt()){
							rLayers.add(dirtyShirtPurple);
						}
						if (junkWorldEngines.isEnvelope()){
							rLayers.add(envelopePurple);
						}
						if (junkWorldEngines.isFunnel()){
							rLayers.add(funnelPurple);
						}
						if (junkWorldEngines.isHanger()){
							rLayers.add(hangerPurple);
						}
						if (junkWorldEngines.isNewspaper()){
							rLayers.add(newspaperPurple);
						}
						if (junkWorldEngines.isPaper()){
							rLayers.add(paperPurple);
						}
						if (junkWorldEngines.isPillBottle()){
							rLayers.add(pillBottlePurple);
						}
						if (junkWorldEngines.isPlasticBag()){
							rLayers.add(plasticBagPurple);
						}
						if (junkWorldEngines.isTyre()){
							rLayers.add(tyrePurple);
						}
						if (junkWorldEngines.isVase()){
							rLayers.add(vasePurple);
						}
						if (junkWorldEngines.isWaffleIron()){
							rLayers.add(waffleIronPurple);
						}
					}
				}

				if (junkWorldEngines.isNonRecyclable()){
					if (junkWorldEngines.isRed()){
						if (junkWorldEngines.isAerosolCan()){
							nrLayers.add(aerosolCanRed);
						}
						if (junkWorldEngines.isBrokenBulb()){
							nrLayers.add(brokenBulbRed);
						}
						if (junkWorldEngines.isBrokenGlass()){
							nrLayers.add(brokenGlassRed);
						}
						if (junkWorldEngines.isChewingGum()){
							nrLayers.add(chewingGumRed);
						}
						if (junkWorldEngines.isCigarette()){
							nrLayers.add(cigaretteRed);
						}
						if (junkWorldEngines.isDeadBattery()){
							nrLayers.add(deadBatteryRed);
						}
						if (junkWorldEngines.isDirtyDiaper()){
							nrLayers.add(dirtyDiaperRed);
						}
						if (junkWorldEngines.isInsecticideSpray()){
							nrLayers.add(insecticideSprayRed);
						}
						if (junkWorldEngines.isLeftoverCake()){
							nrLayers.add(leftoverCakeRed);
						}
						if (junkWorldEngines.isLeftoverChicken()){
							nrLayers.add(leftoverChickenRed);
						}
						if (junkWorldEngines.isNail()){
							nrLayers.add(nailRed);
						}
						if (junkWorldEngines.isPaintCan()){
							nrLayers.add(paintCanRed);
						}
						if (junkWorldEngines.isSyringe()){
							nrLayers.add(syringeRed);
						}
						if (junkWorldEngines.isTornPaper()){
							nrLayers.add(tornPaperRed);
						}
						if (junkWorldEngines.isUsedMotorOil()){
							nrLayers.add(usedMotorOilRed);
						}
					}

					if (junkWorldEngines.isOrange()){
						if (junkWorldEngines.isAerosolCan()){
							nrLayers.add(aerosolCanOrange);
						}
						if (junkWorldEngines.isBrokenBulb()){
							nrLayers.add(brokenBulbOrange);
						}
						if (junkWorldEngines.isBrokenGlass()){
							nrLayers.add(brokenGlassOrange);
						}
						if (junkWorldEngines.isChewingGum()){
							nrLayers.add(chewingGumOrange);
						}
						if (junkWorldEngines.isCigarette()){
							nrLayers.add(cigaretteOrange);
						}
						if (junkWorldEngines.isDeadBattery()){
							nrLayers.add(deadBatteryOrange);
						}
						if (junkWorldEngines.isDirtyDiaper()){
							nrLayers.add(dirtyDiaperOrange);
						}
						if (junkWorldEngines.isInsecticideSpray()){
							nrLayers.add(insecticideSprayOrange);
						}
						if (junkWorldEngines.isLeftoverCake()){
							nrLayers.add(leftoverCakeOrange);
						}
						if (junkWorldEngines.isLeftoverChicken()){
							nrLayers.add(leftoverChickenOrange);
						}
						if (junkWorldEngines.isNail()){
							nrLayers.add(nailOrange);
						}
						if (junkWorldEngines.isPaintCan()){
							nrLayers.add(paintCanOrange);
						}
						if (junkWorldEngines.isSyringe()){
							nrLayers.add(syringeOrange);
						}
						if (junkWorldEngines.isTornPaper()){
							nrLayers.add(tornPaperOrange);
						}
						if (junkWorldEngines.isUsedMotorOil()){
							nrLayers.add(usedMotorOilOrange);
						}
					}

					if (junkWorldEngines.isYellow()){
						if (junkWorldEngines.isAerosolCan()){
							nrLayers.add(aerosolCanYellow);
						}
						if (junkWorldEngines.isBrokenBulb()){
							nrLayers.add(brokenBulbYellow);
						}
						if (junkWorldEngines.isBrokenGlass()){
							nrLayers.add(brokenGlassYellow);
						}
						if (junkWorldEngines.isChewingGum()){
							nrLayers.add(chewingGumYellow);
						}
						if (junkWorldEngines.isCigarette()){
							nrLayers.add(cigaretteYellow);
						}
						if (junkWorldEngines.isDeadBattery()){
							nrLayers.add(deadBatteryYellow);
						}
						if (junkWorldEngines.isDirtyDiaper()){
							nrLayers.add(dirtyDiaperYellow);
						}
						if (junkWorldEngines.isInsecticideSpray()){
							nrLayers.add(insecticideSprayYellow);
						}
						if (junkWorldEngines.isLeftoverCake()){
							nrLayers.add(leftoverCakeYellow);
						}
						if (junkWorldEngines.isLeftoverChicken()){
							nrLayers.add(leftoverChickenYellow);
						}
						if (junkWorldEngines.isNail()){
							nrLayers.add(nailYellow);
						}
						if (junkWorldEngines.isPaintCan()){
							nrLayers.add(paintCanYellow);
						}
						if (junkWorldEngines.isSyringe()){
							nrLayers.add(syringeYellow);
						}
						if (junkWorldEngines.isTornPaper()){
							nrLayers.add(tornPaperYellow);
						}
						if (junkWorldEngines.isUsedMotorOil()){
							nrLayers.add(usedMotorOilYellow);
						}
					}

					if (junkWorldEngines.isGreen()){
						if (junkWorldEngines.isAerosolCan()){
							nrLayers.add(aerosolCanGreen);
						}
						if (junkWorldEngines.isBrokenBulb()){
							nrLayers.add(brokenBulbGreen);
						}
						if (junkWorldEngines.isBrokenGlass()){
							nrLayers.add(brokenGlassGreen);
						}
						if (junkWorldEngines.isChewingGum()){
							nrLayers.add(chewingGumGreen);
						}
						if (junkWorldEngines.isCigarette()){
							nrLayers.add(cigaretteGreen);
						}
						if (junkWorldEngines.isDeadBattery()){
							nrLayers.add(deadBatteryGreen);
						}
						if (junkWorldEngines.isDirtyDiaper()){
							nrLayers.add(dirtyDiaperGreen);
						}
						if (junkWorldEngines.isInsecticideSpray()){
							nrLayers.add(insecticideSprayGreen);
						}
						if (junkWorldEngines.isLeftoverCake()){
							nrLayers.add(leftoverCakeGreen);
						}
						if (junkWorldEngines.isLeftoverChicken()){
							nrLayers.add(leftoverChickenGreen);
						}
						if (junkWorldEngines.isNail()){
							nrLayers.add(nailGreen);
						}
						if (junkWorldEngines.isPaintCan()){
							nrLayers.add(paintCanGreen);
						}
						if (junkWorldEngines.isSyringe()){
							nrLayers.add(syringeGreen);
						}
						if (junkWorldEngines.isTornPaper()){
							nrLayers.add(tornPaperGreen);
						}
						if (junkWorldEngines.isUsedMotorOil()){
							nrLayers.add(usedMotorOilGreen);
						}
					}

					if (junkWorldEngines.isBlue()){
						if (junkWorldEngines.isAerosolCan()){
							nrLayers.add(aerosolCanBlue);
						}
						if (junkWorldEngines.isBrokenBulb()){
							nrLayers.add(brokenBulbBlue);
						}
						if (junkWorldEngines.isBrokenGlass()){
							nrLayers.add(brokenGlassBlue);
						}
						if (junkWorldEngines.isChewingGum()){
							nrLayers.add(chewingGumBlue);
						}
						if (junkWorldEngines.isCigarette()){
							nrLayers.add(cigaretteBlue);
						}
						if (junkWorldEngines.isDeadBattery()){
							nrLayers.add(deadBatteryBlue);
						}
						if (junkWorldEngines.isDirtyDiaper()){
							nrLayers.add(dirtyDiaperBlue);
						}
						if (junkWorldEngines.isInsecticideSpray()){
							nrLayers.add(insecticideSprayBlue);
						}
						if (junkWorldEngines.isLeftoverCake()){
							nrLayers.add(leftoverCakeBlue);
						}
						if (junkWorldEngines.isLeftoverChicken()){
							nrLayers.add(leftoverChickenBlue);
						}
						if (junkWorldEngines.isNail()){
							nrLayers.add(nailBlue);
						}
						if (junkWorldEngines.isPaintCan()){
							nrLayers.add(paintCanBlue);
						}
						if (junkWorldEngines.isSyringe()){
							nrLayers.add(syringeBlue);
						}
						if (junkWorldEngines.isTornPaper()){
							nrLayers.add(tornPaperBlue);
						}
						if (junkWorldEngines.isUsedMotorOil()){
							nrLayers.add(usedMotorOilBlue);
						}
					}

					if (junkWorldEngines.isPurple()){
						if (junkWorldEngines.isAerosolCan()){
							nrLayers.add(aerosolCanPurple);
						}
						if (junkWorldEngines.isBrokenBulb()){
							nrLayers.add(brokenBulbPurple);
						}
						if (junkWorldEngines.isBrokenGlass()){
							nrLayers.add(brokenGlassPurple);
						}
						if (junkWorldEngines.isChewingGum()){
							nrLayers.add(chewingGumPurple);
						}
						if (junkWorldEngines.isCigarette()){
							nrLayers.add(cigarettePurple);
						}
						if (junkWorldEngines.isDeadBattery()){
							nrLayers.add(deadBatteryPurple);
						}
						if (junkWorldEngines.isDirtyDiaper()){
							nrLayers.add(dirtyDiaperPurple);
						}
						if (junkWorldEngines.isInsecticideSpray()){
							nrLayers.add(insecticideSprayPurple);
						}
						if (junkWorldEngines.isLeftoverCake()){
							nrLayers.add(leftoverCakePurple);
						}
						if (junkWorldEngines.isLeftoverChicken()){
							nrLayers.add(leftoverChickenPurple);
						}
						if (junkWorldEngines.isNail()){
							nrLayers.add(nailPurple);
						}
						if (junkWorldEngines.isPaintCan()){
							nrLayers.add(paintCanPurple);
						}
						if (junkWorldEngines.isSyringe()){
							nrLayers.add(syringePurple);
						}
						if (junkWorldEngines.isTornPaper()){
							nrLayers.add(tornPaperPurple);
						}
						if (junkWorldEngines.isUsedMotorOil()){
							nrLayers.add(usedMotorOilPurple);
						}
					}
				}

				if (junkWorldEngines.isRed()){
					if (junkWorldEngines.isBiodegradable()){
						if (junkWorldEngines.isAcorn()){
							redLayers.add(acornRed);
						}
						if (junkWorldEngines.isApple()){
							redLayers.add(appleRed);
						}
						if (junkWorldEngines.isBananaPeel()){
							redLayers.add(bananaPeelRed);
						}
						if (junkWorldEngines.isBranch()){
							redLayers.add(branchRed);
						}
						if (junkWorldEngines.isDeadMouse()){
							redLayers.add(deadMouseRed);
						}
						if (junkWorldEngines.isEggShell()){
							redLayers.add(eggShellRed);
						}
						if (junkWorldEngines.isFeather()){
							redLayers.add(featherRed);
						}
						if (junkWorldEngines.isFishBone()){
							redLayers.add(fishBoneRed);
						}
						if (junkWorldEngines.isFlower()){
							redLayers.add(flowerRed);
						}
						if (junkWorldEngines.isGrass()){
							redLayers.add(grassRed);
						}
						if (junkWorldEngines.isHair()){
							redLayers.add(hairRed);
						}
						if (junkWorldEngines.isHay()){
							redLayers.add(hayRed);
						}
						if (junkWorldEngines.isLeaves()){
							redLayers.add(leavesRed);
						}
						if (junkWorldEngines.isManure()){
							redLayers.add(manureRed);
						}
						if (junkWorldEngines.isRoots()){
							redLayers.add(rootsRed);
						}
					}

					if (junkWorldEngines.isRecyclable()){
						if (junkWorldEngines.isBottle()){
							redLayers.add(bottleRed);
						}
						if (junkWorldEngines.isCan()){
							redLayers.add(canRed);
						}
						if (junkWorldEngines.isCardboard()){
							redLayers.add(cardboardRed);
						}
						if (junkWorldEngines.isCerealBox()){
							redLayers.add(cerealBoxRed);
						}
						if (junkWorldEngines.isDirtyShirt()){
							redLayers.add(dirtyShirtRed);
						}
						if (junkWorldEngines.isEnvelope()){
							redLayers.add(envelopeRed);
						}
						if (junkWorldEngines.isFunnel()){
							redLayers.add(funnelRed);
						}
						if (junkWorldEngines.isHanger()){
							redLayers.add(hangerRed);
						}
						if (junkWorldEngines.isNewspaper()){
							redLayers.add(newspaperRed);
						}
						if (junkWorldEngines.isPaper()){
							redLayers.add(paperRed);
						}
						if (junkWorldEngines.isPillBottle()){
							redLayers.add(pillBottleRed);
						}
						if (junkWorldEngines.isPlasticBag()){
							redLayers.add(plasticBagRed);
						}
						if (junkWorldEngines.isTyre()){
							redLayers.add(tyreRed);
						}
						if (junkWorldEngines.isVase()){
							redLayers.add(vaseRed);
						}
						if (junkWorldEngines.isWaffleIron()){
							redLayers.add(waffleIronRed);
						}
					}

					if (junkWorldEngines.isNonRecyclable()){
						if (junkWorldEngines.isAerosolCan()){
							redLayers.add(aerosolCanRed);
						}
						if (junkWorldEngines.isBrokenBulb()){
							redLayers.add(brokenBulbRed);
						}
						if (junkWorldEngines.isBrokenGlass()){
							redLayers.add(brokenGlassRed);
						}
						if (junkWorldEngines.isChewingGum()){
							redLayers.add(chewingGumRed);
						}
						if (junkWorldEngines.isCigarette()){
							redLayers.add(cigaretteRed);
						}
						if (junkWorldEngines.isDeadBattery()){
							redLayers.add(deadBatteryRed);
						}
						if (junkWorldEngines.isDirtyDiaper()){
							redLayers.add(dirtyDiaperRed);
						}
						if (junkWorldEngines.isInsecticideSpray()){
							redLayers.add(insecticideSprayRed);
						}
						if (junkWorldEngines.isLeftoverCake()){
							redLayers.add(leftoverCakeRed);
						}
						if (junkWorldEngines.isLeftoverChicken()){
							redLayers.add(leftoverChickenRed);
						}
						if (junkWorldEngines.isNail()){
							redLayers.add(nailRed);
						}
						if (junkWorldEngines.isPaintCan()){
							redLayers.add(paintCanRed);
						}
						if (junkWorldEngines.isSyringe()){
							redLayers.add(syringeRed);
						}
						if (junkWorldEngines.isTornPaper()){
							redLayers.add(tornPaperRed);
						}
						if (junkWorldEngines.isUsedMotorOil()){
							redLayers.add(usedMotorOilRed);
						}
					}
				}
			}

			if (junkWorldEngines.isOrange()){
				if (junkWorldEngines.isBiodegradable()){
					if (junkWorldEngines.isAcorn()){
						orangeLayers.add(acornOrange);
					}
					if (junkWorldEngines.isApple()){
						orangeLayers.add(appleOrange);
					}
					if (junkWorldEngines.isBananaPeel()){
						orangeLayers.add(bananaPeelOrange);
					}
					if (junkWorldEngines.isBranch()){
						orangeLayers.add(branchOrange);
					}
					if (junkWorldEngines.isDeadMouse()){
						orangeLayers.add(deadMouseOrange);
					}
					if (junkWorldEngines.isEggShell()){
						orangeLayers.add(eggShellOrange);
					}
					if (junkWorldEngines.isFeather()){
						orangeLayers.add(featherOrange);
					}
					if (junkWorldEngines.isFishBone()){
						orangeLayers.add(fishBoneOrange);
					}
					if (junkWorldEngines.isFlower()){
						orangeLayers.add(flowerOrange);
					}
					if (junkWorldEngines.isGrass()){
						orangeLayers.add(grassOrange);
					}
					if (junkWorldEngines.isHair()){
						orangeLayers.add(hairOrange);
					}
					if (junkWorldEngines.isHay()){
						orangeLayers.add(hayOrange);
					}
					if (junkWorldEngines.isLeaves()){
						orangeLayers.add(leavesOrange);
					}
					if (junkWorldEngines.isManure()){
						orangeLayers.add(manureOrange);
					}
					if (junkWorldEngines.isRoots()){
						orangeLayers.add(rootsOrange);
					}
				}

				if (junkWorldEngines.isRecyclable()){
					if (junkWorldEngines.isBottle()){
						orangeLayers.add(bottleOrange);
					}
					if (junkWorldEngines.isCan()){
						orangeLayers.add(canOrange);
					}
					if (junkWorldEngines.isCardboard()){
						orangeLayers.add(cardboardOrange);
					}
					if (junkWorldEngines.isCerealBox()){
						orangeLayers.add(cerealBoxOrange);
					}
					if (junkWorldEngines.isDirtyShirt()){
						orangeLayers.add(dirtyShirtOrange);
					}
					if (junkWorldEngines.isEnvelope()){
						orangeLayers.add(envelopeOrange);
					}
					if (junkWorldEngines.isFunnel()){
						orangeLayers.add(funnelOrange);
					}
					if (junkWorldEngines.isHanger()){
						orangeLayers.add(hangerOrange);
					}
					if (junkWorldEngines.isNewspaper()){
						orangeLayers.add(newspaperOrange);
					}
					if (junkWorldEngines.isPaper()){
						orangeLayers.add(paperOrange);
					}
					if (junkWorldEngines.isPillBottle()){
						orangeLayers.add(pillBottleOrange);
					}
					if (junkWorldEngines.isPlasticBag()){
						orangeLayers.add(plasticBagOrange);
					}
					if (junkWorldEngines.isTyre()){
						orangeLayers.add(tyreOrange);
					}
					if (junkWorldEngines.isVase()){
						orangeLayers.add(vaseOrange);
					}
					if (junkWorldEngines.isWaffleIron()){
						orangeLayers.add(waffleIronOrange);
					}
				}

				if (junkWorldEngines.isNonRecyclable()){
					if (junkWorldEngines.isAerosolCan()){
						orangeLayers.add(aerosolCanOrange);
					}
					if (junkWorldEngines.isBrokenBulb()){
						orangeLayers.add(brokenBulbOrange);
					}
					if (junkWorldEngines.isBrokenGlass()){
						orangeLayers.add(brokenGlassOrange);
					}
					if (junkWorldEngines.isChewingGum()){
						orangeLayers.add(chewingGumOrange);
					}
					if (junkWorldEngines.isCigarette()){
						orangeLayers.add(cigaretteOrange);
					}
					if (junkWorldEngines.isDeadBattery()){
						orangeLayers.add(deadBatteryOrange);
					}
					if (junkWorldEngines.isDirtyDiaper()){
						orangeLayers.add(dirtyDiaperOrange);
					}
					if (junkWorldEngines.isInsecticideSpray()){
						orangeLayers.add(insecticideSprayOrange);
					}
					if (junkWorldEngines.isLeftoverCake()){
						orangeLayers.add(leftoverCakeOrange);
					}
					if (junkWorldEngines.isLeftoverChicken()){
						orangeLayers.add(leftoverChickenOrange);
					}
					if (junkWorldEngines.isNail()){
						orangeLayers.add(nailOrange);
					}
					if (junkWorldEngines.isPaintCan()){
						orangeLayers.add(paintCanOrange);
					}
					if (junkWorldEngines.isSyringe()){
						orangeLayers.add(syringeOrange);
					}
					if (junkWorldEngines.isTornPaper()){
						orangeLayers.add(tornPaperOrange);
					}
					if (junkWorldEngines.isUsedMotorOil()){
						orangeLayers.add(usedMotorOilOrange);
					}
				}
			}

			if (junkWorldEngines.isYellow()){
				if (junkWorldEngines.isBiodegradable()){
					if (junkWorldEngines.isAcorn()){
						yellowLayers.add(acornYellow);
					}
					if (junkWorldEngines.isApple()){
						yellowLayers.add(appleYellow);
					}
					if (junkWorldEngines.isBananaPeel()){
						yellowLayers.add(bananaPeelYellow);
					}
					if (junkWorldEngines.isBranch()){
						yellowLayers.add(branchYellow);
					}
					if (junkWorldEngines.isDeadMouse()){
						yellowLayers.add(deadMouseYellow);
					}
					if (junkWorldEngines.isEggShell()){
						yellowLayers.add(eggShellYellow);
					}
					if (junkWorldEngines.isFeather()){
						yellowLayers.add(featherYellow);
					}
					if (junkWorldEngines.isFishBone()){
						yellowLayers.add(fishBoneYellow);
					}
					if (junkWorldEngines.isFlower()){
						yellowLayers.add(flowerYellow);
					}
					if (junkWorldEngines.isGrass()){
						yellowLayers.add(grassYellow);
					}
					if (junkWorldEngines.isHair()){
						yellowLayers.add(hairYellow);
					}
					if (junkWorldEngines.isHay()){
						yellowLayers.add(hayYellow);
					}
					if (junkWorldEngines.isLeaves()){
						yellowLayers.add(leavesYellow);
					}
					if (junkWorldEngines.isManure()){
						yellowLayers.add(manureYellow);
					}
					if (junkWorldEngines.isRoots()){
						yellowLayers.add(rootsYellow);
					}
				}

				if (junkWorldEngines.isRecyclable()){
					if (junkWorldEngines.isBottle()){
						yellowLayers.add(bottleYellow);
					}
					if (junkWorldEngines.isCan()){
						yellowLayers.add(canYellow);
					}
					if (junkWorldEngines.isCardboard()){
						yellowLayers.add(cardboardYellow);
					}
					if (junkWorldEngines.isCerealBox()){
						yellowLayers.add(cerealBoxYellow);
					}
					if (junkWorldEngines.isDirtyShirt()){
						yellowLayers.add(dirtyShirtYellow);
					}
					if (junkWorldEngines.isEnvelope()){
						yellowLayers.add(envelopeYellow);
					}
					if (junkWorldEngines.isFunnel()){
						yellowLayers.add(funnelYellow);
					}
					if (junkWorldEngines.isHanger()){
						yellowLayers.add(hangerYellow);
					}
					if (junkWorldEngines.isNewspaper()){
						yellowLayers.add(newspaperYellow);
					}
					if (junkWorldEngines.isPaper()){
						yellowLayers.add(paperYellow);
					}
					if (junkWorldEngines.isPillBottle()){
						yellowLayers.add(pillBottleYellow);
					}
					if (junkWorldEngines.isPlasticBag()){
						yellowLayers.add(plasticBagYellow);
					}
					if (junkWorldEngines.isTyre()){
						yellowLayers.add(tyreYellow);
					}
					if (junkWorldEngines.isVase()){
						yellowLayers.add(vaseYellow);
					}
					if (junkWorldEngines.isWaffleIron()){
						yellowLayers.add(waffleIronYellow);
					}
				}

				if (junkWorldEngines.isNonRecyclable()){
					if (junkWorldEngines.isAerosolCan()){
						yellowLayers.add(aerosolCanYellow);
					}
					if (junkWorldEngines.isBrokenBulb()){
						yellowLayers.add(brokenBulbYellow);
					}
					if (junkWorldEngines.isBrokenGlass()){
						yellowLayers.add(brokenGlassYellow);
					}
					if (junkWorldEngines.isChewingGum()){
						yellowLayers.add(chewingGumYellow);
					}
					if (junkWorldEngines.isCigarette()){
						yellowLayers.add(cigaretteYellow);
					}
					if (junkWorldEngines.isDeadBattery()){
						yellowLayers.add(deadBatteryYellow);
					}
					if (junkWorldEngines.isDirtyDiaper()){
						yellowLayers.add(dirtyDiaperYellow);
					}
					if (junkWorldEngines.isInsecticideSpray()){
						yellowLayers.add(insecticideSprayYellow);
					}
					if (junkWorldEngines.isLeftoverCake()){
						yellowLayers.add(leftoverCakeYellow);
					}
					if (junkWorldEngines.isLeftoverChicken()){
						yellowLayers.add(leftoverChickenYellow);
					}
					if (junkWorldEngines.isNail()){
						yellowLayers.add(nailYellow);
					}
					if (junkWorldEngines.isPaintCan()){
						yellowLayers.add(paintCanYellow);
					}
					if (junkWorldEngines.isSyringe()){
						yellowLayers.add(syringeYellow);
					}
					if (junkWorldEngines.isTornPaper()){
						yellowLayers.add(tornPaperYellow);
					}
					if (junkWorldEngines.isUsedMotorOil()){
						yellowLayers.add(usedMotorOilYellow);
					}
				}
			}

			if (junkWorldEngines.isGreen()){
				if (junkWorldEngines.isBiodegradable()){
					if (junkWorldEngines.isAcorn()){
						greenLayers.add(acornGreen);
					}
					if (junkWorldEngines.isApple()){
						greenLayers.add(appleGreen);
					}
					if (junkWorldEngines.isBananaPeel()){
						greenLayers.add(bananaPeelGreen);
					}
					if (junkWorldEngines.isBranch()){
						greenLayers.add(branchGreen);
					}
					if (junkWorldEngines.isDeadMouse()){
						greenLayers.add(deadMouseGreen);
					}
					if (junkWorldEngines.isEggShell()){
						greenLayers.add(eggShellGreen);
					}
					if (junkWorldEngines.isFeather()){
						greenLayers.add(featherGreen);
					}
					if (junkWorldEngines.isFishBone()){
						greenLayers.add(fishBoneGreen);
					}
					if (junkWorldEngines.isFlower()){
						greenLayers.add(flowerGreen);
					}
					if (junkWorldEngines.isGrass()){
						greenLayers.add(grassGreen);
					}
					if (junkWorldEngines.isHair()){
						greenLayers.add(hairGreen);
					}
					if (junkWorldEngines.isHay()){
						greenLayers.add(hayGreen);
					}
					if (junkWorldEngines.isLeaves()){
						greenLayers.add(leavesGreen);
					}
					if (junkWorldEngines.isManure()){
						greenLayers.add(manureGreen);
					}
					if (junkWorldEngines.isRoots()){
						greenLayers.add(rootsGreen);
					}
				}

				if (junkWorldEngines.isRecyclable()){
					if (junkWorldEngines.isBottle()){
						greenLayers.add(bottleGreen);
					}
					if (junkWorldEngines.isCan()){
						greenLayers.add(canGreen);
					}
					if (junkWorldEngines.isCardboard()){
						greenLayers.add(cardboardGreen);
					}
					if (junkWorldEngines.isCerealBox()){
						greenLayers.add(cerealBoxGreen);
					}
					if (junkWorldEngines.isDirtyShirt()){
						greenLayers.add(dirtyShirtGreen);
					}
					if (junkWorldEngines.isEnvelope()){
						greenLayers.add(envelopeGreen);
					}
					if (junkWorldEngines.isFunnel()){
						greenLayers.add(funnelGreen);
					}
					if (junkWorldEngines.isHanger()){
						greenLayers.add(hangerGreen);
					}
					if (junkWorldEngines.isNewspaper()){
						greenLayers.add(newspaperGreen);
					}
					if (junkWorldEngines.isPaper()){
						greenLayers.add(paperGreen);
					}
					if (junkWorldEngines.isPillBottle()){
						greenLayers.add(pillBottleGreen);
					}
					if (junkWorldEngines.isPlasticBag()){
						greenLayers.add(plasticBagGreen);
					}
					if (junkWorldEngines.isTyre()){
						greenLayers.add(tyreGreen);
					}
					if (junkWorldEngines.isVase()){
						greenLayers.add(vaseGreen);
					}
					if (junkWorldEngines.isWaffleIron()){
						greenLayers.add(waffleIronGreen);
					}
				}

				if (junkWorldEngines.isNonRecyclable()){
					if (junkWorldEngines.isAerosolCan()){
						greenLayers.add(aerosolCanGreen);
					}
					if (junkWorldEngines.isBrokenBulb()){
						greenLayers.add(brokenBulbGreen);
					}
					if (junkWorldEngines.isBrokenGlass()){
						greenLayers.add(brokenGlassGreen);
					}
					if (junkWorldEngines.isChewingGum()){
						greenLayers.add(chewingGumGreen);
					}
					if (junkWorldEngines.isCigarette()){
						greenLayers.add(cigaretteGreen);
					}
					if (junkWorldEngines.isDeadBattery()){
						greenLayers.add(deadBatteryGreen);
					}
					if (junkWorldEngines.isDirtyDiaper()){
						greenLayers.add(dirtyDiaperGreen);
					}
					if (junkWorldEngines.isInsecticideSpray()){
						greenLayers.add(insecticideSprayGreen);
					}
					if (junkWorldEngines.isLeftoverCake()){
						greenLayers.add(leftoverCakeGreen);
					}
					if (junkWorldEngines.isLeftoverChicken()){
						greenLayers.add(leftoverChickenGreen);
					}
					if (junkWorldEngines.isNail()){
						greenLayers.add(nailGreen);
					}
					if (junkWorldEngines.isPaintCan()){
						greenLayers.add(paintCanGreen);
					}
					if (junkWorldEngines.isSyringe()){
						greenLayers.add(syringeGreen);
					}
					if (junkWorldEngines.isTornPaper()){
						greenLayers.add(tornPaperGreen);
					}
					if (junkWorldEngines.isUsedMotorOil()){
						greenLayers.add(usedMotorOilGreen);
					}
				}
			}

			if (junkWorldEngines.isBlue()){
				if (junkWorldEngines.isBiodegradable()){
					if (junkWorldEngines.isAcorn()){
						blueLayers.add(acornBlue);
					}
					if (junkWorldEngines.isApple()){
						blueLayers.add(appleBlue);
					}
					if (junkWorldEngines.isBananaPeel()){
						blueLayers.add(bananaPeelBlue);
					}
					if (junkWorldEngines.isBranch()){
						blueLayers.add(branchBlue);
					}
					if (junkWorldEngines.isDeadMouse()){
						blueLayers.add(deadMouseBlue);
					}
					if (junkWorldEngines.isEggShell()){
						blueLayers.add(eggShellBlue);
					}
					if (junkWorldEngines.isFeather()){
						blueLayers.add(featherBlue);
					}
					if (junkWorldEngines.isFishBone()){
						blueLayers.add(fishBoneBlue);
					}
					if (junkWorldEngines.isFlower()){
						blueLayers.add(flowerBlue);
					}
					if (junkWorldEngines.isGrass()){
						blueLayers.add(grassBlue);
					}
					if (junkWorldEngines.isHair()){
						blueLayers.add(hairBlue);
					}
					if (junkWorldEngines.isHay()){
						blueLayers.add(hayBlue);
					}
					if (junkWorldEngines.isLeaves()){
						blueLayers.add(leavesBlue);
					}
					if (junkWorldEngines.isManure()){
						blueLayers.add(manureBlue);
					}
					if (junkWorldEngines.isRoots()){
						blueLayers.add(rootsBlue);
					}
				}

				if (junkWorldEngines.isRecyclable()){
					if (junkWorldEngines.isBottle()){
						blueLayers.add(bottleBlue);
					}
					if (junkWorldEngines.isCan()){
						blueLayers.add(canBlue);
					}
					if (junkWorldEngines.isCardboard()){
						blueLayers.add(cardboardBlue);
					}
					if (junkWorldEngines.isCerealBox()){
						blueLayers.add(cerealBoxBlue);
					}
					if (junkWorldEngines.isDirtyShirt()){
						blueLayers.add(dirtyShirtBlue);
					}
					if (junkWorldEngines.isEnvelope()){
						blueLayers.add(envelopeBlue);
					}
					if (junkWorldEngines.isFunnel()){
						blueLayers.add(funnelBlue);
					}
					if (junkWorldEngines.isHanger()){
						blueLayers.add(hangerBlue);
					}
					if (junkWorldEngines.isNewspaper()){
						blueLayers.add(newspaperBlue);
					}
					if (junkWorldEngines.isPaper()){
						blueLayers.add(paperBlue);
					}
					if (junkWorldEngines.isPillBottle()){
						blueLayers.add(pillBottleBlue);
					}
					if (junkWorldEngines.isPlasticBag()){
						blueLayers.add(plasticBagBlue);
					}
					if (junkWorldEngines.isTyre()){
						blueLayers.add(tyreBlue);
					}
					if (junkWorldEngines.isVase()){
						blueLayers.add(vaseBlue);
					}
					if (junkWorldEngines.isWaffleIron()){
						blueLayers.add(waffleIronBlue);
					}
				}

				if (junkWorldEngines.isNonRecyclable()){
					if (junkWorldEngines.isAerosolCan()){
						blueLayers.add(aerosolCanBlue);
					}
					if (junkWorldEngines.isBrokenBulb()){
						blueLayers.add(brokenBulbBlue);
					}
					if (junkWorldEngines.isBrokenGlass()){
						blueLayers.add(brokenGlassBlue);
					}
					if (junkWorldEngines.isChewingGum()){
						blueLayers.add(chewingGumBlue);
					}
					if (junkWorldEngines.isCigarette()){
						blueLayers.add(cigaretteBlue);
					}
					if (junkWorldEngines.isDeadBattery()){
						blueLayers.add(deadBatteryBlue);
					}
					if (junkWorldEngines.isDirtyDiaper()){
						blueLayers.add(dirtyDiaperBlue);
					}
					if (junkWorldEngines.isInsecticideSpray()){
						blueLayers.add(insecticideSprayBlue);
					}
					if (junkWorldEngines.isLeftoverCake()){
						blueLayers.add(leftoverCakeBlue);
					}
					if (junkWorldEngines.isLeftoverChicken()){
						blueLayers.add(leftoverChickenBlue);
					}
					if (junkWorldEngines.isNail()){
						blueLayers.add(nailBlue);
					}
					if (junkWorldEngines.isPaintCan()){
						blueLayers.add(paintCanBlue);
					}
					if (junkWorldEngines.isSyringe()){
						blueLayers.add(syringeBlue);
					}
					if (junkWorldEngines.isTornPaper()){
						blueLayers.add(tornPaperBlue);
					}
					if (junkWorldEngines.isUsedMotorOil()){
						blueLayers.add(usedMotorOilBlue);
					}
				}
			}

			if (junkWorldEngines.isPurple()){
				if (junkWorldEngines.isBiodegradable()){
					if (junkWorldEngines.isAcorn()){
						purpleLayers.add(acornPurple);
					}
					if (junkWorldEngines.isApple()){
						purpleLayers.add(applePurple);
					}
					if (junkWorldEngines.isBananaPeel()){
						purpleLayers.add(bananaPeelPurple);
					}
					if (junkWorldEngines.isBranch()){
						purpleLayers.add(branchPurple);
					}
					if (junkWorldEngines.isDeadMouse()){
						purpleLayers.add(deadMousePurple);
					}
					if (junkWorldEngines.isEggShell()){
						purpleLayers.add(eggShellPurple);
					}
					if (junkWorldEngines.isFeather()){
						purpleLayers.add(featherPurple);
					}
					if (junkWorldEngines.isFishBone()){
						purpleLayers.add(fishBonePurple);
					}
					if (junkWorldEngines.isFlower()){
						purpleLayers.add(flowerPurple);
					}
					if (junkWorldEngines.isGrass()){
						purpleLayers.add(grassPurple);
					}
					if (junkWorldEngines.isHair()){
						purpleLayers.add(hairPurple);
					}
					if (junkWorldEngines.isHay()){
						purpleLayers.add(hayPurple);
					}
					if (junkWorldEngines.isLeaves()){
						purpleLayers.add(leavesPurple);
					}
					if (junkWorldEngines.isManure()){
						purpleLayers.add(manurePurple);
					}
					if (junkWorldEngines.isRoots()){
						purpleLayers.add(rootsPurple);
					}
				}

				if (junkWorldEngines.isRecyclable()){
					if (junkWorldEngines.isBottle()){
						purpleLayers.add(bottlePurple);
					}
					if (junkWorldEngines.isCan()){
						purpleLayers.add(canPurple);
					}
					if (junkWorldEngines.isCardboard()){
						purpleLayers.add(cardboardPurple);
					}
					if (junkWorldEngines.isCerealBox()){
						purpleLayers.add(cerealBoxPurple);
					}
					if (junkWorldEngines.isDirtyShirt()){
						purpleLayers.add(dirtyShirtPurple);
					}
					if (junkWorldEngines.isEnvelope()){
						purpleLayers.add(envelopePurple);
					}
					if (junkWorldEngines.isFunnel()){
						purpleLayers.add(funnelPurple);
					}
					if (junkWorldEngines.isHanger()){
						purpleLayers.add(hangerPurple);
					}
					if (junkWorldEngines.isNewspaper()){
						purpleLayers.add(newspaperPurple);
					}
					if (junkWorldEngines.isPaper()){
						purpleLayers.add(paperPurple);
					}
					if (junkWorldEngines.isPillBottle()){
						purpleLayers.add(pillBottlePurple);
					}
					if (junkWorldEngines.isPlasticBag()){
						purpleLayers.add(plasticBagPurple);
					}
					if (junkWorldEngines.isTyre()){
						purpleLayers.add(tyrePurple);
					}
					if (junkWorldEngines.isVase()){
						purpleLayers.add(vasePurple);
					}
					if (junkWorldEngines.isWaffleIron()){
						purpleLayers.add(waffleIronPurple);
					}
				}

				if (junkWorldEngines.isNonRecyclable()){
					if (junkWorldEngines.isAerosolCan()){
						purpleLayers.add(aerosolCanPurple);
					}
					if (junkWorldEngines.isBrokenBulb()){
						purpleLayers.add(brokenBulbPurple);
					}
					if (junkWorldEngines.isBrokenGlass()){
						purpleLayers.add(brokenGlassPurple);
					}
					if (junkWorldEngines.isChewingGum()){
						purpleLayers.add(chewingGumPurple);
					}
					if (junkWorldEngines.isCigarette()){
						purpleLayers.add(cigarettePurple);
					}
					if (junkWorldEngines.isDeadBattery()){
						purpleLayers.add(deadBatteryPurple);
					}
					if (junkWorldEngines.isDirtyDiaper()){
						purpleLayers.add(dirtyDiaperPurple);
					}
					if (junkWorldEngines.isInsecticideSpray()){
						purpleLayers.add(insecticideSprayPurple);
					}
					if (junkWorldEngines.isLeftoverCake()){
						purpleLayers.add(leftoverCakePurple);
					}
					if (junkWorldEngines.isLeftoverChicken()){
						purpleLayers.add(leftoverChickenPurple);
					}
					if (junkWorldEngines.isNail()){
						purpleLayers.add(nailPurple);
					}
					if (junkWorldEngines.isPaintCan()){
						purpleLayers.add(paintCanPurple);
					}
					if (junkWorldEngines.isSyringe()){
						purpleLayers.add(syringePurple);
					}
					if (junkWorldEngines.isTornPaper()){
						purpleLayers.add(tornPaperPurple);
					}
					if (junkWorldEngines.isUsedMotorOil()){
						purpleLayers.add(usedMotorOilPurple);
					}
				}
			}

			if (acornLayer.size != 0){
				trashNameLayers.add(acornLayer);
			}
			if (appleLayer.size != 0){
				trashNameLayers.add(appleLayer);
			}
			if (bananaPeelLayer.size != 0){
				trashNameLayers.add(bananaPeelLayer);
			}
			if (branchLayer.size != 0){
				trashNameLayers.add(branchLayer);
			}
			if (deadMouseLayer.size != 0){
				trashNameLayers.add(deadMouseLayer);
			}
			if (eggShellLayer.size != 0){
				trashNameLayers.add(eggShellLayer);
			}
			if (featherLayer.size != 0){
				trashNameLayers.add(featherLayer);
			}
			if (fishBoneLayer.size != 0){
				trashNameLayers.add(fishBoneLayer);
			}
			if (flowerLayer.size != 0){
				trashNameLayers.add(flowerLayer);
			}
			if (grassLayer.size != 0){
				trashNameLayers.add(grassLayer);
			}
			if (hairLayer.size != 0){
				trashNameLayers.add(hairLayer);
			}
			if (hayLayer.size != 0){
				trashNameLayers.add(hayLayer);
			}
			if (leavesLayer.size != 0){
				trashNameLayers.add(leavesLayer);
			}
			if (manureLayer.size != 0){
				trashNameLayers.add(manureLayer);
			}
			if (rootsLayer.size != 0){
				trashNameLayers.add(rootsLayer);
			}

			if (bottleLayer.size != 0){
				trashNameLayers.add(bottleLayer);
			}
			if (canLayer.size != 0){
				trashNameLayers.add(canLayer);
			}
			if (cardboardLayer.size != 0){
				trashNameLayers.add(cardboardLayer);
			}
			if (cerealBoxLayer.size != 0){
				trashNameLayers.add(cerealBoxLayer);
			}
			if (dirtyShirtLayer.size != 0){
				trashNameLayers.add(dirtyShirtLayer);
			}
			if (envelopeLayer.size != 0){
				trashNameLayers.add(envelopeLayer);
			}
			if (funnelLayer.size != 0){
				trashNameLayers.add(funnelLayer);
			}
			if (hangerLayer.size != 0){
				trashNameLayers.add(hangerLayer);
			}
			if (newspaperLayer.size != 0){
				trashNameLayers.add(newspaperLayer);
			}
			if (paperLayer.size != 0){
				trashNameLayers.add(paperLayer);
			}
			if (pillBottleLayer.size != 0){
				trashNameLayers.add(pillBottleLayer);
			}
			if (plasticBagLayer.size != 0){
				trashNameLayers.add(plasticBagLayer);
			}
			if (tyreLayer.size != 0){
				trashNameLayers.add(tyreLayer);
			}
			if (vaseLayer.size != 0){
				trashNameLayers.add(vaseLayer);
			}
			if (waffleIronLayer.size != 0){
				trashNameLayers.add(waffleIronLayer);
			}

			if (aerosolCanLayer.size != 0){
				trashNameLayers.add(aerosolCanLayer);
			}
			if (brokenBulbLayer.size != 0){
				trashNameLayers.add(brokenBulbLayer);
			}
			if (brokenGlassLayer.size != 0){
				trashNameLayers.add(brokenGlassLayer);
			}
			if (chewingGumLayer.size != 0){
				trashNameLayers.add(chewingGumLayer);
			}
			if (cigaretteLayer.size != 0){
				trashNameLayers.add(cigaretteLayer);
			}
			if (deadBatteryLayer.size != 0){
				trashNameLayers.add(deadBatteryLayer);
			}
			if (dirtyDiaperLayer.size != 0){
				trashNameLayers.add(dirtyDiaperLayer);
			}
			if (insecticideSprayLayer.size != 0){
				trashNameLayers.add(insecticideSprayLayer);
			}
			if (leftoverCakeLayer.size != 0){
				trashNameLayers.add(leftoverCakeLayer);
			}
			if (leftoverChickenLayer.size != 0){
				trashNameLayers.add(leftoverChickenLayer);
			}
			if (nailLayer.size != 0){
				trashNameLayers.add(nailLayer);
			}
			if (paintCanLayer.size != 0){
				trashNameLayers.add(paintCanLayer);
			}
			if (syringeLayer.size != 0){
				trashNameLayers.add(syringeLayer);
			}
			if (tornPaperLayer.size != 0){
				trashNameLayers.add(tornPaperLayer);
			}
			if (usedMotorOilLayer.size != 0){
				trashNameLayers.add(usedMotorOilLayer);
			}

			while (bLayers.contains(null, false)){
				bLayers.removeValue(null, false);
			}
			while (rLayers.contains(null, false)){
				rLayers.removeValue(null, false);
			}
			while (nrLayers.contains(null, false)){
				nrLayers.removeValue(null, false);
			}
			if (bLayers.size != 0){
				trashTypeLayers.add(bLayers);
			}
			if (rLayers.size != 0){
				trashTypeLayers.add(rLayers);
			}
			if (nrLayers.size != 0){
				trashTypeLayers.add(nrLayers);
			}


			while (redLayers.contains(null, false)){
				redLayers.removeValue(null, false);
			}
			while (orangeLayers.contains(null, false)){
				orangeLayers.removeValue(null, false);
			}
			while (yellowLayers.contains(null, false)){
				yellowLayers.removeValue(null, false);
			}
			while (greenLayers.contains(null, false)){
				greenLayers.removeValue(null, false);
			}
			while (blueLayers.contains(null, false)){
				blueLayers.removeValue(null, false);
			}
			while (purpleLayers.contains(null, false)){
				purpleLayers.removeValue(null, false);
			}
			if (redLayers.size != 0){
				trashBagColorLayers.add(redLayers);
			}
			if (orangeLayers.size != 0){
				trashBagColorLayers.add(orangeLayers);
			}
			if (yellowLayers.size != 0){
				trashBagColorLayers.add(yellowLayers);
			}
			if (greenLayers.size != 0){
				trashBagColorLayers.add(greenLayers);
			}
			if (blueLayers.size != 0){
				trashBagColorLayers.add(blueLayers);
			}
			if (purpleLayers.size != 0){
				trashBagColorLayers.add(purpleLayers);
			}

			while (trashNameLayers.contains(null, false)){
				trashNameLayers.removeValue(null, false);
			}
			if (trashNameLayers.size != 0){
				trash.add(trashNameLayers);
			}
			if (trashTypeLayers.size != 0){
				trash.add(trashTypeLayers);
			}
			if (trashBagColorLayers.size != 0){
				trash.add(trashBagColorLayers);
			}

			//			Biodegradable
			acornRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/biodegradableTrash/acorn.png", Texture.class));
			appleRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/biodegradableTrash/apple.png", Texture.class));
			bananaPeelRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/biodegradableTrash/bananaPeel.png", Texture.class));
			branchRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/biodegradableTrash/branch.png", Texture.class));
			deadMouseRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/biodegradableTrash/deadMouse.png", Texture.class));
			eggShellRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/biodegradableTrash/eggShell.png", Texture.class));
			featherRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/biodegradableTrash/feather.png", Texture.class));
			fishBoneRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/biodegradableTrash/fishBone.png", Texture.class));
			flowerRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/biodegradableTrash/flower.png", Texture.class));
			grassRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/biodegradableTrash/grass.png", Texture.class));
			hairRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/biodegradableTrash/hair.png", Texture.class));
			hayRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/biodegradableTrash/hay.png", Texture.class));
			leavesRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/biodegradableTrash/leaves.png", Texture.class));
			manureRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/biodegradableTrash/manure.png", Texture.class));
			rootsRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/biodegradableTrash/roots.png", Texture.class));

			//			Recyclable
			bottleRegionRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/recyclableTrash/bottle.png", Texture.class));
			canRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/recyclableTrash/can.png", Texture.class));
			cardboardRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/recyclableTrash/cardboard.png", Texture.class));
			cerealBoxRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/recyclableTrash/cerealBox.png", Texture.class));
			dirtyShirtRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/recyclableTrash/dirtyShirt.png", Texture.class));
			envelopeRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/recyclableTrash/envelope.png", Texture.class));
			funnelRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/recyclableTrash/funnel.png", Texture.class));
			hangerRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/recyclableTrash/hanger.png", Texture.class));
			newspaperRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/recyclableTrash/newspaper.png", Texture.class));
			paperRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/recyclableTrash/paper.png", Texture.class));
			pillBottleRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/recyclableTrash/pillBottle.png", Texture.class));
			plasticBagRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/recyclableTrash/plasticBag.png", Texture.class));
			tyreRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/recyclableTrash/tyre.png", Texture.class));
			vaseRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/recyclableTrash/vase.png", Texture.class));
			waffleIronRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/recyclableTrash/waffleIron.png", Texture.class));

			//			Non-Recyclable
			aerosolCanRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/nonRecyclableTrash/aerosolCan.png", Texture.class));
			brokenBulbRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/nonRecyclableTrash/brokenBulb.png", Texture.class));
			brokenGlassRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/nonRecyclableTrash/brokenGlass.png", Texture.class));
			chewingGumRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/nonRecyclableTrash/chewingGum.png", Texture.class));
			cigaretteRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/nonRecyclableTrash/cigarette.png", Texture.class));
			deadBatteryRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/nonRecyclableTrash/deadBattery.png", Texture.class));
			dirtyDiaperRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/nonRecyclableTrash/dirtyDiaper.png", Texture.class));
			insecticideSprayRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/nonRecyclableTrash/insecticideSpray.png", Texture.class));
			leftoverCakeRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/nonRecyclableTrash/leftoverCake.png", Texture.class));
			leftoverChickenRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/nonRecyclableTrash/leftoverChicken.png", Texture.class));
			nailRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/nonRecyclableTrash/nail.png", Texture.class));
			paintCanRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/nonRecyclableTrash/paintCan.png", Texture.class));
			syringeRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/nonRecyclableTrash/syringe.png", Texture.class));
			tornPaperRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/nonRecyclableTrash/tornPaper.png", Texture.class));
			usedMotorOilRegion = new TextureRegion(manager.get("gameScreenAssets/trashAssets/nonRecyclableTrash/usedMotorOil.png", Texture.class));

			for (int i = 0; i < 3; i++){
				dumpPopUpsRegions.add(new TextureRegion(manager.get("gameScreenAssets/gamePopUps/dump/dump" + i + ".png", Texture.class)));
			}

			perfectDumpSuccessPopUpsRegions.add(new TextureRegion(manager.get("gameScreenAssets/gamePopUps/perfectDump/perfectFirst.png", Texture.class)));
			perfectDumpSuccessPopUpsRegions.add(new TextureRegion(manager.get("gameScreenAssets/gamePopUps/perfectDump/perfectLast.png", Texture.class)));

			for (int i = 0; i < 9; i++){
				perfectDumpPopUpsRegions.add(new TextureRegion(manager.get("gameScreenAssets/gamePopUps/perfectDumpSuccess/dump" + i + ".png", Texture.class)));
			}


			//			manager.load("gameScreenAssets/gamePopUps/dumpSignal.png", Texture.class);
			//			manager.load("gameScreenAssets/gamePopUps/gameOver.png", Texture.class);
			//			manager.load("gameScreenAssets/gamePopUps/ready.png", Texture.class);
			//			manager.load("gameScreenAssets/gamePopUps/ready0.png", Texture.class);
			//			manager.load("gameScreenAssets/gamePopUps/ready1.png", Texture.class);
			//			manager.load("gameScreenAssets/gamePopUps/ready2.png", Texture.class);
			//			manager.load("gameScreenAssets/gamePopUps/warning0.png", Texture.class);
			//			manager.load("gameScreenAssets/gamePopUps/warning1.png", Texture.class);

			switch (junkWorldEngines.getGameSelection()){
			case 1: {
				currentDumpSignal = new Sprite(manager.get("gameScreenAssets/gamePopUps/ready.png", Texture.class));
			}; break;
			case 2: {
				currentDumpSignal = new Sprite(manager.get("gameScreenAssets/gamePopUps/rounds/round" + jsonValue.getInt("currentRound") + ".png", Texture.class));
			}; break;
			default: break;
			}

			currentDumpSignal.setX(256 - (currentDumpSignal.getWidth() / 2));
			currentDumpSignal.setY(500);

			currentDumpNumSignal = new Sprite(manager.get("gameScreenAssets/gamePopUps/ready0.png", Texture.class));
			currentDumpNumSignal.setX(256 - (currentDumpNumSignal.getWidth() / 2));
			currentDumpNumSignal.setY(420);

			perfectDumpFirstPopUp = new TextureRegion(manager.get("gameScreenAssets/gamePopUps/perfectDump/perfectFirst.png", Texture.class));
			perfectDumpLastPopUp = new TextureRegion(manager.get("gameScreenAssets/gamePopUps/perfectDump/perfectLast.png", Texture.class));
			perfectNumRegions = new Array<TextureRegion>();
			for (int i = 0; i < 10; i++){
				perfectNumRegions.add(new TextureRegion(manager.get("gameScreenAssets/gamePopUps/perfectDump/perfect" + i + ".png", Texture.class)));
			}

			for (int i = 0; i < 10; i++){
				timerNumRegions.add(new TextureRegion(manager.get("gameScreenAssets/inGameMenuAssets/timerAssets/timer" + i + ".png", Texture.class)));
				timerBrightNumRegions.add(new TextureRegion(manager.get("gameScreenAssets/inGameMenuAssets/timerAssets/timerBright" + i + ".png", Texture.class)));
			}

			colonRegion.add(new TextureRegion(manager.get("gameScreenAssets/inGameMenuAssets/timerAssets/colon.png", Texture.class)));
			colonRegion.add(new TextureRegion(manager.get("gameScreenAssets/inGameMenuAssets/timerAssets/colonBright.png", Texture.class)));

			gameOver = new Sprite(manager.get("gameScreenAssets/gamePopUps/gameOver.png", Texture.class));
			gameOver.setScale(gameOverScale);
			gameOver.rotate(.5f);
			currentWarning = new Array<TextureRegion>();
			currentWarning.add(new TextureRegion(manager.get("gameScreenAssets/gamePopUps/warning0.png", Texture.class)));
			currentWarning.add(new TextureRegion(manager.get("gameScreenAssets/gamePopUps/warning1.png", Texture.class)));

			timesUp = new Sprite(manager.get("gameScreenAssets/gamePopUps/timesUp.png", Texture.class));
			bonusRegion = new TextureRegion(manager.get("gameScreenAssets/gamePopUps/bonus.png", Texture.class));
			noBonusRegion = new TextureRegion(manager.get("gameScreenAssets/gamePopUps/noBonus.png", Texture.class));

			highestPerfectDumpCombo.add(0);

			for (int i = 0; i < 6; i++){
				augmentedBurstRegion.add(new TextureRegion(manager.get("gameAnimations/In-Game Items/Augmented Burst/" + i + ".png", Texture.class)));
			}

			for (int i = 0; i < 4; i++){
				swiftCanPerfectDump.add(false);
				delaySpeedRush.add((long) 0);
				ifCanIsDull.add(true);
				previousDullCanColor.add(0);
			}

			capacitors1Layer.ensureCapacity(40);
			capacitors2Layer.ensureCapacity(40);
			capacitors3Layer.ensureCapacity(40);
			capacitors4Layer.ensureCapacity(40);
			trashLayer.ensureCapacity(50);
			initialSpeed.ensureCapacity(50);

			roundSuccess = new Sprite(manager.get("gameScreenAssets/gamePopUps/roundSuccess.png", Texture.class));
			roundFailed = new Sprite(manager.get("gameScreenAssets/gamePopUps/roundFailed.png", Texture.class));
			jobCompleted = new Sprite(manager.get("gameScreenAssets/gamePopUps/jobCompleted.png", Texture.class));
			jobFailed = new Sprite(manager.get("gameScreenAssets/gamePopUps/jobFailed.png", Texture.class));
			goalSuccess = new Sprite(manager.get("gameScreenAssets/gamePopUps/goalSuccess.png", Texture.class));

			levelDownArray = new Array<TextureRegion>();
			levelUpArray = new Array<TextureRegion>();
			newHighScore = new Array<TextureRegion>();
			newBestTime = new Array<TextureRegion>();
			for (int i = 0; i < 5;  i++){
				levelDownArray.add(new TextureRegion(manager.get("gameScreenAssets/gamePopUps/levelDown/" + i + ".png", Texture.class)));
			}
			for (int i = 0; i < 5;  i++){
				levelUpArray.add(new TextureRegion(manager.get("gameScreenAssets/gamePopUps/levelUp/" + i + ".png", Texture.class)));
			}
			for (int i = 0; i < 5;  i++){
				newHighScore.add(new TextureRegion(manager.get("gameScreenAssets/gamePopUps/highScore/" + i + ".png", Texture.class)));
			}
			for (int i = 0; i < 8;  i++){
				newBestTime.add(new TextureRegion(manager.get("gameScreenAssets/gamePopUps/bestTime/" + i + ".png", Texture.class)));
			}

			trashCan1Properties.setTrashCanColor(junkWorldEngines.getPreviousTrashCan1Color());
			trashCan2Properties.setTrashCanColor(junkWorldEngines.getPreviousTrashCan2Color());
			trashCan3Properties.setTrashCanColor(junkWorldEngines.getPreviousTrashCan3Color());
			trashCan4Properties.setTrashCanColor(junkWorldEngines.getPreviousTrashCan4Color());

			trashCan1Properties.setTrashCanType(junkWorldEngines.getPreviousTrashCan1Type());
			trashCan2Properties.setTrashCanType(junkWorldEngines.getPreviousTrashCan2Type());
			trashCan3Properties.setTrashCanType(junkWorldEngines.getPreviousTrashCan3Type());
			trashCan4Properties.setTrashCanType(junkWorldEngines.getPreviousTrashCan4Type());

			gamePalette.setFirstPalette(junkWorldEngines.getPreviousPalette1());
			gamePalette.setSecondPalette(junkWorldEngines.getPreviousPalette2());
			gamePalette.setThirdPalette(junkWorldEngines.getPreviousPalette3());
			gamePalette.setFourthPalette(junkWorldEngines.getPreviousPalette4());

			explodingCans = new Array<TextureRegion>();

			for (int i = 0; i < 3; i++){
				explodingCans.add(new TextureRegion(manager.get("gameAnimations/jobComplete/canExplosion" + i + ".png", Texture.class)));
			}
			//				
			//			CREATE TRASH LAYERS here!!!    ^^^      TODO 
		}
	}

	@Override
	public void render(float delta) {
		if (!isLoading){
			Gdx.gl.glClearColor(0, 0, 0, 0);
			Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
			screenConfigs();
			batch.setProjectionMatrix(camera.combined);
			camera.update();
			absolutelyMustRun();

			switch (gameState){
			case RUNNING: {
				setRectangles();
				addActorListener();
				checkHUDStates();
				setTrashCanState();	
				threadDelays();
				updateTrashCanPics();
				moveableTrashCan();
				delayTrashSpawn();
				updateGameEngine();
				checkTrashLayers();

				setActorBounds();
				drawBatches();

				if (junkWorldEngines.getGameMode() == 0){
					junkWorldEngines.getTutorialStage().getViewport().setCamera(camera);

					if (dumpStarter){
						if (moveTrash){
							moveTrash = false;
							delayTrashSpawn = TimeUtils.millis();
						}
						junkWorldEngines.getTutorialStage().draw();
						junkWorldEngines.getTutorialStage().act();
						Gdx.input.setInputProcessor(junkWorldEngines.getTutorialStage());
					}
				}
				else {
					trashCanUI.getViewport().setCamera(camera);
					if (dumpStarter){
						if (moveTrash){
							moveTrash = false;
							delayTrashSpawn = TimeUtils.millis();
						}

						trashCanUI.act();
						trashCanUI.draw();
						Gdx.input.setInputProcessor(trashCanUI);
					}
				}

				gdxInputs();
			}; break;
			case UNPAUSABLE: {
				unPausable();
			}; break;
			case PAUSE: {
				gamePaused();
			}; break;
			case STARTED: {
				gameStarted();
			}; break;
			case GAMEOVER: {
				gameGameOver();
			}; break;
			case TIMES_UP: {
				gameTimesUp();
			}; break;
			case ROUND_SUCCESS: {
				gameRoundSuccess();
			}; break;
			case ROUND_FAILED: {
				gameRoundFailed();
			}; break;
			case JOB_COMPLETE: {
				gameJobComplete();
			}; break;
			case JOB_FAILED: {
				gameJobFailed();
			}; break;
			case GOAL_SUCCESS: {
				gameGoalSuccess();
			}; break;
			default: break;
			}
		}
	}

	//	Rendering TODO

	private void absolutelyMustRun() {
		if (TimeUtils.millis() - delayPopUps >= 100){
			delayPopUps = TimeUtils.millis();
			if (currentPopAnim + 1 >= 5){
				currentPopAnim = 0;
			} else currentPopAnim += 1;
		}

		if (TimeUtils.millis() - delayPopAnim2 >= 100){
			delayPopAnim2 = TimeUtils.millis();
			if (currentPopAnim2 + 1 >= 8){
				currentPopAnim2 = 0;
			} else currentPopAnim2 += 1;
		}
	}

	private void gameStarted() {
		if (manager.update()){
			playMusic();
			createTextures();
			createTextures2();
			gameState = GAMESTATE.RUNNING;
			delayReadyToggle = TimeUtils.millis();
		}
		else {
			Gdx.gl.glClearColor(0, 0, 0, 0);
			Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

			batch.begin();
			batch.draw(manager.get("splashScreenAssets/splashscreen.png", Texture.class), 0, 0);
			batch.draw(manager.get("mainMenuAssets/loadingAssets/blackShader.png", Texture.class),0, 0, 512, 800);
			batch.draw(manager.get("mainMenuAssets/loadingAssets/loadingCircularSigns.png", Texture.class), 64, 208);
			JunkWorld.loading.draw(batch);
			JunkWorld.loading.rotate(10);
			progress.draw(batch, String.valueOf(Math.round(manager.getProgress() * 100)) + "%", 240, 200);
			batch.end();
		}
	}

	private void gamePaused() {
		drawBatches();

		if (dumpStarter){
			if (moveTrash){
				moveTrash = false;
				delayTrashSpawn = TimeUtils.millis();
			}
		}

		batch.begin();
		batch.draw(mainMenuToggledRegion, mainMenuToggledLayer.x, mainMenuToggledLayer.y, mainMenuToggledLayer.width, mainMenuToggledLayer.height);
		batch.draw(resumeGameRegion, resumeGameLayer.x, resumeGameLayer.y, resumeGameLayer.width, resumeGameLayer.height);
		batch.draw(quitGameRegion, quitGameLayer.x, quitGameLayer.y, quitGameLayer.width, quitGameLayer.height);
		if (quitClicked){
			batch.draw(mainMenuQuitToggledRegion, mainMenuQuitToggledLayer.x, mainMenuQuitToggledLayer.y, mainMenuQuitToggledLayer.width, mainMenuQuitToggledLayer.height);
			batch.draw(quitYesRegion, quitYesLayer.x, quitYesLayer.y, quitYesLayer.width, quitYesLayer.height);
			batch.draw(quitNoRegion, quitNoLayer.x, quitNoLayer.y, quitNoLayer.width, quitNoLayer.height);
			batch.draw(quitNotifierRegion, quitNotifierLayer.x, quitNotifierLayer.y, quitNotifierLayer.width, quitNotifierLayer.height);
		}
		batch.end();
		loadAds();
		batch.flush();

		if (!quitClicked){
			resumeGame.setBounds(resumeGameLayer.x, resumeGameLayer.y, resumeGameLayer.width, resumeGameLayer.height);
			quitGame.setBounds(quitGameLayer.x, quitGameLayer.y, quitGameLayer.width, quitGameLayer.height);
			mainMenuUI.act();
			mainMenuUI.draw();
			mainMenuUI.getViewport().setCamera(camera);
			Gdx.input.setInputProcessor(mainMenuUI);
		}
		else {
			quitGameYes.setBounds(quitYesLayer.x, quitYesLayer.y, quitYesLayer.width, quitYesLayer.height);
			quitGameNo.setBounds(quitNoLayer.x, quitNoLayer.y, quitNoLayer.width, quitNoLayer.height);
			quitUI.act();
			quitUI.draw();
			quitUI.getViewport().setCamera(camera);
			Gdx.input.setInputProcessor(quitUI);
		}
	}

	private void gameGameOver() {
		switch (junkWorldEngines.getGameMode()){
		case 1: {
			for (Rectangle trash : trashLayer){
				trashLayer.removeValue(trash, true);
			}
			for (Float speed : initialSpeed){
				initialSpeed.removeValue(speed, true);
			}

			drawBatches();
			gameOver.setScale(gameOverScale);
			gameOver.setOrigin(gameOver.getWidth() / 2, gameOver.getHeight() / 2);
			gameOver.setPosition(256 - (gameOver.getWidth() / 2), gameOverY - (gameOver.getHeight() / 2));

			if (gameOverScale >= 1f){
				gameOverScale = 1f;
				gameOver.setRotation(0);
				if (TimeUtils.millis() - delayGameOver >= 1000){
					if (gameOverY < 700){
						gameOverY += 8;
					}
					else {
						if (displayStatistics){
							delayDisplayStatistics = TimeUtils.millis();
							displayStatistics = false;
						}
					}
				}
			}
			else {
				gameOverScale += 0.01f;
				gameOver.rotate(9f);
				delayGameOver = TimeUtils.millis();
			}

			batch.begin();
			batch.draw(manager.get("mainMenuAssets/loadingAssets/blackShader2.png", Texture.class), 0, 0, 512, 800);	
			gameOver.draw(batch);
			if (gameOverScale >= 1f){
				if (gameOverY >= 700 && !displayStatistics){
					if (TimeUtils.millis() - delayDisplayStatistics >= 500){
						score2.draw(batch, "Game Results", 176, 650);

						highestPerfectDumpFontLabel.draw(batch, "Highest Perfect Dumped Combo: ", 30, 600);
						totalPerfectDumpFontLabel.draw(batch, "Total Perfect Dump: ", 30, 560);
						totalDumpFontLabel.draw(batch, "Total Dump: ", 30, 520);
						totalUnofficialDumpFontLabel.draw(batch, "Total Unofficial Dump: " , 30, 480);

						highestPerfectDumpFont.draw(batch, String.valueOf(highestPerfectDumpCombo.peek()), 384, 600);
						totalPerfectDumpFont.draw(batch, String.valueOf(perfectDump), 260, 560);
						totalDumpFont.draw(batch, String.valueOf(dump), 170, 520);
						totalUnofficialDumpFont.draw(batch, String.valueOf(unofficialDump) , 287, 480);
					}
					if (TimeUtils.millis() - delayDisplayStatistics >= 1000){
						for (int i = 0; i < rating; i++){
							batch.draw(manager.get("gameScreenAssets/gamePopUps/star.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 390, 48, 48);
						}
						for (int i = 0; i < 10; i++){
							batch.draw(manager.get("gameScreenAssets/gamePopUps/starOutline.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 390, 48, 48);
						}
						batch.draw(manager.get("gameScreenAssets/gamePopUps/rating.png", Texture.class), 256 - 100, 400 - 64);
					}
					if (TimeUtils.millis() - delayDisplayStatistics >= 1500){
						totalScore.draw(batch, "Total score: " + String.valueOf(totalScoreNum) + "(+" + String.valueOf((perfectDump * 150) + (dump * 75) + (unofficialDump * 38)) + " bonus)", 75, 320);
						if (toggleHighestScore){
							batch.draw(newHighScore.get(currentPopAnim), 256 - 125, 250);
						}
					}
					if (TimeUtils.millis() - delayDisplayStatistics >= 2000){

						goldFont.draw(batch, "JC Earned: " , 30, 200);
						greenFont.draw(batch, "XP Earned: ", 30, 160);

						goldFont.draw(batch, String.valueOf(jsonValue.getInt("junkCoins")) + "(+" + String.valueOf((int)((perfectDump * (perfectJC / (3/2))) + (dump * (dumpJC / (3/2))) +
								(unofficialDump * (unoffDumpJC / (3/2))) + (highestPerfectDumpCombo.peek() * ((perfectJC / (3/2)) / 2)))) + ")", 170, 200);
						greenFont.draw(batch, String.valueOf(jsonValue.getInt("currentXP")) + "(+" + String.valueOf((int)((perfectDump * (perfectXP / (3/2))) + (dump * (dumpXP / (3/2))) +
								(unofficialDump * (unoffDumpXP / (3/2))) + (highestPerfectDumpCombo.peek() * (perfectXP / (3/2)) / 2))) + ")", 150, 160);

						batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar2.png", Texture.class), 350, 140);
						batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar1.png", Texture.class), 350, 140, 
								((jsonValue.getInt("currentXP") - previousXpUp) * 128) / (xpUp - previousXpUp), 32);
						batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar0.png", Texture.class), 350, 140);
						othersFont.draw(batch, String.valueOf(jsonValue.getInt("level")), 437, 164);

						batch.draw(manager.get("buttons/mainMenuButton.png", Texture.class), 70, 60, 160, 54);

						if (toggleLevelUp) {
							batch.draw(levelUpArray.get(currentPopAnim), 256 - 110, 5);
						}
						batch.draw(manager.get("mainMenuAssets/junkWorldCoins.png", Texture.class), 140, 178, 32, 32);

						batch.draw(manager.get("buttons/playAgainButton.png", Texture.class), playAgainLayer.x, playAgainLayer.y, playAgainLayer.width, playAgainLayer.height);
						batch.draw(manager.get("buttons/mainMenuButton.png", Texture.class), mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width,
								mainMenuScreenLayer.height);
						mainMenuScreen.setBounds(mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width, mainMenuScreenLayer.height);
						playAgain.setBounds(playAgainLayer.x, playAgainLayer.y, playAgainLayer.width, playAgainLayer.height);
					}
				}
			}
			batch.end();
			loadAds();

			if (gameOverScale >= 1f){
				if (TimeUtils.millis() - delayDisplayStatistics >= 2000){
					gameOverUI.act();
					gameOverUI.draw();
					Gdx.input.setInputProcessor(gameOverUI);
					gameOverUI.getViewport().setCamera(camera);
				}
			}

			if (delayPlayAgain != 0){
				if (TimeUtils.millis() - delayPlayAgain >= 100){
					adjustDifficulty();
					isLoading = true;
					disposeAssets();
					profileFile.writeString(jsonValue.toString(), false);
					this.dispose();
					game.setScreen(new GameScreen(game, trashCan1Properties, trashCan2Properties, trashCan3Properties,
							trashCan4Properties, manager, junkWorldEngines, gamePalette, currentItemOfSlot1,
							currentItemOfSlot2, currentItemOfSlot3, currentItemOfSlot4, currentItemOfSlot5,
							currentItemOfSlot6));
				}
			}
		}; break;
		case 2: {
			for (Rectangle trash : trashLayer){
				trashLayer.removeValue(trash, true);
			}
			for (Float speed : initialSpeed){
				initialSpeed.removeValue(speed, true);
			}

			drawBatches();
			gameOver.setScale(gameOverScale);
			gameOver.setOrigin(gameOver.getWidth() / 2, gameOver.getHeight() / 2);
			gameOver.setPosition(256 - (gameOver.getWidth() / 2), gameOverY - (gameOver.getHeight() / 2));

			if (gameOverScale >= 1f){
				gameOverScale = 1f;
				gameOver.setRotation(0);
				if (TimeUtils.millis() - delayGameOver >= 1000){
					if (gameOverY < 700){
						gameOverY += 8;
					}
					else {
						if (displayStatistics){
							delayDisplayStatistics = TimeUtils.millis();
							displayStatistics = false;
						}
					}
				}
			}
			else {
				gameOverScale += 0.01f;
				gameOver.rotate(9f);
				delayGameOver = TimeUtils.millis();
			}

			batch.begin();
			batch.draw(manager.get("mainMenuAssets/loadingAssets/blackShader2.png", Texture.class), 0, 0, 512, 800);	
			gameOver.draw(batch);
			if (gameOverScale >= 1f){
				if (gameOverY >= 700 && !displayStatistics){
					if (TimeUtils.millis() - delayDisplayStatistics >= 500){
						score2.draw(batch, "Game Results", 176, 650);

						highestPerfectDumpFontLabel.draw(batch, "Highest Perfect Dumped Combo: ", 30, 620 - 20);
						totalPerfectDumpFontLabel.draw(batch, "Total Perfect Dump (+): ", 30, 590 - 20);
						totalDumpFontLabel.draw(batch, "Total Dump (-): ", 30, 560 - 20);
						totalUnofficialDumpFontLabel.draw(batch, "Total Unofficial Dump (-): " , 30, 530 - 20);
						totalUnofficialDumpFontLabel.draw(batch, "Total Bad Dump (-): " , 30, 500 - 20);
						totalUnofficialDumpFontLabel.draw(batch, "Total Not Dump (-): " , 30, 470 - 20);

						highestPerfectDumpFont.draw(batch, String.valueOf(highestPerfectDumpCombo.peek()), 384, 620 - 20);
						totalPerfectDumpFont.draw(batch, String.valueOf(perfectDump), 290, 590 - 20);
						totalDumpFont.draw(batch, String.valueOf(dump), 200, 560 - 20);
						totalUnofficialDumpFont.draw(batch, String.valueOf(unofficialDump), 317, 530 - 20);
						totalDumpFont.draw(batch, String.valueOf(badDump), 243, 500 - 20);
						totalUnofficialDumpFont.draw(batch, String.valueOf(notDumped) , 243, 470 - 20);
					}
					if (TimeUtils.millis() - delayDisplayStatistics >= 1000){
						for (int i = 0; i < rating; i++){
							batch.draw(manager.get("gameScreenAssets/gamePopUps/star.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 400 - 30, 48, 48);
						}
						for (int i = 0; i < 10; i++){
							batch.draw(manager.get("gameScreenAssets/gamePopUps/starOutline.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 400 - 30, 48, 48);
						}
						batch.draw(manager.get("gameScreenAssets/gamePopUps/rating.png", Texture.class), 256 - 100, 400 - 64);
					}
					if (TimeUtils.millis() - delayDisplayStatistics >= 1500){
						totalScore.draw(batch, "Total score: " + String.valueOf(totalScoreNum), 75, 300);
						if (toggleHighestScore){
							batch.draw(newHighScore.get(currentPopAnim), 256 - 125, 230);
						}
					}
					if (TimeUtils.millis() - delayDisplayStatistics >= 2000){

						goldFont.draw(batch, "JC Earned: " , 30, 200);
						greenFont.draw(batch, "XP Earned: ", 30, 160);

						goldFont.draw(batch, String.valueOf(jsonValue.getInt("junkCoins")) + "(+" + String.valueOf((int)((perfectDump * (perfectJC / (3/2))) + (dump * (dumpJC / (3/2))) +
								(unofficialDump * (unoffDumpJC / (3/2))) + (highestPerfectDumpCombo.peek() * ((perfectJC / (3/2)) / 2)))) + ")", 170, 200);
						greenFont.draw(batch, String.valueOf(jsonValue.getInt("currentXP")) + "(+" + String.valueOf((int)((perfectDump * (perfectXP / (3/2))) + (dump * (dumpXP / (3/2))) +
								(unofficialDump * (unoffDumpXP / (3/2))) + (highestPerfectDumpCombo.peek() * (perfectXP / (3/2)) / 2))) + ")", 150, 160);

						batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar2.png", Texture.class), 350, 140);
						batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar1.png", Texture.class), 350, 140, 
								((jsonValue.getInt("currentXP") - previousXpUp) * 128) / (xpUp - previousXpUp), 32);
						batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar0.png", Texture.class), 350, 140);
						othersFont.draw(batch, String.valueOf(jsonValue.getInt("level")), 437, 164);

						batch.draw(manager.get("buttons/mainMenuButton.png", Texture.class), 70, 60, 160, 54);

						if (toggleLevelUp) {
							batch.draw(levelUpArray.get(currentPopAnim), 256 - 110, 5);
						}
						batch.draw(manager.get("mainMenuAssets/junkWorldCoins.png", Texture.class), 140, 178, 32, 32);

						batch.draw(manager.get("buttons/playAgainButton.png", Texture.class), playAgainLayer.x, playAgainLayer.y, playAgainLayer.width, playAgainLayer.height);
						batch.draw(manager.get("buttons/mainMenuButton.png", Texture.class), mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width,
								mainMenuScreenLayer.height);
						mainMenuScreen.setBounds(mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width, mainMenuScreenLayer.height);
						playAgain.setBounds(playAgainLayer.x, playAgainLayer.y, playAgainLayer.width, playAgainLayer.height);
					}
				}
			}
			batch.end();
			loadAds();

			if (gameOverScale >= 1f){
				if (TimeUtils.millis() - delayDisplayStatistics >= 2000){
					gameOverUI.act();
					gameOverUI.draw();
					Gdx.input.setInputProcessor(gameOverUI);
					gameOverUI.getViewport().setCamera(camera);
				}
			}

			if (delayPlayAgain != 0){
				if (TimeUtils.millis() - delayPlayAgain >= 100){
					adjustDifficulty();
					isLoading = true;
					disposeAssets();
					profileFile.writeString(jsonValue.toString(), false);
					this.dispose();
					game.setScreen(new GameScreen(game, trashCan1Properties, trashCan2Properties, trashCan3Properties,
							trashCan4Properties, manager, junkWorldEngines, gamePalette, currentItemOfSlot1,
							currentItemOfSlot2, currentItemOfSlot3, currentItemOfSlot4, currentItemOfSlot5,
							currentItemOfSlot6));
				}
			}
		}; break;
		case 3: {
			for (Rectangle trash : trashLayer){
				trashLayer.removeValue(trash, true);
			}
			for (Float speed : initialSpeed){
				initialSpeed.removeValue(speed, true);
			}

			drawBatches();
			gameOver.setScale(gameOverScale);
			gameOver.setOrigin(gameOver.getWidth() / 2, gameOver.getHeight() / 2);
			gameOver.setPosition(256 - (gameOver.getWidth() / 2), gameOverY - (gameOver.getHeight() / 2));

			if (gameOverScale >= 1f){
				gameOverScale = 1f;
				gameOver.setRotation(0);
				if (TimeUtils.millis() - delayGameOver >= 1000){
					if (gameOverY < 700){
						gameOverY += 8;
					}
					else {
						if (displayStatistics){
							delayDisplayStatistics = TimeUtils.millis();
							displayStatistics = false;
						}
					}
				}
			}
			else {
				gameOverScale += 0.01f;
				gameOver.rotate(9f);
				delayGameOver = TimeUtils.millis();
			}

			batch.begin();
			batch.draw(manager.get("mainMenuAssets/loadingAssets/blackShader2.png", Texture.class), 0, 0, 512, 800);	
			gameOver.draw(batch);
			if (gameOverScale >= 1f){
				if (gameOverY >= 700 && !displayStatistics){
					if (TimeUtils.millis() - delayDisplayStatistics >= 500){
						score2.draw(batch, "Game Results", 176, 650);

						highestPerfectDumpFontLabel.draw(batch, "Highest Perfect Dumped Combo: ", 30, 600);
						totalPerfectDumpFontLabel.draw(batch, "Total Perfect Dump: ", 30, 560);
						totalDumpFontLabel.draw(batch, "Total Dump: ", 30, 520);
						totalUnofficialDumpFontLabel.draw(batch, "Total Unofficial Dump: " , 30, 480);
						totalUnofficialDumpFontLabel.draw(batch, "Time: " , 30, 460 - 20);

						highestPerfectDumpFont.draw(batch, String.valueOf(highestPerfectDumpCombo.peek()), 384, 600);
						totalPerfectDumpFont.draw(batch, String.valueOf(perfectDump), 260, 560);
						totalDumpFont.draw(batch, String.valueOf(dump), 170, 520);
						totalUnofficialDumpFont.draw(batch, String.valueOf(unofficialDump) , 287, 480);
						totalUnofficialDumpFont.draw(batch, String.valueOf(minutes) + ":" + String.valueOf(seconds) , 90, 460 - 20);

						if (toggleNewRecord){
							batch.draw(newBestTime.get(currentPopAnim2), 512 - 350, 402);
						}
					}
					if (TimeUtils.millis() - delayDisplayStatistics >= 1000){
						for (int i = 0; i < rating; i++){
							batch.draw(manager.get("gameScreenAssets/gamePopUps/star.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 400 - 45, 48, 48);
						}
						for (int i = 0; i < 10; i++){
							batch.draw(manager.get("gameScreenAssets/gamePopUps/starOutline.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 400 - 45, 48, 48);
						}
						batch.draw(manager.get("gameScreenAssets/gamePopUps/rating.png", Texture.class), 256 - 100, 400 - 64 - 35);
					}
					if (TimeUtils.millis() - delayDisplayStatistics >= 1500){
						totalScore.draw(batch, "Total score: " + String.valueOf(totalScoreNum) + "(+" + String.valueOf((perfectDump * 80) + (dump * 40) + (unofficialDump * 20)) + " bonus)", 75, 320);
						if (toggleHighestScore){
							batch.draw(newHighScore.get(currentPopAnim), 256 - 125, 250);
						}
					}
					if (TimeUtils.millis() - delayDisplayStatistics >= 2000){

						goldFont.draw(batch, "JC Earned: " , 30, 200);
						greenFont.draw(batch, "XP Earned: ", 30, 160);

						goldFont.draw(batch, String.valueOf(jsonValue.getInt("junkCoins")) + "(+" + String.valueOf((int)((perfectDump * (perfectJC / (3/2))) + (dump * (dumpJC / (3/2))) +
								(unofficialDump * (unoffDumpJC / (3/2))) + (highestPerfectDumpCombo.peek() * ((perfectJC / (3/2)) / 2)))) + ")", 170, 200);
						greenFont.draw(batch, String.valueOf(jsonValue.getInt("currentXP")) + "(+" + String.valueOf((int)((perfectDump * (perfectXP / (3/2))) + (dump * (dumpXP / (3/2))) +
								(unofficialDump * (unoffDumpXP / (3/2))) + (highestPerfectDumpCombo.peek() * (perfectXP / (3/2)) / 2))) + ")", 150, 160);

						batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar2.png", Texture.class), 350, 140);
						batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar1.png", Texture.class), 350, 140, 
								((jsonValue.getInt("currentXP") - previousXpUp) * 128) / (xpUp - previousXpUp), 32);
						batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar0.png", Texture.class), 350, 140);
						othersFont.draw(batch, String.valueOf(jsonValue.getInt("level")), 437, 164);

						batch.draw(manager.get("buttons/mainMenuButton.png", Texture.class), 70, 60, 160, 54);

						if (toggleLevelUp) {
							batch.draw(levelUpArray.get(currentPopAnim), 256 - 110, 5);
						}
						batch.draw(manager.get("mainMenuAssets/junkWorldCoins.png", Texture.class), 140, 178, 32, 32);

						batch.draw(manager.get("buttons/playAgainButton.png", Texture.class), playAgainLayer.x, playAgainLayer.y, playAgainLayer.width, playAgainLayer.height);
						batch.draw(manager.get("buttons/mainMenuButton.png", Texture.class), mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width,
								mainMenuScreenLayer.height);
						mainMenuScreen.setBounds(mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width, mainMenuScreenLayer.height);
						playAgain.setBounds(playAgainLayer.x, playAgainLayer.y, playAgainLayer.width, playAgainLayer.height);
					}
				}
			}
			batch.end();
			loadAds();

			if (gameOverScale >= 1f){
				if (TimeUtils.millis() - delayDisplayStatistics >= 2000){
					gameOverUI.act();
					gameOverUI.draw();
					Gdx.input.setInputProcessor(gameOverUI);
					gameOverUI.getViewport().setCamera(camera);
				}
			}

			if (delayPlayAgain != 0){
				if (TimeUtils.millis() - delayPlayAgain >= 100){
					adjustDifficulty();
					isLoading = true;
					disposeAssets();
					profileFile.writeString(jsonValue.toString(), false);
					this.dispose();
					game.setScreen(new GameScreen(game, trashCan1Properties, trashCan2Properties, trashCan3Properties,
							trashCan4Properties, manager, junkWorldEngines, gamePalette, currentItemOfSlot1,
							currentItemOfSlot2, currentItemOfSlot3, currentItemOfSlot4, currentItemOfSlot5,
							currentItemOfSlot6));
				}
			}

		}; break;
		default: break;
		}
	}

	private void gameTimesUp() {
		for (Rectangle trash : trashLayer){
			trashLayer.removeValue(trash, true);
		}
		for (Float speed : initialSpeed){
			initialSpeed.removeValue(speed, true);
		}

		drawBatches();
		timesUp.setScale(gameOverScale);
		timesUp.setOrigin(timesUp.getWidth() / 2, timesUp.getHeight() / 2);
		timesUp.setPosition(256 - (timesUp.getWidth() / 2), gameOverY - (timesUp.getHeight() / 2));

		if (gameOverScale >= 1f){
			gameOverScale = 1f;
			timesUp.setRotation(0);
			if (TimeUtils.millis() - delayGameOver >= 1000){
				if (gameOverY < 700){
					gameOverY += 8;
				}
				else {
					if (displayStatistics){
						delayDisplayStatistics = TimeUtils.millis();
						displayStatistics = false;
					}
				}
			}
		}
		else {
			gameOverScale += 0.01f;
			timesUp.rotate(9f);
			delayGameOver = TimeUtils.millis();
		}

		batch.begin();
		batch.draw(manager.get("mainMenuAssets/loadingAssets/blackShader2.png", Texture.class), 0, 0, 512, 800);	
		timesUp.draw(batch);
		if (gameOverScale >= 1f){
			if (gameOverY >= 700 && !displayStatistics){
				if (TimeUtils.millis() - delayDisplayStatistics >= 500){
					score2.draw(batch, "Game Results", 176, 650);

					highestPerfectDumpFontLabel.draw(batch, "Highest Perfect Dumped Combo: ", 30, 600);
					totalPerfectDumpFontLabel.draw(batch, "Total Perfect Dump: ", 30, 560);
					totalDumpFontLabel.draw(batch, "Total Dump: ", 30, 520);
					totalUnofficialDumpFontLabel.draw(batch, "Total Unofficial Dump: " , 30, 480);

					highestPerfectDumpFont.draw(batch, String.valueOf(highestPerfectDumpCombo.peek()), 384, 600);
					totalPerfectDumpFont.draw(batch, String.valueOf(perfectDump), 260, 560);
					totalDumpFont.draw(batch, String.valueOf(dump), 170, 520);
					totalUnofficialDumpFont.draw(batch, String.valueOf(unofficialDump) , 287, 480);
				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 1000){
					for (int i = 0; i < rating; i++){
						batch.draw(manager.get("gameScreenAssets/gamePopUps/star.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 390, 48, 48);
					}
					for (int i = 0; i < 10; i++){
						batch.draw(manager.get("gameScreenAssets/gamePopUps/starOutline.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 390, 48, 48);
					}
					batch.draw(manager.get("gameScreenAssets/gamePopUps/rating.png", Texture.class), 256 - 100, 400 - 64);
				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 1500){
					totalScore.draw(batch, "Total score: " + String.valueOf(totalScoreNum) + "(+" + String.valueOf((perfectDump * 200) + (dump * 100) + (unofficialDump * 50)) + " bonus)", 75, 320);
					if (toggleHighestScore){
						batch.draw(newHighScore.get(currentPopAnim), 256 - 125, 250);
					}
				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 2000){

					goldFont.draw(batch, "JC Earned: " , 30, 200);
					greenFont.draw(batch, "XP Earned: ", 30, 160);

					goldFont.draw(batch, String.valueOf(jsonValue.getInt("junkCoins")) + "(+" + String.valueOf((int)((perfectDump * perfectJC) + (dump * dumpJC) + (unofficialDump * unoffDumpJC) +
							(highestPerfectDumpCombo.peek() * (perfectJC / 2)))) + ")", 170, 200);
					greenFont.draw(batch, String.valueOf(jsonValue.getInt("currentXP")) + "(+" + String.valueOf((int)((perfectDump * perfectXP) + (dump * dumpXP) + (unofficialDump * unoffDumpXP) +
							(highestPerfectDumpCombo.peek() * (perfectXP / 2)))) + ")", 150, 160);

					batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar2.png", Texture.class), 350, 140);
					batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar1.png", Texture.class), 350, 140, 
							((jsonValue.getInt("currentXP") - previousXpUp) * 128) / (xpUp - previousXpUp), 32);
					batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar0.png", Texture.class), 350, 140);
					othersFont.draw(batch, String.valueOf(jsonValue.getInt("level")), 437, 164);

					batch.draw(manager.get("buttons/mainMenuButton.png", Texture.class), 70, 60, 160, 54);

					if (toggleLevelUp) {
						batch.draw(levelUpArray.get(currentPopAnim), 256 - 110, 5);
					}
					batch.draw(manager.get("mainMenuAssets/junkWorldCoins.png", Texture.class), 140, 178, 32, 32);

					batch.draw(manager.get("buttons/playAgainButton.png", Texture.class), playAgainLayer.x, playAgainLayer.y, playAgainLayer.width, playAgainLayer.height);
					batch.draw(manager.get("buttons/mainMenuButton.png", Texture.class), mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width,
							mainMenuScreenLayer.height);
					mainMenuScreen.setBounds(mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width, mainMenuScreenLayer.height);
					playAgain.setBounds(playAgainLayer.x, playAgainLayer.y, playAgainLayer.width, playAgainLayer.height);
				}
			}
		}
		batch.end();
		loadAds();

		if (gameOverScale >= 1f){
			if (TimeUtils.millis() - delayDisplayStatistics >= 2000){
				gameOverUI.act();
				gameOverUI.draw();
				Gdx.input.setInputProcessor(gameOverUI);
				gameOverUI.getViewport().setCamera(camera);
			}
		}

		if (delayPlayAgain != 0){
			if (TimeUtils.millis() - delayPlayAgain >= 100){
				adjustDifficulty();
				isLoading = true;
				disposeAssets();
				profileFile.writeString(jsonValue.toString(), false);
				this.dispose();
				game.setScreen(new GameScreen(game, trashCan1Properties, trashCan2Properties, trashCan3Properties,
						trashCan4Properties, manager, junkWorldEngines, gamePalette, currentItemOfSlot1,
						currentItemOfSlot2, currentItemOfSlot3, currentItemOfSlot4, currentItemOfSlot5,
						currentItemOfSlot6));
			}
		}
	}

	private void gameRoundSuccess() {
		for (Rectangle trash : trashLayer){
			trashLayer.removeValue(trash, true);
		}
		for (Float speed : initialSpeed){
			initialSpeed.removeValue(speed, true);
		}

		drawBatches();
		roundSuccess.setScale(gameOverScale);
		roundSuccess.setOrigin(roundSuccess.getWidth() / 2, roundSuccess.getHeight() / 2);
		roundSuccess.setPosition(256 - (roundSuccess.getWidth() / 2), gameOverY - (roundSuccess.getHeight() / 2));

		if (gameOverScale >= 1f){
			gameOverScale = 1f;
			roundSuccess.setRotation(0);
			if (TimeUtils.millis() - delayGameOver >= 1000){
				if (gameOverY < 700){
					gameOverY += 8;
				}
				else {
					if (displayStatistics){
						delayDisplayStatistics = TimeUtils.millis();
						displayStatistics = false;
					}
				}
			}
		}
		else {
			gameOverScale += 0.01f;
			roundSuccess.rotate(9f);
			delayGameOver = TimeUtils.millis();
		}

		batch.begin();
		batch.draw(manager.get("mainMenuAssets/loadingAssets/blackShader2.png", Texture.class), 0, 0, 512, 800);	
		roundSuccess.draw(batch);
		if (gameOverScale >= 1f){
			if (gameOverY >= 700 && !displayStatistics){
				if (TimeUtils.millis() - delayDisplayStatistics >= 500){
					score2.draw(batch, "Round: " + String.valueOf(jsonValue.getInt("currentRound") - 1), 185, 650);
				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 1000){
					for (int i = 0; i < rating; i++){
						batch.draw(manager.get("gameScreenAssets/gamePopUps/star.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 400, 48, 48);
					}
					for (int i = 0; i < 10; i++){
						batch.draw(manager.get("gameScreenAssets/gamePopUps/starOutline.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 400, 48, 48);
					}
					batch.draw(manager.get("gameScreenAssets/gamePopUps/rating.png", Texture.class), 256 - 100, 400 - 64);
				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 1500){
				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 2000){
					batch.draw(manager.get("buttons/changeTrashCansButton.png", Texture.class), 256 - 150, 120);
					batch.draw(manager.get("buttons/nextRoundButton.png", Texture.class), 270, 60, 160, 54);
					batch.draw(manager.get("buttons/mainMenuButton.png", Texture.class), mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width,
							mainMenuScreenLayer.height);
					changeTrashCans.setBounds(256 - 150, 120, 300, 60);
					mainMenuScreen.setBounds(mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width, mainMenuScreenLayer.height);
					playAgain.setBounds(270, 60, 160, 54);
				}
			}
		}
		batch.end();
		loadAds();

		if (gameOverScale >= 1f){
			if (TimeUtils.millis() - delayDisplayStatistics >= 2000){
				gameOverUI.act();
				gameOverUI.draw();
				Gdx.input.setInputProcessor(gameOverUI);
				gameOverUI.getViewport().setCamera(camera);
			}
		}

		if (delayPlayAgain != 0){
			if (TimeUtils.millis() - delayPlayAgain >= 100){
				isLoading = true;
				disposeAssets();
				profileFile.writeString(jsonValue.toString(), false);
				this.dispose();
				game.setScreen(new GameScreen(game, trashCan1Properties, trashCan2Properties, trashCan3Properties,
						trashCan4Properties, manager, junkWorldEngines, gamePalette, currentItemOfSlot1,
						currentItemOfSlot2, currentItemOfSlot3, currentItemOfSlot4, currentItemOfSlot5,
						currentItemOfSlot6));
			}
		}
	}

	private void gameRoundFailed() {
		for (Rectangle trash : trashLayer){
			trashLayer.removeValue(trash, true);
		}
		for (Float speed : initialSpeed){
			initialSpeed.removeValue(speed, true);
		}

		drawBatches();
		roundFailed.setScale(gameOverScale);
		roundFailed.setOrigin(roundFailed.getWidth() / 2, roundFailed.getHeight() / 2);
		roundFailed.setPosition(256 - (roundFailed.getWidth() / 2), gameOverY - (roundFailed.getHeight() / 2));

		if (gameOverScale >= 1f){
			gameOverScale = 1f;
			roundFailed.setRotation(0);
			if (TimeUtils.millis() - delayGameOver >= 1000){
				if (gameOverY < 700){
					gameOverY += 8;
				}
				else {
					if (displayStatistics){
						delayDisplayStatistics = TimeUtils.millis();
						displayStatistics = false;
					}
				}
			}
		}
		else {
			gameOverScale += 0.01f;
			roundFailed.rotate(9f);
			delayGameOver = TimeUtils.millis();
		}

		batch.begin();
		batch.draw(manager.get("mainMenuAssets/loadingAssets/blackShader2.png", Texture.class), 0, 0, 512, 800);	
		roundFailed.draw(batch);
		if (gameOverScale >= 1f){
			if (gameOverY >= 700 && !displayStatistics){
				if (TimeUtils.millis() - delayDisplayStatistics >= 500){
				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 1000){
					if (jsonValue.getInt("triesLeft") == 3){
						batch.draw(manager.get("profileAssets/triesLeft/0.png", Texture.class), 256 - (200 / 2),  360, 200, 40);
					}
					else if (jsonValue.getInt("triesLeft") == 2){
						batch.draw(manager.get("profileAssets/triesLeft/1.png", Texture.class), 256 - (200 / 2),  360, 200, 40);
					}
					else if (jsonValue.getInt("triesLeft") == 1){
						batch.draw(manager.get("profileAssets/triesLeft/2.png", Texture.class), 256 - (200 / 2),  360, 200, 40);
					}
				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 1500){

				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 2000){
					batch.draw(manager.get("buttons/changeTrashCansButton.png", Texture.class), 256 - 150, 120);
					batch.draw(manager.get("buttons/playAgainButton.png", Texture.class), 270, 60, 160, 54);
					batch.draw(manager.get("buttons/mainMenuButton.png", Texture.class), mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width,
							mainMenuScreenLayer.height);
					changeTrashCans.setBounds(256 - 150, 120, 300, 60);
					mainMenuScreen.setBounds(mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width, mainMenuScreenLayer.height);
					playAgain.setBounds(270, 60, 160, 54);
				}
			}
		}
		batch.end();
		loadAds();

		if (gameOverScale >= 1f){
			if (TimeUtils.millis() - delayDisplayStatistics >= 2000){
				gameOverUI.act();
				gameOverUI.draw();
				Gdx.input.setInputProcessor(gameOverUI);
				gameOverUI.getViewport().setCamera(camera);
			}
		}

		if (delayPlayAgain != 0){
			if (TimeUtils.millis() - delayPlayAgain >= 100){
				adjustDifficulty();
				isLoading = true;
				disposeAssets();
				profileFile.writeString(jsonValue.toString(), false);
				this.dispose();
				game.setScreen(new GameScreen(game, trashCan1Properties, trashCan2Properties, trashCan3Properties,
						trashCan4Properties, manager, junkWorldEngines, gamePalette, currentItemOfSlot1,
						currentItemOfSlot2, currentItemOfSlot3, currentItemOfSlot4, currentItemOfSlot5,
						currentItemOfSlot6));
			}
		}
	}

	private void gameJobComplete() {
		for (Rectangle trash : trashLayer){
			trashLayer.removeValue(trash, true);
		}
		for (Float speed : initialSpeed){
			initialSpeed.removeValue(speed, true);
		}

		jsonValue.get("currentJob").set("none");

		drawBatches();
		jobCompleted.setScale(gameOverScale);
		jobCompleted.setOrigin(jobCompleted.getWidth() / 2, jobCompleted.getHeight() / 2);
		jobCompleted.setPosition(256 - (jobCompleted.getWidth() / 2), gameOverY - (jobCompleted.getHeight() / 2));

		if (gameOverScale >= 1f){
			gameOverScale = 1f;
			jobCompleted.setRotation(0);
			if (TimeUtils.millis() - delayGameOver >= 1000){
				if (gameOverY < 700){
					gameOverY += 8;
				}
				else {
					if (displayStatistics){
						delayDisplayStatistics = TimeUtils.millis();
						delayApplause = TimeUtils.millis();
						displayStatistics = false;
					}
				}
			}
		}
		else {
			gameOverScale += 0.01f;
			jobCompleted.rotate(9f);
			delayGameOver = TimeUtils.millis();
		}

		batch.begin();
		batch.draw(manager.get("mainMenuAssets/loadingAssets/blackShader2.png", Texture.class), 0, 0, 512, 800);	
		jobCompleted.draw(batch);
		if (gameOverScale >= 1f){
			if (gameOverY >= 700 && !displayStatistics){
				if (TimeUtils.millis() - delayDisplayStatistics >= 500){
					score2.draw(batch, "Job Results", 176, 650);

					drawJobSuccessAnim();

					highestPerfectDumpFontLabel.draw(batch, "Highest Perfect Dumped Combo: ", 30, 600);
					totalPerfectDumpFontLabel.draw(batch, "Total Perfect Dump: ", 30, 560);
					totalDumpFontLabel.draw(batch, "Total Dump: ", 30, 520);
					totalUnofficialDumpFontLabel.draw(batch, "Total Unofficial Dump: " , 30, 480);

					highestPerfectDumpFont.draw(batch, String.valueOf(jsonValue.getInt("jobHighestPerfectCombo")), 384, 600);
					totalPerfectDumpFont.draw(batch, String.valueOf(jsonValue.getInt("jobTotalPerfectDump")), 260, 560);
					totalDumpFont.draw(batch, String.valueOf(jsonValue.getInt("jobTotalDump")), 170, 520);
					totalUnofficialDumpFont.draw(batch, String.valueOf(jsonValue.getInt("jobTotalUnofficialDump")) , 287, 480);
				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 1000){
					for (int i = 0; i < rating; i++){
						batch.draw(manager.get("gameScreenAssets/gamePopUps/star.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 390, 48, 48);
					}
					for (int i = 0; i < 10; i++){
						batch.draw(manager.get("gameScreenAssets/gamePopUps/starOutline.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 390, 48, 48);
					}
					batch.draw(manager.get("gameScreenAssets/gamePopUps/rating.png", Texture.class), 256 - 100, 400 - 64);

					for (int i = 0; i < averageRating(jsonValue.get("jobRoundRatings").asFloatArray()); i++){
						batch.draw(manager.get("gameScreenAssets/gamePopUps/star.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 280, 48, 48);
					}
					for (int i = 0; i < 10; i++){
						batch.draw(manager.get("gameScreenAssets/gamePopUps/starOutline.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 280, 48, 48);
					}
					batch.draw(manager.get("gameScreenAssets/gamePopUps/overallRating.png", Texture.class), 56, 226);
				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 1500){
					goldFont.draw(batch, "JC Earned: " , 30, 200);
					greenFont.draw(batch, "XP Earned: ", 30, 160);

					switch (jsonValue.getInt("triesLeft")){
					case 0: {
						timeLeftFont.draw(batch, String.valueOf(jsonValue.getInt("junkCoins")) + "(-" + String.valueOf((jsonValue.getInt("fee") * 2) / 5) + ")", 170, 200);
						timeLeftFont.draw(batch, String.valueOf(jsonValue.getInt("currentXP")) + "(-" + String.valueOf(
								(int)((((jsonValue.getInt("jobTotalPerfectDump") * perfectXP) + (jsonValue.getInt("jobTotalDump") * dumpXP) +
										(jsonValue.getInt("jobTotalUnofficialDump") * unoffDumpXP) * 1) / 5) + (jsonValue.getInt("jobTotalNotDumped") * (perfectXP * 2)))) + ")", 150, 160);
					}; break;
					case 1: {
						goldFont.draw(batch, String.valueOf(jsonValue.getInt("junkCoins")) + "(+" + String.valueOf(((jsonValue.getInt("fee") * 5) / 5)) + ")", 170, 200);
						greenFont.draw(batch, String.valueOf(jsonValue.getInt("currentXP")) + "(+" + String.valueOf((int)((jsonValue.getInt("jobTotalPerfectDump") * perfectXP) + (jsonValue.getInt("jobTotalDump") * dumpXP) +
								(jsonValue.getInt("jobTotalUnofficialDump") * unoffDumpXP) + (((jsonValue.getInt("jobHighestPerfectCombo") * (perfectXP)) * 1) / 3))) + ")", 150, 160);
					}; break;
					case 2: {
						goldFont.draw(batch, String.valueOf(jsonValue.getInt("junkCoins")) + "(+" + String.valueOf(((int)((float)jsonValue.getInt("fee") * 6.5f) / 5)) + ")", 170, 200);
						greenFont.draw(batch, String.valueOf(jsonValue.getInt("currentXP")) + "(+" + String.valueOf((int)((jsonValue.getInt("jobTotalPerfectDump") * perfectXP) + (jsonValue.getInt("jobTotalDump") * dumpXP) +
								(jsonValue.getInt("jobTotalUnofficialDump") * unoffDumpXP) + (((jsonValue.getInt("jobHighestPerfectCombo") * (perfectXP)) * 2) / 3))) + ")", 150, 160);
					}; break;
					case 3: {
						goldFont.draw(batch, String.valueOf(jsonValue.getInt("junkCoins")) + "(+" + String.valueOf(((jsonValue.getInt("fee") * 8) / 5)) + ")", 170, 200);
						greenFont.draw(batch, String.valueOf(jsonValue.getInt("currentXP")) + "(+" + String.valueOf((int)((jsonValue.getInt("jobTotalPerfectDump") * perfectXP) + (jsonValue.getInt("jobTotalDump") * dumpXP) +
								(jsonValue.getInt("jobTotalUnofficialDump") * unoffDumpXP) + (((jsonValue.getInt("jobHighestPerfectCombo") * (perfectXP)) * 3) / 3))) + ")", 150, 160);
					}; break;
					default: break;
					}
					
					System.out.println(jsonValue.getInt("jobTotalPerfectDump") + " " + perfectXP + " " + jsonValue.getInt("jobTotalDump") + " " + dumpXP + " " + jsonValue.getInt("jobTotalUnofficialDump") + " " + unoffDumpXP + " " + (((jsonValue.getInt("jobHighestPerfectCombo") * (perfectXP)) * 3) / 3));
				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 2000){
					batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar2.png", Texture.class), 350, 140);
					batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar1.png", Texture.class), 350, 140, 
							((jsonValue.getInt("currentXP") - previousXpUp) * 128) / (xpUp - previousXpUp), 32);
					batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar0.png", Texture.class), 350, 140);
					othersFont.draw(batch, String.valueOf(jsonValue.getInt("level")), 437, 164);

					batch.draw(manager.get("buttons/mainMenuButton.png", Texture.class), 70, 60, 160, 54);

					if (toggleLevelUp) {
						batch.draw(levelUpArray.get(currentPopAnim), 256 - 110, 5);
					}
					else if (toggleLevelDown) {
						batch.draw(levelDownArray.get(currentPopAnim), 256 - 110, 5);
					}

					batch.draw(manager.get("mainMenuAssets/junkWorldCoins.png", Texture.class), 140, 178, 32, 32);
					batch.draw(manager.get("buttons/mainMenuButton.png", Texture.class), mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width,
							mainMenuScreenLayer.height);
					mainMenuScreen.setBounds(mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width, mainMenuScreenLayer.height);
				}
			}
		}
		batch.end();
		loadAds();

		if (gameOverScale >= 1f){
			if (TimeUtils.millis() - delayDisplayStatistics >= 2000){
				gameOverUI.act();
				gameOverUI.draw();
				Gdx.input.setInputProcessor(gameOverUI);
				gameOverUI.getViewport().setCamera(camera);
			}
		}
	}

	private void gameJobFailed() {
		for (Rectangle trash : trashLayer){
			trashLayer.removeValue(trash, true);
		}
		for (Float speed : initialSpeed){
			initialSpeed.removeValue(speed, true);
		}

		jsonValue.get("currentJob").set("none");

		drawBatches();
		jobFailed.setScale(gameOverScale);
		jobFailed.setOrigin(jobFailed.getWidth() / 2, jobFailed.getHeight() / 2);
		jobFailed.setPosition(256 - (jobFailed.getWidth() / 2), gameOverY - (jobFailed.getHeight() / 2));

		if (gameOverScale >= 1f){
			gameOverScale = 1f;
			jobFailed.setRotation(0);
			if (TimeUtils.millis() - delayGameOver >= 1000){
				if (gameOverY < 700){
					gameOverY += 8;
				}
				else {
					if (displayStatistics){
						delayDisplayStatistics = TimeUtils.millis();
						displayStatistics = false;
					}
				}
			}
		}
		else {
			gameOverScale += 0.01f;
			jobFailed.rotate(9f);
			delayGameOver = TimeUtils.millis();
		}

		batch.begin();
		batch.draw(manager.get("mainMenuAssets/loadingAssets/blackShader2.png", Texture.class), 0, 0, 512, 800);	
		jobFailed.draw(batch);
		if (gameOverScale >= 1f){
			if (gameOverY >= 700 && !displayStatistics){
				if (TimeUtils.millis() - delayDisplayStatistics >= 500){
					score2.draw(batch, "Job Results", 176, 650);

					highestPerfectDumpFontLabel.draw(batch, "Highest Perfect Dumped Combo: ", 30, 600);
					totalPerfectDumpFontLabel.draw(batch, "Total Perfect Dump: ", 30, 560);
					totalDumpFontLabel.draw(batch, "Total Dump: ", 30, 520);
					totalUnofficialDumpFontLabel.draw(batch, "Total Unofficial Dump: " , 30, 480);

					highestPerfectDumpFont.draw(batch, String.valueOf(jsonValue.getInt("jobHighestPerfectCombo")), 384, 600);
					totalPerfectDumpFont.draw(batch, String.valueOf(jsonValue.getInt("jobTotalPerfectDump")), 260, 560);
					totalDumpFont.draw(batch, String.valueOf(jsonValue.getInt("jobTotalDump")), 170, 520);
					totalUnofficialDumpFont.draw(batch, String.valueOf(jsonValue.getInt("jobTotalUnofficialDump")) , 287, 480);
				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 1000){
					for (int i = 0; i < rating; i++){
						batch.draw(manager.get("gameScreenAssets/gamePopUps/star.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 390, 48, 48);
					}
					for (int i = 0; i < 10; i++){
						batch.draw(manager.get("gameScreenAssets/gamePopUps/starOutline.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 390, 48, 48);
					}
					batch.draw(manager.get("gameScreenAssets/gamePopUps/rating.png", Texture.class), 256 - 100, 400 - 64);

					for (int i = 0; i < averageRating(jsonValue.get("jobRoundRatings").asFloatArray()); i++){
						batch.draw(manager.get("gameScreenAssets/gamePopUps/star.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 280, 48, 48);
					}
					for (int i = 0; i < 10; i++){
						batch.draw(manager.get("gameScreenAssets/gamePopUps/starOutline.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 280, 48, 48);
					}
					batch.draw(manager.get("gameScreenAssets/gamePopUps/overallRating.png", Texture.class), 56, 226);
				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 1500){
					goldFont.draw(batch, "JC Earned: " , 30, 200);
					greenFont.draw(batch, "XP Earned: ", 30, 160);

					switch (jsonValue.getInt("triesLeft")){
					case 0: {
						timeLeftFont.draw(batch, String.valueOf(jsonValue.getInt("junkCoins")) + "(-" + String.valueOf((jsonValue.getInt("fee") * 2) / 5) + ")", 170, 200);
						timeLeftFont.draw(batch, String.valueOf(jsonValue.getInt("currentXP")) + "(-" + String.valueOf(((((jsonValue.getInt("jobTotalPerfectDump") * perfectXP) + (jsonValue.getInt("jobTotalDump") * dumpXP) +
								(jsonValue.getInt("jobTotalUnofficialDump") * unoffDumpXP) * 1) / 5) + (jsonValue.getInt("jobTotalNotDumped") * (perfectXP * 2)))) + ")", 150, 160);
					}; break;
					case 1: {
						goldFont.draw(batch, String.valueOf(jsonValue.getInt("junkCoins")) + "(+" + String.valueOf((jsonValue.getInt("fee") * 5) / 5) + ")", 170, 200);
						greenFont.draw(batch, String.valueOf(jsonValue.getInt("currentXP")) + "(+" + String.valueOf(
								(int)(((jsonValue.getInt("jobTotalPerfectDump") * perfectXP) + (jsonValue.getInt("jobTotalDump") * dumpXP) +
										(jsonValue.getInt("jobTotalUnofficialDump")) + (((jsonValue.getInt("jobHighestPerfectCombo") * (perfectXP)) * 1) / 3)))) + ")", 150, 160);
					}; break;
					case 2: {
						goldFont.draw(batch, String.valueOf(jsonValue.getInt("junkCoins")) + "(+" + String.valueOf((jsonValue.getInt("fee") * 5) / 4) + ")", 170, 200);
						greenFont.draw(batch, String.valueOf(jsonValue.getInt("currentXP")) + "(+" + String.valueOf(
								(int)(((jsonValue.getInt("jobTotalPerfectDump") * perfectXP) + (jsonValue.getInt("jobTotalDump") * dumpXP) +
										(jsonValue.getInt("jobTotalUnofficialDump")) + (((jsonValue.getInt("jobHighestPerfectCombo") * (perfectXP)) * 2) / 3)))) + ")", 150, 160);
					}; break;
					case 3: {
						goldFont.draw(batch, String.valueOf(jsonValue.getInt("junkCoins")) + "(+" + String.valueOf((jsonValue.getInt("fee") * 3) / 2) + ")", 170, 200);
						greenFont.draw(batch, String.valueOf(jsonValue.getInt("currentXP")) + "(+" + String.valueOf(
								(int)(((jsonValue.getInt("jobTotalPerfectDump") * perfectXP) + (jsonValue.getInt("jobTotalDump") * dumpXP) +
										(jsonValue.getInt("jobTotalUnofficialDump")) + (((jsonValue.getInt("jobHighestPerfectCombo") * (perfectXP)) * 3) / 3)))) + ")", 150, 160);
					}; break;
					default: break;
					}
				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 2000){
					batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar2.png", Texture.class), 350, 140);
					batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar1.png", Texture.class), 350, 140, 
							((jsonValue.getInt("currentXP") - previousXpUp) * 128) / (xpUp - previousXpUp), 32);
					batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar0.png", Texture.class), 350, 140);
					othersFont.draw(batch, String.valueOf(jsonValue.getInt("level")), 437, 164);

					batch.draw(manager.get("buttons/mainMenuButton.png", Texture.class), 70, 60, 160, 54);

					if (toggleLevelUp) {
						batch.draw(levelUpArray.get(currentPopAnim), 256 - 110, 5);
					}
					else if (toggleLevelDown) {
						batch.draw(levelDownArray.get(currentPopAnim), 256 - 110, 5);
					}

					batch.draw(manager.get("mainMenuAssets/junkWorldCoins.png", Texture.class), 140, 178, 32, 32);
					batch.draw(manager.get("buttons/mainMenuButton.png", Texture.class), mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width,
							mainMenuScreenLayer.height);
					mainMenuScreen.setBounds(mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width, mainMenuScreenLayer.height);
				}
			}
		}
		batch.end();
		loadAds();


		if (gameOverScale >= 1f){
			if (TimeUtils.millis() - delayDisplayStatistics >= 2000){
				gameOverUI.act();
				gameOverUI.draw();
				Gdx.input.setInputProcessor(gameOverUI);
				gameOverUI.getViewport().setCamera(camera);
			}
		}
	}

	private void gameGoalSuccess() {
		for (Rectangle trash : trashLayer){
			trashLayer.removeValue(trash, true);
		}
		for (Float speed : initialSpeed){
			initialSpeed.removeValue(speed, true);
		}

		drawBatches();
		goalSuccess.setScale(gameOverScale);
		goalSuccess.setOrigin(goalSuccess.getWidth() / 2, goalSuccess.getHeight() / 2);
		goalSuccess.setPosition(256 - (goalSuccess.getWidth() / 2), gameOverY - (goalSuccess.getHeight() / 2));

		if (gameOverScale >= 1f){
			gameOverScale = 1f;
			goalSuccess.setRotation(0);
			if (TimeUtils.millis() - delayGameOver >= 1000){
				if (gameOverY < 700){
					gameOverY += 8;
				}
				else {
					if (displayStatistics){
						delayDisplayStatistics = TimeUtils.millis();
						displayStatistics = false;
					}
				}
			}
		}
		else {
			gameOverScale += 0.01f;
			goalSuccess.rotate(9f);
			delayGameOver = TimeUtils.millis();
		}

		batch.begin();
		batch.draw(manager.get("mainMenuAssets/loadingAssets/blackShader2.png", Texture.class), 0, 0, 512, 800);	
		goalSuccess.draw(batch);
		if (gameOverScale >= 1f){
			if (gameOverY >= 700 && !displayStatistics){
				if (TimeUtils.millis() - delayDisplayStatistics >= 500){
					score2.draw(batch, "Game Results", 176, 650);

					highestPerfectDumpFontLabel.draw(batch, "Highest Perfect Dumped Combo: ", 30, 620 - 20);
					totalPerfectDumpFontLabel.draw(batch, "Total Perfect Dump (+): ", 30, 590 - 20);
					totalDumpFontLabel.draw(batch, "Total Dump (-): ", 30, 560 - 20);
					totalUnofficialDumpFontLabel.draw(batch, "Total Unofficial Dump (-): " , 30, 530 - 20);
					totalUnofficialDumpFontLabel.draw(batch, "Total Bad Dump (-): " , 30, 500 - 20);
					totalUnofficialDumpFontLabel.draw(batch, "Total Not Dump (-): " , 30, 470 - 20);

					highestPerfectDumpFont.draw(batch, String.valueOf(highestPerfectDumpCombo.peek()), 384, 620 - 20);
					totalPerfectDumpFont.draw(batch, String.valueOf(perfectDump), 290, 590 - 20);
					totalDumpFont.draw(batch, String.valueOf(dump), 200, 560 - 20);
					totalUnofficialDumpFont.draw(batch, String.valueOf(unofficialDump), 317, 530 - 20);
					totalDumpFont.draw(batch, String.valueOf(badDump), 243, 500 - 20);
					totalUnofficialDumpFont.draw(batch, String.valueOf(notDumped) , 243, 470 - 20);
				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 1000){
					for (int i = 0; i < rating; i++){
						batch.draw(manager.get("gameScreenAssets/gamePopUps/star.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 400 - 30, 48, 48);
					}
					for (int i = 0; i < 10; i++){
						batch.draw(manager.get("gameScreenAssets/gamePopUps/starOutline.png", Texture.class), 256 - ((48 * 10) / 2) + (i * 48), 400 - 30, 48, 48);
					}
					batch.draw(manager.get("gameScreenAssets/gamePopUps/rating.png", Texture.class), 256 - 100, 400 - 64 - 20);
				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 1500){
					totalScore.draw(batch, "Total score: " + String.valueOf(totalScoreNum) + "(-" + String.valueOf((badDump * 800) + (notDumped * 1200)) + " bonus)", 75, 300);
					if (toggleHighestScore){
						batch.draw(newHighScore.get(currentPopAnim), 256 - 125, 230);
					}
				}
				if (TimeUtils.millis() - delayDisplayStatistics >= 2000){

					goldFont.draw(batch, "JC Earned: " , 30, 200);
					greenFont.draw(batch, "XP Earned: ", 30, 160);

					goldFont.draw(batch, String.valueOf(jsonValue.getInt("junkCoins")) + "(+" + String.valueOf((int)((perfectDump * perfectJC) + (dump * dumpJC) + (unofficialDump * unoffDumpJC) +
							(highestPerfectDumpCombo.peek() * (perfectJC / 2)))) + ")", 170, 200);
					greenFont.draw(batch, String.valueOf(jsonValue.getInt("currentXP")) + "(+" + String.valueOf((int)((perfectDump * perfectXP) + (dump * dumpXP) + (unofficialDump * unoffDumpXP) +
							(highestPerfectDumpCombo.peek() * (perfectXP / 2)))) + ")", 150, 160);

					batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar2.png", Texture.class), 350, 140);
					batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar1.png", Texture.class), 350, 140, 
							((jsonValue.getInt("currentXP") - previousXpUp) * 128) / (xpUp - previousXpUp), 32);
					batch.draw(manager.get("singlePlayerAssets/JunkWorld Map/miscellaneous/levelBar0.png", Texture.class), 350, 140);
					othersFont.draw(batch, String.valueOf(jsonValue.getInt("level")), 437, 164);

					batch.draw(manager.get("buttons/mainMenuButton.png", Texture.class), 70, 60, 160, 54);

					if (toggleLevelUp) {
						batch.draw(levelUpArray.get(currentPopAnim), 256 - 110, 5);
					}
					batch.draw(manager.get("mainMenuAssets/junkWorldCoins.png", Texture.class), 140, 178, 32, 32);

					batch.draw(manager.get("buttons/playAgainButton.png", Texture.class), playAgainLayer.x, playAgainLayer.y, playAgainLayer.width, playAgainLayer.height);
					batch.draw(manager.get("buttons/mainMenuButton.png", Texture.class), mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width,
							mainMenuScreenLayer.height);
					mainMenuScreen.setBounds(mainMenuScreenLayer.x, mainMenuScreenLayer.y, mainMenuScreenLayer.width, mainMenuScreenLayer.height);
					playAgain.setBounds(playAgainLayer.x, playAgainLayer.y, playAgainLayer.width, playAgainLayer.height);
				}
			}
		}
		batch.end();
		loadAds();

		if (gameOverScale >= 1f){
			if (TimeUtils.millis() - delayDisplayStatistics >= 2000){
				gameOverUI.act();
				gameOverUI.draw();
				Gdx.input.setInputProcessor(gameOverUI);
				gameOverUI.getViewport().setCamera(camera);
			}
		}

		if (delayPlayAgain != 0){
			if (TimeUtils.millis() - delayPlayAgain >= 100){
				adjustDifficulty();
				isLoading = true;
				disposeAssets();
				profileFile.writeString(jsonValue.toString(), false);
				this.dispose();
				game.setScreen(new GameScreen(game, trashCan1Properties, trashCan2Properties, trashCan3Properties,
						trashCan4Properties, manager, junkWorldEngines, gamePalette, currentItemOfSlot1,
						currentItemOfSlot2, currentItemOfSlot3, currentItemOfSlot4, currentItemOfSlot5,
						currentItemOfSlot6));
			}
		}
	}
	// TODO Auto-generated method stub

	private void setRectangles() {
		while (capacitors1Layer.size < trashCan1Capacity){
			capacitors1Layer.add(new Rectangle());
		}
		while (capacitors2Layer.size < trashCan2Capacity){
			capacitors2Layer.add(new Rectangle());
		}
		while (capacitors3Layer.size < trashCan3Capacity){
			capacitors3Layer.add(new Rectangle());
		}
		while (capacitors4Layer.size < trashCan4Capacity){
			capacitors4Layer.add(new Rectangle());
		}

		while (capacitors1Layer.size > trashCan1Capacity){
			capacitors1Layer.removeIndex(capacitors1Layer.size - 1);
		}
		while (capacitors2Layer.size > trashCan2Capacity){
			capacitors2Layer.removeIndex(capacitors2Layer.size - 1);
		}
		while (capacitors3Layer.size > trashCan3Capacity){
			capacitors3Layer.removeIndex(capacitors3Layer.size - 1);
		}
		while (capacitors4Layer.size > trashCan4Capacity){
			capacitors4Layer.removeIndex(capacitors4Layer.size - 1);
		}

		if (isTrashCan1){
			for (int i = 0; i < trashCan1Capacity; i++){
				capacitors1Layer.get(i).set(trashCan1Layer.x + 14 + ((100/trashCan1Capacity) * i), trashCan1Layer.y - 14, 100/trashCan1Capacity, 13);
			}
		}
		if (isTrashCan2){
			for (int i = 0; i < trashCan2Capacity; i++){
				capacitors2Layer.get(i).set(trashCan2Layer.x + 14 + ((100/trashCan2Capacity) * i), trashCan2Layer.y - 14, 100/trashCan2Capacity, 13);
			}
		}
		if (isTrashCan3){
			for (int i = 0; i < trashCan3Capacity; i++){
				capacitors3Layer.get(i).set(trashCan3Layer.x + 14 + ((100/trashCan3Capacity) * i), trashCan3Layer.y - 14, 100/trashCan3Capacity, 13);
			}
		}
		if (isTrashCan4){
			for (int i = 0; i < trashCan4Capacity; i++){
				capacitors4Layer.get(i).set(trashCan4Layer.x + 14 + ((100/trashCan4Capacity) * i), trashCan4Layer.y - 14, 100/trashCan4Capacity, 13);
			}
		}
	}

	private void setActorBounds() {
		burstMode.setBounds(burstModeLayer.x, burstModeLayer.y, burstModeLayer.width, burstModeLayer.height);
		toAbilitySelection.setBounds(abilitySelectionLayer.x, abilitySelectionLayer.y, abilitySelectionLayer.width, abilitySelectionLayer.height);
		toColorOrTypeSelection.setBounds(typeOrColorSelectionLayer.x, typeOrColorSelectionLayer.y, typeOrColorSelectionLayer.width, typeOrColorSelectionLayer.height);
		trashCan1Input.setBounds(trashCan1Layer.x, trashCan1Layer.y, trashCan1Layer.width, trashCan1Layer.height);
		trashCan2Input.setBounds(trashCan2Layer.x, trashCan2Layer.y, trashCan2Layer.width, trashCan2Layer.height);
		trashCan3Input.setBounds(trashCan3Layer.x, trashCan3Layer.y, trashCan3Layer.width, trashCan3Layer.height);
		trashCan4Input.setBounds(trashCan4Layer.x, trashCan4Layer.y, trashCan4Layer.width, trashCan4Layer.height);
		selection1.setBounds(selection1Layer.x, selection1Layer.y, selection1Layer.width, selection1Layer.height);
		selection2.setBounds(selection2Layer.x, selection2Layer.y, selection2Layer.width, selection2Layer.height);
		selection3.setBounds(selection3Layer.x, selection3Layer.y, selection3Layer.width, selection3Layer.height);
		selection4.setBounds(selection4Layer.x, selection4Layer.y, selection4Layer.width, selection4Layer.height);
		mainMenu.setBounds(mainMenuLayer.x, mainMenuLayer.y, mainMenuLayer.width, mainMenuLayer.height);
		scrollItemsLeft.setBounds(126, 683, 32, 64);
		items.get(0).setBounds(firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
		items.get(1).setBounds(secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
		items.get(2).setBounds(thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
		items.get(3).setBounds(fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
		scrollItemsRight.setBounds(474, 683, 32, 64);
		dumpster.setBounds(dumpsterLayer.x, dumpsterLayer.y, dumpsterLayer.width, dumpsterLayer.height);
		//		switch (currentBottomHUDState){
		//		case ABILITY_SELECTION: break;
		//		case COLOR_SELECTION: {
		//			colorSelection1.setBounds(selection1Layer.x, selection1Layer.y, selection1Layer.width, selection1Layer.height);
		//			colorSelection2.setBounds(selection2Layer.x, selection2Layer.y, selection2Layer.width, selection2Layer.height);
		//			colorSelection3.setBounds(selection3Layer.x, selection3Layer.y, selection3Layer.width, selection3Layer.height);
		//			colorSelection4.setBounds(selection4Layer.x, selection4Layer.y, selection4Layer.width, selection4Layer.height);
		//		};
		//		case TYPE_SELECTION:{
		//			typeSelection1.setBounds(selection1Layer.x, selection1Layer.y, selection1Layer.width, selection1Layer.height);
		//			typeSelection2.setBounds(selection2Layer.x, selection2Layer.y, selection2Layer.width, selection2Layer.height);
		//			typeSelection3.setBounds(selection3Layer.x, selection3Layer.y, selection3Layer.width, selection3Layer.height);
		//			typeSelection4.setBounds(selection4Layer.x, selection4Layer.y, selection4Layer.width, selection4Layer.height);
		//		};
		//		default: break;
		//		}
	}

	private void drawBurnedTrash(int bombNum, Rectangle trashLayer) {
		switch (bombNum){
		case 0: {
			burnedTrash1Layer.add(new Rectangle(trashLayer));
		}; break;
		case 1: {
			burnedTrash2Layer.add(new Rectangle(trashLayer));
		}; break;
		case 2: {
			burnedTrash3Layer.add(new Rectangle(trashLayer));
		}; break;
		case 3: {
			burnedTrash4Layer.add(new Rectangle(trashLayer));
		}; break;
		case 4: {
			burnedTrash5Layer.add(new Rectangle(trashLayer));
		}; break;
		case 5: {
			burnedTrash6Layer.add(new Rectangle(trashLayer));
		}; break;
		default: break;
		}
	}

	//	TODO Move Trash

	//TODO	batches Main
	private void drawBatches() {
		batch.begin();
		setTheme();
		batch.draw(manager.get("backgrounds/garbageVolume.png", Texture.class), 0, garbageVolumeY, 512, 800);
		//		batch.draw(topHUD, 0, 800 - 800 / 4 + 80, 512, 800 / 4);
		//		batch.draw(dumpsterRegion, 10, 800 - 110, 100, 100);
		batch.draw(itemArrowLeftRegion, 126, 683, 32, 64);
		drawItemConfigs();
		batch.draw(itemArrowRightRegion, 474, 683, 32, 64);
		batch.draw(mainMenuRegion, mainMenuLayer.x, mainMenuLayer.y, mainMenuLayer.width, mainMenuLayer.height);
		batch.draw(showOpponentRegion, showOpponentLayer.x, showOpponentLayer.y, showOpponentLayer.width, showOpponentLayer.height);
		moveTrashCanLayers();
		drawTrash();
		batch.draw(abilitySelectionRegion, abilitySelectionLayer.x, abilitySelectionLayer.y, abilitySelectionLayer.width, abilitySelectionLayer.height);
		batch.draw(typeOrColorSelectionRegion, typeOrColorSelectionLayer.x, typeOrColorSelectionLayer.y, typeOrColorSelectionLayer.width, typeOrColorSelectionLayer.height);
		batch.draw(selection1Region, selection1Layer.x, selection1Layer.y, selection1Layer.width, selection1Layer.height);
		batch.draw(selection2Region, selection2Layer.x, selection2Layer.y, selection2Layer.width, selection2Layer.height);
		batch.draw(selection3Region, selection3Layer.x, selection3Layer.y, selection3Layer.width, selection3Layer.height);
		batch.draw(selection4Region, selection4Layer.x, selection4Layer.y, selection4Layer.width, selection4Layer.height);
		drawSticker();
		drawInGameAssets();	
		drawTutorials();
		batch.end();
	}

	private void setTheme(){
		switch (junkWorldEngines.getTheme()){
		case 0: batch.draw(manager.get("backgrounds/firstBackground.png", Texture.class), 0, 0); break;
		case 1: batch.draw(manager.get("singlePlayerAssets/JunkWorld Areas/House/Kitchen.png", Texture.class), 0, 0, 512, 800); break;
		case 2: batch.draw(manager.get("singlePlayerAssets/JunkWorld Areas/House/Basement.png", Texture.class), 0, 0, 512, 800); break;
		case 3: batch.draw(manager.get("singlePlayerAssets/JunkWorld Areas/House/Garage.png", Texture.class), 0, 0, 512, 800); break;
		case 4: batch.draw(manager.get("singlePlayerAssets/JunkWorld Areas/House/Backyard.png", Texture.class), 0, 0, 512, 800); break;
		case 5: batch.draw(manager.get("singlePlayerAssets/JunkWorld Areas/House/Sidewalk.png", Texture.class), 0, 0, 512, 800); break;
		case 6: batch.draw(manager.get("singlePlayerAssets/JunkWorld Areas/City/Factory.png", Texture.class), 0, 0, 512, 800); break;
		case 7: batch.draw(manager.get("singlePlayerAssets/JunkWorld Areas/City/Highway.png", Texture.class), 0, 0, 512, 800); break;
		case 8: batch.draw(manager.get("singlePlayerAssets/JunkWorld Areas/City/Park.png", Texture.class), 0, 0, 512, 800); break;
		case 9: batch.draw(manager.get("singlePlayerAssets/JunkWorld Areas/City/Sewer.png", Texture.class), 0, 0, 512, 800); break;
		default: break;
		}

		if (junkWorldEngines.getGameMode() == 2){
			if (jsonValue.getString("currentJob").equals("kitchen")){
				garbageGoal.draw(batch, "Perfect Dump Goal: " + String.valueOf(jsonValue.get("garbageGoal").getInt(0) - perfectDump), 10, 680);
			}
			else if (jsonValue.getString("currentJob").equals("basement")){
				garbageGoal.draw(batch, "Perfect Dump Goal: " + String.valueOf(jsonValue.get("garbageGoal").getInt(1) - perfectDump), 10, 680);
			}
			else if (jsonValue.getString("currentJob").equals("garage")){
				garbageGoal.draw(batch, "Perfect Dump Goal: " + String.valueOf(jsonValue.get("garbageGoal").getInt(2) - perfectDump), 10, 680);
			}
			else if (jsonValue.getString("currentJob").equals("backyard")){
				garbageGoal.draw(batch, "Perfect Dump Goal: " + String.valueOf(jsonValue.get("garbageGoal").getInt(3) - perfectDump), 10, 680);
			}
			else if (jsonValue.getString("currentJob").equals("sidewalk")){
				garbageGoal.draw(batch, "Perfect Dump Goal: " + String.valueOf(jsonValue.get("garbageGoal").getInt(4) - perfectDump), 10, 680);
			}
			else if (jsonValue.getString("currentJob").equals("factory")){
				garbageGoal.draw(batch, "Perfect Dump Goal: " + String.valueOf(jsonValue.get("garbageGoal").getInt(5) - perfectDump), 10, 680);
			}
			else if (jsonValue.getString("currentJob").equals("highway")){
				garbageGoal.draw(batch, "Perfect Dump Goal: " + String.valueOf(jsonValue.get("garbageGoal").getInt(6) - perfectDump), 10, 680);
			}
			else if (jsonValue.getString("currentJob").equals("park")){
				garbageGoal.draw(batch, "Perfect Dump Goal: " + String.valueOf(jsonValue.get("garbageGoal").getInt(7) - perfectDump), 10, 680);
			}
			else if (jsonValue.getString("currentJob").equals("sewer")){
				garbageGoal.draw(batch, "Perfect Dump Goal: " + String.valueOf(jsonValue.get("garbageGoal").getInt(8) - perfectDump), 10, 680);
			}
			else {
				garbageGoal.draw(batch, "Perfect Dump Goal: " + String.valueOf(junkWorldEngines.getGarbageGoal() - perfectDump), 10, 680);
			}
		}
	}

	private void drawInGameAssets() {
		//		Draw Current Dumpster
		if (dumpsterAmount >= 0 &&
				dumpsterAmount < (float)junkWorldEngines.getDumpsterCapacity() * (1f/14f)){
			batch.draw(dumpsterRegions.get(0), dumpsterLayer.x, dumpsterLayer.y, dumpsterLayer.width, dumpsterLayer.height);
		}
		else if (dumpsterAmount >= (float)junkWorldEngines.getDumpsterCapacity() * (1f/14f) &&
				dumpsterAmount < (float)junkWorldEngines.getDumpsterCapacity() * (2f/14f)){
			batch.draw(dumpsterRegions.get(1), dumpsterLayer.x, dumpsterLayer.y, dumpsterLayer.width, dumpsterLayer.height);
		}
		else if (dumpsterAmount >= (float)junkWorldEngines.getDumpsterCapacity() * (2f/14f) &&
				dumpsterAmount < (float)junkWorldEngines.getDumpsterCapacity() * (3f/14f)){
			batch.draw(dumpsterRegions.get(2), dumpsterLayer.x, dumpsterLayer.y, dumpsterLayer.width, dumpsterLayer.height);
		}
		else if (dumpsterAmount >= (float)junkWorldEngines.getDumpsterCapacity() * (3f/14f) &&
				dumpsterAmount < (float)junkWorldEngines.getDumpsterCapacity() * (4f/14f)){
			batch.draw(dumpsterRegions.get(3), dumpsterLayer.x, dumpsterLayer.y, dumpsterLayer.width, dumpsterLayer.height);
		}
		else if (dumpsterAmount >= (float)junkWorldEngines.getDumpsterCapacity() * (4f/14f) &&
				dumpsterAmount < (float)junkWorldEngines.getDumpsterCapacity() * (5f/14f)){
			batch.draw(dumpsterRegions.get(4), dumpsterLayer.x, dumpsterLayer.y, dumpsterLayer.width, dumpsterLayer.height);
		}
		else if (dumpsterAmount >= (float)junkWorldEngines.getDumpsterCapacity() * (5f/14f) &&
				dumpsterAmount < (float)junkWorldEngines.getDumpsterCapacity() * (6f/14f)){
			batch.draw(dumpsterRegions.get(5), dumpsterLayer.x, dumpsterLayer.y, dumpsterLayer.width, dumpsterLayer.height);
		}
		else if (dumpsterAmount >= (float)junkWorldEngines.getDumpsterCapacity() * (6f/14f) &&
				dumpsterAmount < (float)junkWorldEngines.getDumpsterCapacity() * (7f/14f)){
			batch.draw(dumpsterRegions.get(6), dumpsterLayer.x, dumpsterLayer.y, dumpsterLayer.width, dumpsterLayer.height);
		}
		else if (dumpsterAmount >= (float)junkWorldEngines.getDumpsterCapacity() * (7f/14f) &&
				dumpsterAmount < (float)junkWorldEngines.getDumpsterCapacity() * (8f/14f)){
			batch.draw(dumpsterRegions.get(7), dumpsterLayer.x, dumpsterLayer.y, dumpsterLayer.width, dumpsterLayer.height);
		}
		else if (dumpsterAmount >= (float)junkWorldEngines.getDumpsterCapacity() * (8f/14f) &&
				dumpsterAmount < (float)junkWorldEngines.getDumpsterCapacity() * (9f/14f)){
			batch.draw(dumpsterRegions.get(8), dumpsterLayer.x, dumpsterLayer.y, dumpsterLayer.width, dumpsterLayer.height);
		}
		else if (dumpsterAmount >= (float)junkWorldEngines.getDumpsterCapacity() * (9f/14f) &&
				dumpsterAmount < (float)junkWorldEngines.getDumpsterCapacity() * (10f/14f)){
			batch.draw(dumpsterRegions.get(10), dumpsterLayer.x, dumpsterLayer.y, dumpsterLayer.width, dumpsterLayer.height);
		}
		else if (dumpsterAmount >= (float)junkWorldEngines.getDumpsterCapacity() * (10f/14f) &&
				dumpsterAmount < (float)junkWorldEngines.getDumpsterCapacity() * (11f/14f)){
			batch.draw(dumpsterRegions.get(11), dumpsterLayer.x, dumpsterLayer.y, dumpsterLayer.width, dumpsterLayer.height);
		}
		else if (dumpsterAmount >= (float)junkWorldEngines.getDumpsterCapacity() * (11f/14f) &&
				dumpsterAmount < (float)junkWorldEngines.getDumpsterCapacity() * (12f/14f)){
			batch.draw(dumpsterRegions.get(12), dumpsterLayer.x, dumpsterLayer.y, dumpsterLayer.width, dumpsterLayer.height);
		}
		else if (dumpsterAmount >= (float)junkWorldEngines.getDumpsterCapacity() * (12f/14f) &&
				dumpsterAmount < (float)junkWorldEngines.getDumpsterCapacity() * (13f/14f)){
			batch.draw(dumpsterRegions.get(13), dumpsterLayer.x, dumpsterLayer.y, dumpsterLayer.width, dumpsterLayer.height);
		}
		else if (dumpsterAmount >= (float)junkWorldEngines.getDumpsterCapacity() * (13f/14f)){
			batch.draw(dumpsterRegions.get(14), dumpsterLayer.x, dumpsterLayer.y, dumpsterLayer.width, dumpsterLayer.height);
		}

		if (delayBombPics.get(0) != 0){
			batch.draw(bombRegions.get(currentBombRegion.get(0)), bombLayers.get(0).x, bombLayers.get(0).y, bombLayers.get(0).width, bombLayers.get(0).height);
			for (Rectangle trashBurned : burnedTrash1Layer){
				batch.draw(manager.get("gameScreenAssets/trashAssets/burnedBag.png", Texture.class), trashBurned.x, trashBurned.y,
						trashBurned.width, trashBurned.height);
			}
		}

		if (delayBombPics.get(1) != 0){
			batch.draw(bombRegions.get(currentBombRegion.get(1)), bombLayers.get(1).x, bombLayers.get(1).y, bombLayers.get(1).width, bombLayers.get(1).height);
			for (Rectangle trashBurned : burnedTrash2Layer){
				batch.draw(manager.get("gameScreenAssets/trashAssets/burnedBag.png", Texture.class), trashBurned.x, trashBurned.y,
						trashBurned.width, trashBurned.height);
			}
		}
		if (delayBombPics.get(2) != 0){
			batch.draw(bombRegions.get(currentBombRegion.get(2)), bombLayers.get(2).x, bombLayers.get(2).y, bombLayers.get(2).width, bombLayers.get(2).height);
			for (Rectangle trashBurned : burnedTrash3Layer){
				batch.draw(manager.get("gameScreenAssets/trashAssets/burnedBag.png", Texture.class), trashBurned.x, trashBurned.y,
						trashBurned.width, trashBurned.height);
			}
		}
		if (delayBombPics.get(3) != 0){
			batch.draw(bombRegions.get(currentBombRegion.get(3)), bombLayers.get(3).x, bombLayers.get(3).y, bombLayers.get(3).width, bombLayers.get(3).height);
			for (Rectangle trashBurned : burnedTrash4Layer){
				batch.draw(manager.get("gameScreenAssets/trashAssets/burnedBag.png", Texture.class), trashBurned.x, trashBurned.y,
						trashBurned.width, trashBurned.height);
			}
		}
		if (delayBombPics.get(4) != 0){
			batch.draw(bombRegions.get(currentBombRegion.get(4)), bombLayers.get(4).x, bombLayers.get(4).y, bombLayers.get(4).width, bombLayers.get(4).height);
			for (Rectangle trashBurned : burnedTrash5Layer){
				batch.draw(manager.get("gameScreenAssets/trashAssets/burnedBag.png", Texture.class), trashBurned.x, trashBurned.y,
						trashBurned.width, trashBurned.height);
			}
		}
		if (delayBombPics.get(5) != 0){
			batch.draw(bombRegions.get(currentBombRegion.get(5)), bombLayers.get(5).x, bombLayers.get(5).y, bombLayers.get(5).width, bombLayers.get(5).height);
			for (Rectangle trashBurned : burnedTrash6Layer){
				batch.draw(manager.get("gameScreenAssets/trashAssets/burnedBag.png", Texture.class), trashBurned.x, trashBurned.y,
						trashBurned.width, trashBurned.height);
			}
		}

		if (!dumpStarter){
			if (TimeUtils.millis() - delayReadyToggle < 3000){
				currentDumpSignal.draw(batch);
			}
			else {
				currentDumpSignal.setTexture(manager.get("gameScreenAssets/gamePopUps/dumpSignal.png", Texture.class));
				currentDumpSignal.draw(batch);
				currentDumpSignal.setAlpha(dumpAlpha);
				dumpAlpha -= .1f;
				if (dumpAlpha <= 0f){
					dumpStarter = true;
					delayTimeCountdown = TimeUtils.millis();
				}
			}

			if (TimeUtils.millis() - delayReadyToggle >= 1500){
				if (TimeUtils.millis() - delayReadyToggle >= 1500 &&
						TimeUtils.millis() - delayReadyToggle < 2000){
					currentDumpNumSignal.draw(batch);
				}
				else if (TimeUtils.millis() - delayReadyToggle >= 2000 &&
						TimeUtils.millis() - delayReadyToggle < 2500){
					currentDumpNumSignal.setTexture(manager.get("gameScreenAssets/gamePopUps/ready1.png", Texture.class));
					currentDumpNumSignal.setY(420);
					currentDumpNumSignal.draw(batch);
				}
				else if (TimeUtils.millis() - delayReadyToggle >= 2500 &&
						TimeUtils.millis() - delayReadyToggle < 3000){
					currentDumpNumSignal.setTexture(manager.get("gameScreenAssets/gamePopUps/ready2.png", Texture.class));
					currentDumpNumSignal.setY(420);
					currentDumpNumSignal.draw(batch);
				}
			}
		}

		if (delayPerfectCombo){
			if (perfectDumpNumCombo < 2){
				perfectComboRectangle.setWidth(perfectDumpFirstPopUp.getRegionWidth() + perfectDumpLastPopUp.getRegionWidth());
				perfectComboRectangle.setX(256 - (perfectComboRectangle.width / 2));
				if (TimeUtils.millis() - delayPerfectDumpCombo < 1500){
					batch.draw(perfectDumpFirstPopUp, perfectComboRectangle.x, perfectComboRectangle.y, perfectDumpFirstPopUp.getRegionWidth(),
							perfectDumpFirstPopUp.getRegionHeight());
					batch.draw(perfectDumpLastPopUp, perfectComboRectangle.x + 192, perfectComboRectangle.y, perfectDumpLastPopUp.getRegionWidth(),
							perfectDumpLastPopUp.getRegionHeight());
				}
			}
			else {
				perfectComboRectangle.width = 192 + 64 + 32 + (32 * (String.valueOf(perfectDumpNumCombo).length()));
				perfectComboRectangle.x = 256 - (perfectComboRectangle.width / 2);
				currentPerfectDumpNumCombo = perfectDumpNumCombo;
				if (TimeUtils.millis() - delayPerfectDumpCombo < 1500){
					batch.draw(perfectDumpFirstPopUp, perfectComboRectangle.x, perfectComboRectangle.y, perfectDumpFirstPopUp.getRegionWidth(),
							perfectDumpFirstPopUp.getRegionHeight());
					batch.draw(perfectDumpLastPopUp, perfectComboRectangle.x + perfectComboRectangle.width - 64, perfectComboRectangle.y,
							perfectDumpLastPopUp.getRegionWidth(), perfectDumpLastPopUp.getRegionHeight());
					for (int i = 1; i <= String.valueOf(perfectDumpNumCombo).length(); i++){
						switch (currentPerfectDumpNumCombo % 10){
						case 0: {
							batch.draw(perfectNumRegions.get(0), perfectComboRectangle.x + perfectComboRectangle.width - 64 - (32 * i), perfectComboRectangle.y,
									32, 64);
						}; break;
						case 1: {
							batch.draw(perfectNumRegions.get(1),  perfectComboRectangle.x + perfectComboRectangle.width - 64 - (32 * i), perfectComboRectangle.y,
									32, 64);
						}; break;
						case 2: {
							batch.draw(perfectNumRegions.get(2), perfectComboRectangle.x + perfectComboRectangle.width - 64 - (32 * i), perfectComboRectangle.y,
									32, 64);
						}; break;
						case 3: {
							batch.draw(perfectNumRegions.get(3), perfectComboRectangle.x + perfectComboRectangle.width - 64 - (32 * i), perfectComboRectangle.y,
									32, 64);
						}; break;
						case 4: {
							batch.draw(perfectNumRegions.get(4), perfectComboRectangle.x + perfectComboRectangle.width - 64 - (32 * i), perfectComboRectangle.y,
									32, 64);
						}; break;
						case 5: {
							batch.draw(perfectNumRegions.get(5), perfectComboRectangle.x + perfectComboRectangle.width - 64 - (32 * i), perfectComboRectangle.y,
									32, 64);
						}; break;
						case 6: {
							batch.draw(perfectNumRegions.get(6), perfectComboRectangle.x + perfectComboRectangle.width - 64 - (32 * i), perfectComboRectangle.y,
									32, 64);
						}; break;
						case 7: {
							batch.draw(perfectNumRegions.get(7), perfectComboRectangle.x + perfectComboRectangle.width - 64 - (32 * i), perfectComboRectangle.y,
									32, 64);
						}; break;
						case 8: {
							batch.draw(perfectNumRegions.get(8), perfectComboRectangle.x + perfectComboRectangle.width - 64 - (32 * i), perfectComboRectangle.y,
									32, 64);
						}; break;
						case 9: {
							batch.draw(perfectNumRegions.get(9), perfectComboRectangle.x + perfectComboRectangle.width - 64 - (32 * i), perfectComboRectangle.y,
									32, 64);
						}; break;
						default: break;
						}
					}
				}
			}
		}

		if (delayDump != 0){
			if (TimeUtils.millis() - delayDump < 1000){
				batch.draw(currentDumpPopuUp, 256 - (currentDumpPopuUp.getRegionWidth() / 2), 500, currentDumpPopuUp.getRegionWidth(),
						currentDumpPopuUp.getRegionHeight());
			}
		}

		for (int i = 1; i <= String.valueOf((int)(junkWorldEngines.getDumpsterCapacity() - dumpsterAmount)).length(); i++){
			dumpsterAmountLayer.width = 30 * i;
			dumpsterAmountLayer.x = 60 - (dumpsterAmountLayer.width / 2);
		}

		dumpAmountLeft = (int)(junkWorldEngines.getDumpsterCapacity() - dumpsterAmount);
		for (int i = 1; i <= String.valueOf((int)(junkWorldEngines.getDumpsterCapacity() - dumpsterAmount)).length(); i++){
			switch (dumpAmountLeft % 10){
			case 0: {
				batch.draw(perfectNumRegions.get(0), (dumpsterAmountLayer.x + dumpsterAmountLayer.width) - (30 * i), dumpsterAmountLayer.y, 30, 60);
			}; break;
			case 1: {
				batch.draw(perfectNumRegions.get(1), (dumpsterAmountLayer.x + dumpsterAmountLayer.width) - (30 * i), dumpsterAmountLayer.y, 30, 60);
			}; break;
			case 2: {
				batch.draw(perfectNumRegions.get(2), (dumpsterAmountLayer.x + dumpsterAmountLayer.width) - (30 * i), dumpsterAmountLayer.y, 30, 60);
			}; break;
			case 3: {
				batch.draw(perfectNumRegions.get(3), (dumpsterAmountLayer.x + dumpsterAmountLayer.width) - (30 * i), dumpsterAmountLayer.y, 30, 60);
			}; break;
			case 4: {
				batch.draw(perfectNumRegions.get(4), (dumpsterAmountLayer.x + dumpsterAmountLayer.width) - (30 * i), dumpsterAmountLayer.y, 30, 60);
			}; break;
			case 5: {
				batch.draw(perfectNumRegions.get(5), (dumpsterAmountLayer.x + dumpsterAmountLayer.width) - (30 * i), dumpsterAmountLayer.y, 30, 60);
			}; break;
			case 6: {
				batch.draw(perfectNumRegions.get(6), (dumpsterAmountLayer.x + dumpsterAmountLayer.width) - (30 * i), dumpsterAmountLayer.y, 30, 60);
			}; break;
			case 7: {
				batch.draw(perfectNumRegions.get(7), (dumpsterAmountLayer.x + dumpsterAmountLayer.width) - (30 * i), dumpsterAmountLayer.y, 30, 60);
			}; break;
			case 8: {
				batch.draw(perfectNumRegions.get(8), (dumpsterAmountLayer.x + dumpsterAmountLayer.width) - (30 * i), dumpsterAmountLayer.y, 30, 60);
			}; break;
			case 9: {
				batch.draw(perfectNumRegions.get(9), (dumpsterAmountLayer.x + dumpsterAmountLayer.width) - (30 * i), dumpsterAmountLayer.y, 30, 60);
			}; break;
			default: break;
			}
			dumpAmountLeft /= 10;
		}

		if (junkWorldEngines.getGameMode() == 1 || junkWorldEngines.getGameMode() == 3){
			switch (String.valueOf(seconds).length()){
			case 1: font.draw(batch, String.valueOf(minutes) + ":0" + String.valueOf(seconds), 150, 785); break;
			case 2: font.draw(batch, String.valueOf(minutes) + ":" + String.valueOf(seconds), 150, 785); break;
			default: break;
			}
		}
		score.draw(batch, String.valueOf(currentScore), 290, 785);

		batch.draw(manager.get("gameScreenAssets/inGameMenuAssets/timerAssets/time.png", Texture.class), 123, 758, 20, 39);
		batch.draw(manager.get("gameScreenAssets/inGameMenuAssets/scoreIcon.png", Texture.class), 255, 763, 30, 30);

		if (delayCurrentWarning != 0){
			if (TimeUtils.millis() - delayCurrentWarning >= 0 &&
					TimeUtils.millis() - delayCurrentWarning < 500){
				batch.draw(currentWarning.get(0), 256 - 100, 580, 200, 64);
			}
			else if (TimeUtils.millis() - delayCurrentWarning >= 500 &&
					TimeUtils.millis() - delayCurrentWarning < 1000){
				batch.draw(currentWarning.get(1), 256 - 100, 580, 200, 64);
			}
			else if (TimeUtils.millis() - delayCurrentWarning >= 1000 &&
					TimeUtils.millis() - delayCurrentWarning < 1500){
				batch.draw(currentWarning.get(0), 256 - 100, 580, 200, 64);
			}
			else if (TimeUtils.millis() - delayCurrentWarning >= 1500 &&
					TimeUtils.millis() - delayCurrentWarning < 2000){
				batch.draw(currentWarning.get(1), 256 - 100, 580, 200, 64);
			}
			else if (TimeUtils.millis() - delayCurrentWarning >= 2000 &&
					TimeUtils.millis() - delayCurrentWarning < 2500){
				batch.draw(currentWarning.get(0), 256 - 100, 580, 200, 64);
			}
			else if (TimeUtils.millis() - delayCurrentWarning >= 2500 &&
					TimeUtils.millis() - delayCurrentWarning < 3000){
				batch.draw(currentWarning.get(1), 256 - 100, 580, 200, 64);
			}
			else if (TimeUtils.millis() - delayCurrentWarning >= 3000){
				delayCurrentWarning = 0;
			}
		}

		switch (burstModeButton){
		case UNCLICKABLE: batch.draw(burstRegion, burstModeLayer.x, burstModeLayer.y, burstModeLayer.width, burstModeLayer.height); break;
		case CLICKABLE: {
			batch.draw(burstRegion, burstModeLayer.x, burstModeLayer.y, burstModeLayer.width, burstModeLayer.height);
			if (delayBurstModeClickable != 0){
				if (TimeUtils.millis() - delayBurstModeClickable < 1000 &&
						TimeUtils.millis() - delayBurstModeClickable >= 0){
					batch.draw(burst2Region, burstModeLayer.x, burstModeLayer.y, burstModeLayer.width, burstModeLayer.height);
				}
				if (TimeUtils.millis() - delayBurstModeClickable >= 2000){
					delayBurstModeClickable = TimeUtils.millis();
				}
			}
		}; break;
		case CLICKED: {
			batch.draw(burstRegion, burstModeLayer.x, burstModeLayer.y, burstModeLayer.width, burstModeLayer.height);
			batch.draw(burst2Region, burstModeLayer.x, burstModeLayer.y, burstModeLayer.width, burstModeLayer.height);
		}; break;
		case COOLDOWN: {
			batch.draw(burstRegion, burstModeLayer.x, burstModeLayer.y, burstModeLayer.width, burstModeLayer.height);
			batch.draw(burst2Region, burstModeLayer.x, burstModeLayer.y, burstModeLayer.width, burstModeLayer.height);
		}; break;
		default: break;
		}

		if (highlightFirstPick){
			for (Rectangle trash : trashLayer){
				if (trash == selectedTrash1){
					batch.draw(manager.get("backgrounds/whiteShader.png", Texture.class), trash.x, trash.y, 64, 64);
				}
			}
		}

		if (augmentCan1){
			batch.draw(augmentedBurstRegion.get(currentAugmentedBurstRegion), trashCan1Layer.x, trashCan1Layer.y + trashCan1Layer.height, 128, 64);
		}
		if (augmentCan2){
			batch.draw(augmentedBurstRegion.get(currentAugmentedBurstRegion), trashCan2Layer.x, trashCan2Layer.y + trashCan2Layer.height, 128, 64);
		}
		if (augmentCan3){
			batch.draw(augmentedBurstRegion.get(currentAugmentedBurstRegion), trashCan3Layer.x, trashCan3Layer.y + trashCan3Layer.height, 128, 64);
		}
		if (augmentCan4){
			batch.draw(augmentedBurstRegion.get(currentAugmentedBurstRegion), trashCan4Layer.x, trashCan4Layer.y + trashCan4Layer.height, 128, 64);
		}

		if (currentSelectedItem == CurrentSelectedItem.BOMB){
			currentItemStates.draw(batch, "Select Area to Blow Up", 100, 300);
		}
		else if (currentSelectedItem == CurrentSelectedItem.GLUE){
			currentItemStates.draw(batch, "Select Trash to Glue", 100, 300);
		}
		else if (currentSelectedItem == CurrentSelectedItem.ICEFLAKE){
			currentItemStates.draw(batch, "Select Area to Freeze", 100, 300);
		}
		else if (currentSelectedItem == CurrentSelectedItem.SWITCH_MACHINE){
			if (delaySelectSecond == 0){
				currentItemStates.draw(batch, "Select First Trash", 100, 300);
			}
			else {
				currentItemStates.draw(batch, "Select Second Trash", 100, 300);
			}

		}
		else if (currentSelectedItem == CurrentSelectedItem.AUGMENTED_BURST){
			currentItemStates.draw(batch, "Select Can to Burst", 100, 300);
		}
		else if (currentSelectedItem == CurrentSelectedItem.STICKER){
		}

		if (delayIceflakePics != 0){
			batch.draw(iceflakeRegions.get(currentIceflakeRegion), iceflakeLayers.x, iceflakeLayers.y, iceflakeLayers.width, iceflakeLayers.height);
		}
	}
	//	TODO	Draw Batches
	private void drawTrash() {
		for (Rectangle trash : trashLayer){
			if (acornLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(acornRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(acornRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(acornRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(acornRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(acornRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(acornRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (appleLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(appleRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(appleRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(appleRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(appleRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(appleRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(appleRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (bananaPeelLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(bananaPeelRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(bananaPeelRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(bananaPeelRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(bananaPeelRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(bananaPeelRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(bananaPeelRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (branchLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(branchRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(branchRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(branchRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(branchRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(branchRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(branchRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (deadMouseLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(deadMouseRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(deadMouseRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(deadMouseRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(deadMouseRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(deadMouseRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(deadMouseRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (eggShellLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(eggShellRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(eggShellRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(eggShellRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(eggShellRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(eggShellRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(eggShellRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (featherLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(featherRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(featherRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(featherRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(featherRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(featherRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(featherRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (fishBoneLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(fishBoneRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(fishBoneRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(fishBoneRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(fishBoneRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(fishBoneRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(fishBoneRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (flowerLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(flowerRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(flowerRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(flowerRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(flowerRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(flowerRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(flowerRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (grassLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(grassRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(grassRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(grassRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(grassRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(grassRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(grassRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (hairLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hairRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hairRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hairRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hairRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hairRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hairRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (hayLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hayRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hayRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hayRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hayRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hayRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hayRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (leavesLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leavesRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leavesRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leavesRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leavesRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leavesRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leavesRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (manureLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(manureRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(manureRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(manureRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(manureRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(manureRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(manureRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (rootsLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(rootsRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(rootsRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(rootsRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(rootsRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(rootsRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(rootsRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (bottleLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(bottleRegionRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(bottleRegionRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(bottleRegionRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(bottleRegionRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(bottleRegionRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(bottleRegionRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (canLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(canRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(canRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(canRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(canRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(canRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(canRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (cardboardLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cardboardRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cardboardRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cardboardRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cardboardRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cardboardRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cardboardRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (cerealBoxLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cerealBoxRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cerealBoxRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cerealBoxRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cerealBoxRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cerealBoxRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cerealBoxRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (dirtyShirtLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(dirtyShirtRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(dirtyShirtRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(dirtyShirtRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(dirtyShirtRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(dirtyShirtRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(dirtyShirtRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (envelopeLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(envelopeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(envelopeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(envelopeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(envelopeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(envelopeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(envelopeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (funnelLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(funnelRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(funnelRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(funnelRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(funnelRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(funnelRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(funnelRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (hangerLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hangerRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hangerRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hangerRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hangerRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hangerRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(hangerRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (newspaperLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(newspaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(newspaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(newspaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(newspaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(newspaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(newspaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (paperLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(paperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(paperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(paperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(paperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(paperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(paperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (pillBottleLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(pillBottleRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(pillBottleRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(pillBottleRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(pillBottleRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(pillBottleRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(pillBottleRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (plasticBagLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(plasticBagRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(plasticBagRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(plasticBagRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(plasticBagRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(plasticBagRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(plasticBagRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (tyreLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(tyreRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(tyreRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(tyreRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(tyreRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(tyreRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(tyreRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (vaseLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(vaseRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(vaseRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(vaseRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(vaseRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(vaseRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(vaseRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (waffleIronLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(waffleIronRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(waffleIronRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(waffleIronRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(waffleIronRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(waffleIronRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(waffleIronRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (aerosolCanLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(aerosolCanRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(aerosolCanRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(aerosolCanRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(aerosolCanRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(aerosolCanRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(aerosolCanRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (brokenBulbLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(brokenBulbRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(brokenBulbRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(brokenBulbRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(brokenBulbRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(brokenBulbRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(brokenBulbRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (brokenGlassLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(brokenGlassRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(brokenGlassRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(brokenGlassRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(brokenGlassRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(brokenGlassRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(brokenGlassRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (chewingGumLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(chewingGumRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(chewingGumRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(chewingGumRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(chewingGumRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(chewingGumRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(chewingGumRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (cigaretteLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cigaretteRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cigaretteRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cigaretteRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cigaretteRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cigaretteRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(cigaretteRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (deadBatteryLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(deadBatteryRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(deadBatteryRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(deadBatteryRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(deadBatteryRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(deadBatteryRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(deadBatteryRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (dirtyDiaperLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(dirtyDiaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(dirtyDiaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(dirtyDiaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(dirtyDiaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(dirtyDiaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(dirtyDiaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (insecticideSprayLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(insecticideSprayRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(insecticideSprayRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(insecticideSprayRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(insecticideSprayRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(insecticideSprayRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(insecticideSprayRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (leftoverCakeLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leftoverCakeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leftoverCakeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leftoverCakeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leftoverCakeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leftoverCakeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leftoverCakeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (leftoverChickenLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leftoverChickenRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leftoverChickenRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leftoverChickenRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leftoverChickenRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leftoverChickenRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(leftoverChickenRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (nailLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(nailRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(nailRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(nailRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(nailRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(nailRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(nailRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (paintCanLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(paintCanRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(paintCanRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(paintCanRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(paintCanRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(paintCanRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(paintCanRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (syringeLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(syringeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(syringeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(syringeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(syringeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(syringeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(syringeRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (tornPaperLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(tornPaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(tornPaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(tornPaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(tornPaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(tornPaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(tornPaperRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
			else if (usedMotorOilLayer.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
				if (redLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(usedMotorOilRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(redBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (orangeLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(usedMotorOilRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(orangeBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (yellowLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(usedMotorOilRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(yellowBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (greenLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(usedMotorOilRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(greenBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (blueLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(usedMotorOilRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(blueBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
				else if (purpleLayers.contains(trashLayer.get(trashLayer.indexOf(trash, true)), true)){
					batch.draw(usedMotorOilRegion, trash.x, trash.y, trash.width, (trash.height * 2));
					batch.draw(purpleBag, trash.x, trash.y, trash.width, (trash.height * 2));
				}
			}
		}
	}

	private void moveTrashCanLayers() {
		batch.draw(currentTrashCan1, trashCan1Layer.x, trashCan1Layer.y, trashCan1Layer.width, trashCan1Layer.height);
		switch (trashCan1Properties.getTrashCan()){
		case 1: {
			if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
				batch.draw(ability1Region[currentAbility1], trashCan1Layer.x, trashCan1Layer.y, trashCan1Layer.width, trashCan1Layer.height);
			}
		}; break;
		case 2: {
			if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
				batch.draw(ability1Region[currentAbility1], trashCan1Layer.x + 32, trashCan1Layer.y + 128, 64, 224);
			}
			for (Rectangle burnedTrash : burnedAbility1Layer){
				batch.draw(manager.get("gameScreenAssets/trashAssets/burnedBag.png", Texture.class), burnedTrash.x, burnedTrash.y, burnedTrash.width, burnedTrash.height);
			}
		}; break;
		case 3: {
			if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
				batch.draw(ability1Region[currentAbility1], trashCan1Layer.x, trashCan1Layer.y + 128);
			}
		}; break;
		case 4: {
			if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
				batch.draw(ability1Region[currentAbility1], trashCan1Layer.x, trashCan1Layer.y + 128);
			}
		}; break;
		case 5: {	

		}; break;
		case 6: {
			if (delayEnergy1Anim != 0){
				if (TimeUtils.millis() - delayEnergy1Anim < 500){
					batch.draw(ability1Region[4], trashCan1Layer.x, trashCan1Layer.y + trashCan1Layer.height, trashCan1Layer.width, trashCan1Layer.height);
				}
				else if (TimeUtils.millis() - delayEnergy1Anim >= 500 &&
						TimeUtils.millis() - delayEnergy1Anim < 1000){
					batch.draw(ability1Region[5], trashCan1Layer.x, trashCan1Layer.y + trashCan1Layer.height, trashCan1Layer.width, trashCan1Layer.height);
				}
				else if (TimeUtils.millis() - delayEnergy1Anim >= 1000 &&
						TimeUtils.millis() - delayEnergy1Anim < 1500){
					batch.draw(ability1Region[6], trashCan1Layer.x, trashCan1Layer.y + trashCan1Layer.height, trashCan1Layer.width, trashCan1Layer.height);
				}
				else {
					delayEnergy1Anim = TimeUtils.millis();
				}
			}

			if (delaySpeedRush.get(0) == 0){
				batch.draw(ability1Region[2], trashCan1Layer.x, trashCan1Layer.y, 128, 30);
			}
			else {
				batch.draw(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/energyBar2.png", Texture.class), trashCan1Layer.x, trashCan1Layer.y, 128, 30);
			}
			if (delaySwiftCan1Energy == 0){	
				batch.draw(ability1Region[1], trashCan1Layer.x + 17, trashCan1Layer.y + 3, (swiftCan1Energy * 94) / junkWorldEngines.getSwiftCanEnergyTot(), 24);
			}
			else {
				batch.draw(ability1Region[3], trashCan1Layer.x + 17, trashCan1Layer.y + 3, (swiftCan1Energy * 94) / junkWorldEngines.getSwiftCanEnergyTot(), 24);
				batch.draw(ability1Region[0], trashCan1Layer.x, trashCan1Layer.y + trashCan1Layer.height, trashCan1Layer.width, trashCan1Layer.height);
			}
		}; break;
		default: break;
		}

		batch.draw(currentTrashCan2, trashCan2Layer.x, trashCan2Layer.y, trashCan2Layer.width, trashCan2Layer.height);
		switch (trashCan2Properties.getTrashCan()){
		case 1: {
			if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
				batch.draw(ability2Region[currentAbility2], trashCan2Layer.x, trashCan2Layer.y, trashCan2Layer.width, trashCan2Layer.height);
			}
		}; break;
		case 2: {
			if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
				batch.draw(ability2Region[currentAbility2], trashCan2Layer.x + 32, trashCan2Layer.y + 128, 64, 224);
			}
			for (Rectangle burnedTrash : burnedAbility2Layer){
				batch.draw(manager.get("gameScreenAssets/trashAssets/burnedBag.png", Texture.class), burnedTrash.x, burnedTrash.y, burnedTrash.width, burnedTrash.height);
			}
		}; break;
		case 3: {
			if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
				batch.draw(ability2Region[currentAbility2], trashCan2Layer.x, trashCan2Layer.y + 128);
			}
		}; break;
		case 4: {
			if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
				batch.draw(ability2Region[currentAbility2], trashCan2Layer.x, trashCan2Layer.y + 128);
			}
		}; break;
		case 5: {	

		}; break;
		case 6: {
			if (delayEnergy2Anim != 0){
				if (TimeUtils.millis() - delayEnergy2Anim < 500){
					batch.draw(ability2Region[4], trashCan2Layer.x, trashCan2Layer.y + trashCan2Layer.height, trashCan2Layer.width, trashCan2Layer.height);
				}
				else if (TimeUtils.millis() - delayEnergy2Anim >= 500 &&
						TimeUtils.millis() - delayEnergy2Anim < 1000){
					batch.draw(ability2Region[5], trashCan2Layer.x, trashCan2Layer.y + trashCan2Layer.height, trashCan2Layer.width, trashCan2Layer.height);
				}
				else if (TimeUtils.millis() - delayEnergy2Anim >= 1000 &&
						TimeUtils.millis() - delayEnergy2Anim < 1500){
					batch.draw(ability2Region[6], trashCan2Layer.x, trashCan2Layer.y + trashCan2Layer.height, trashCan2Layer.width, trashCan2Layer.height);
				}
				else {
					delayEnergy2Anim = TimeUtils.millis();
				}
			}

			if (delaySpeedRush.get(1) == 0){
				batch.draw(ability2Region[2], trashCan2Layer.x, trashCan2Layer.y, 128, 30);
			}
			else {
				batch.draw(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/energyBar2.png", Texture.class), trashCan2Layer.x, trashCan2Layer.y, 128, 30);
			}
			if (delaySwiftCan2Energy == 0){	
				batch.draw(ability2Region[1], trashCan2Layer.x + 17, trashCan2Layer.y + 3, (swiftCan2Energy * 94) / junkWorldEngines.getSwiftCanEnergyTot(), 24);
			}
			else {
				batch.draw(ability2Region[3], trashCan2Layer.x + 17, trashCan2Layer.y + 3, (swiftCan2Energy * 94) / junkWorldEngines.getSwiftCanEnergyTot(), 24);
				batch.draw(ability2Region[0], trashCan2Layer.x, trashCan2Layer.y + trashCan1Layer.height, trashCan2Layer.width, trashCan2Layer.height);
			}
		}; break;
		default: break;
		}

		batch.draw(currentTrashCan3, trashCan3Layer.x, trashCan3Layer.y, trashCan3Layer.width, trashCan3Layer.height);
		switch (trashCan3Properties.getTrashCan()){
		case 1: {
			if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
				batch.draw(ability3Region[currentAbility3], trashCan3Layer.x, trashCan3Layer.y, trashCan3Layer.width, trashCan3Layer.height);
			}
		}; break;
		case 2: {
			if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
				batch.draw(ability3Region[currentAbility3], trashCan3Layer.x + 32, trashCan3Layer.y + 128, 64, 224);
			}
			for (Rectangle burnedTrash : burnedAbility3Layer){
				batch.draw(manager.get("gameScreenAssets/trashAssets/burnedBag.png", Texture.class), burnedTrash.x, burnedTrash.y, burnedTrash.width, burnedTrash.height);
			}
		}; break;
		case 3: {
			if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
				batch.draw(ability3Region[currentAbility3], trashCan3Layer.x, trashCan3Layer.y + 128);
			}
		}; break;
		case 4: {
			if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
				batch.draw(ability3Region[currentAbility3], trashCan3Layer.x, trashCan3Layer.y + 128);
			}
		}; break;
		case 5: {	

		}; break;
		case 6: {
			if (delayEnergy3Anim != 0){
				if (TimeUtils.millis() - delayEnergy3Anim < 500){
					batch.draw(ability3Region[4], trashCan3Layer.x, trashCan3Layer.y + trashCan3Layer.height, trashCan3Layer.width, trashCan3Layer.height);
				}
				else if (TimeUtils.millis() - delayEnergy3Anim >= 500 &&
						TimeUtils.millis() - delayEnergy3Anim < 1000){
					batch.draw(ability3Region[5], trashCan3Layer.x, trashCan3Layer.y + trashCan3Layer.height, trashCan3Layer.width, trashCan3Layer.height);
				}
				else if (TimeUtils.millis() - delayEnergy3Anim >= 1000 &&
						TimeUtils.millis() - delayEnergy3Anim < 1500){
					batch.draw(ability3Region[6], trashCan3Layer.x, trashCan3Layer.y + trashCan3Layer.height, trashCan3Layer.width, trashCan3Layer.height);
				}
				else {
					delayEnergy3Anim = TimeUtils.millis();
				}
			}

			if (delaySpeedRush.get(2) == 0){
				batch.draw(ability3Region[2], trashCan3Layer.x, trashCan3Layer.y, 128, 30);
			}
			else {
				batch.draw(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/energyBar2.png", Texture.class), trashCan3Layer.x, trashCan3Layer.y, 128, 30);
			}
			if (delaySwiftCan3Energy == 0){	
				batch.draw(ability3Region[1], trashCan3Layer.x + 17, trashCan3Layer.y + 3, (swiftCan3Energy * 94) / junkWorldEngines.getSwiftCanEnergyTot(), 24);
			}
			else {
				batch.draw(ability3Region[3], trashCan3Layer.x + 17, trashCan3Layer.y + 3, (swiftCan3Energy * 94) / junkWorldEngines.getSwiftCanEnergyTot(), 24);
				batch.draw(ability3Region[0], trashCan3Layer.x, trashCan3Layer.y + trashCan3Layer.height, trashCan3Layer.width, trashCan3Layer.height);
			}
		}; break;
		default: break;
		}

		batch.draw(currentTrashCan4, trashCan4Layer.x, trashCan4Layer.y, trashCan4Layer.width, trashCan4Layer.height);
		switch (trashCan4Properties.getTrashCan()){
		case 1: {
			if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
				batch.draw(ability4Region[currentAbility4], trashCan4Layer.x, trashCan4Layer.y, trashCan4Layer.width, trashCan4Layer.height);
			}
		}; break;
		case 2: {
			if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
				batch.draw(ability4Region[currentAbility4], trashCan4Layer.x + 32, trashCan4Layer.y + 128, 64, 224);
			}
			for (Rectangle burnedTrash : burnedAbility4Layer){
				batch.draw(manager.get("gameScreenAssets/trashAssets/burnedBag.png", Texture.class), burnedTrash.x, burnedTrash.y, burnedTrash.width, burnedTrash.height);
			}
		}; break;
		case 3: {
			if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
				batch.draw(ability4Region[currentAbility4], trashCan4Layer.x, trashCan4Layer.y + 128);
			}
		}; break;
		case 4: {
			if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
				batch.draw(ability4Region[currentAbility4], trashCan4Layer.x, trashCan4Layer.y + 128);
			}
		}; break;
		case 5: {	

		}; break;
		case 6: {
			if (delayEnergy4Anim != 0){
				if (TimeUtils.millis() - delayEnergy4Anim < 500){
					batch.draw(ability4Region[4], trashCan4Layer.x, trashCan4Layer.y + trashCan4Layer.height, trashCan4Layer.width, trashCan4Layer.height);
				}
				else if (TimeUtils.millis() - delayEnergy4Anim >= 500 &&
						TimeUtils.millis() - delayEnergy4Anim < 1000){
					batch.draw(ability4Region[5], trashCan4Layer.x, trashCan4Layer.y + trashCan4Layer.height, trashCan4Layer.width, trashCan4Layer.height);
				}
				else if (TimeUtils.millis() - delayEnergy4Anim >= 1000 &&
						TimeUtils.millis() - delayEnergy4Anim < 1500){
					batch.draw(ability4Region[6], trashCan4Layer.x, trashCan4Layer.y + trashCan4Layer.height, trashCan4Layer.width, trashCan4Layer.height);
				}
				else {
					delayEnergy4Anim = TimeUtils.millis();
				}
			}

			if (delaySpeedRush.get(3) == 0){
				batch.draw(ability4Region[2], trashCan4Layer.x, trashCan4Layer.y, 128, 30);
			}
			else {
				batch.draw(manager.get("gameAnimations/TrashCanAbilities/overchargeAbility/energyBar2.png", Texture.class), trashCan4Layer.x, trashCan4Layer.y, 128, 30);
			}
			if (delaySwiftCan4Energy == 0){	
				batch.draw(ability4Region[1], trashCan4Layer.x + 17, trashCan4Layer.y + 3, (swiftCan4Energy * 94) / junkWorldEngines.getSwiftCanEnergyTot(), 24);
			}
			else {
				batch.draw(ability4Region[3], trashCan4Layer.x + 17, trashCan4Layer.y + 3, (swiftCan4Energy * 94) / junkWorldEngines.getSwiftCanEnergyTot(), 24);
				batch.draw(ability4Region[0], trashCan4Layer.x, trashCan4Layer.y + trashCan4Layer.height, trashCan4Layer.width, trashCan4Layer.height);
			}
		}; break;
		default: break;
		}

		if (isTrashCan1){
			for (Rectangle capacitor: capacitors1Layer){
				batch.draw(capacitorBarOutlineRegion, capacitor.x, capacitor.y, capacitor.width, capacitor.height);
				if (capacitors1Layer.indexOf(capacitor, true) + 1 <= currentCapacity1){
					batch.draw(capacitorBarRegion, capacitor.x, capacitor.y, capacitor.width, capacitor.height);
				}
			}
		}
		if (isTrashCan2){
			for (Rectangle capacitor: capacitors2Layer){
				batch.draw(capacitorBarOutlineRegion, capacitor.x, capacitor.y, capacitor.width, capacitor.height);
				if (capacitors2Layer.indexOf(capacitor, true) + 1 <= currentCapacity2){
					batch.draw(capacitorBarRegion, capacitor.x, capacitor.y, capacitor.width, capacitor.height);
				}
			}
		}
		if (isTrashCan3){
			for (Rectangle capacitor: capacitors3Layer){
				batch.draw(capacitorBarOutlineRegion, capacitor.x, capacitor.y, capacitor.width, capacitor.height);
				if (capacitors3Layer.indexOf(capacitor, true) + 1 <= currentCapacity3){
					batch.draw(capacitorBarRegion, capacitor.x, capacitor.y, capacitor.width, capacitor.height);
				}
			}
		}
		if (isTrashCan4){
			for (Rectangle capacitor: capacitors4Layer){
				batch.draw(capacitorBarOutlineRegion, capacitor.x, capacitor.y, capacitor.width, capacitor.height);
				if (capacitors4Layer.indexOf(capacitor, true) + 1 <= currentCapacity4){
					batch.draw(capacitorBarRegion, capacitor.x, capacitor.y, capacitor.width, capacitor.height);
				}
			}
		}
	}

	private void updateSpawnPos() {

		//		TODO

		xTrashSpawnRandom = xTrashSpawn.random();
		yTrashSpawnRandom = yTrashSpawn.random();

		switch (yTrashSpawnRandom){
		case 616: {
			switch (xTrashSpawnRandom){
			case 32: {
				if (!junkWorldEngines.isOccupiedTrashCell1() &&
						!delayRemoveTrash){
					createTrash();
				}
				else {
					randomSpawnDelay = (TimeUtils.millis() - delayTrashSpawn) / 1000;
				}
			}; break;
			case 160: {
				if (!junkWorldEngines.isOccupiedTrashCell2() &&
						!delayRemoveTrash){
					createTrash();
				}
				else {
					randomSpawnDelay = (TimeUtils.millis() - delayTrashSpawn) / 1000;
				}
			}; break;
			case 288: {
				if (!junkWorldEngines.isOccupiedTrashCell3() &&
						!delayRemoveTrash){
					createTrash();
				}
				else {
					randomSpawnDelay = (TimeUtils.millis() - delayTrashSpawn) / 1000;
				}
			}; break;
			case 419: {
				if (!junkWorldEngines.isOccupiedTrashCell4() &&
						!delayRemoveTrash){
					createTrash();
				}
				else {
					randomSpawnDelay = (TimeUtils.millis() - delayTrashSpawn) / 1000;
				}
			}; break;
			default: break;
			}
		}; break;
		case 552: {
			switch (xTrashSpawnRandom){
			case 32: {
				if (!junkWorldEngines.isOccupiedTrashCell5() &&
						!delayRemoveTrash){
					createTrash();
				}
				else {
					randomSpawnDelay = (TimeUtils.millis() - delayTrashSpawn) / 1000;
				}
			}; break;
			case 160: {
				if (!junkWorldEngines.isOccupiedTrashCell6() &&
						!delayRemoveTrash){
					createTrash();
				}
				else {
					randomSpawnDelay = (TimeUtils.millis() - delayTrashSpawn) / 1000;
				}
			}; break;
			case 288: {
				if (!junkWorldEngines.isOccupiedTrashCell7() &&
						!delayRemoveTrash){
					createTrash();
				}
				else {
					randomSpawnDelay = (TimeUtils.millis() - delayTrashSpawn) / 1000;
				}
			}; break;
			case 419: {
				if (!junkWorldEngines.isOccupiedTrashCell8() &&
						!delayRemoveTrash){
					createTrash();
				}
				else {
					randomSpawnDelay = (TimeUtils.millis() - delayTrashSpawn) / 1000;
				}
			}; break;
			default: break;
			}
		}; break;
		case 488: {
			switch (xTrashSpawnRandom){
			case 32: {
				if (!junkWorldEngines.isOccupiedTrashCell9() &&
						!delayRemoveTrash){
					createTrash();
				}
				else {
					randomSpawnDelay = (TimeUtils.millis() - delayTrashSpawn) / 1000;
				}
			}; break;
			case 160: {
				if (!junkWorldEngines.isOccupiedTrashCell10() &&
						!delayRemoveTrash){
					createTrash();
				}
				else {
					randomSpawnDelay = (TimeUtils.millis() - delayTrashSpawn) / 1000;
				}
			}; break;
			case 288: {
				if (!junkWorldEngines.isOccupiedTrashCell11() &&
						!delayRemoveTrash){
					createTrash();
				}
				else {
					randomSpawnDelay = (TimeUtils.millis() - delayTrashSpawn) / 1000;
				}
			}; break;
			case 419: {
				if (!junkWorldEngines.isOccupiedTrashCell12() &&
						!delayRemoveTrash){
					createTrash();
				}
				else {
					randomSpawnDelay = (TimeUtils.millis() - delayTrashSpawn) / 1000;
				}
			}; break;
			default: break;
			}
		}; break;
		case 424: {
			switch (xTrashSpawnRandom){
			case 32: {
				if (!junkWorldEngines.isOccupiedTrashCell13() &&
						!delayRemoveTrash){
					createTrash();
				}
				else {
					randomSpawnDelay = (TimeUtils.millis() - delayTrashSpawn) / 1000;
				}
			}; break;
			case 160: {
				if (!junkWorldEngines.isOccupiedTrashCell14() &&
						!delayRemoveTrash){
					createTrash();
				}
				else {
					randomSpawnDelay = (TimeUtils.millis() - delayTrashSpawn) / 1000;
				}
			}; break;
			case 288: {
				if (!junkWorldEngines.isOccupiedTrashCell15() &&
						!delayRemoveTrash){
					createTrash();
				}
				else {
					randomSpawnDelay = (TimeUtils.millis() - delayTrashSpawn) / 1000;
				}
			}; break;
			case 419: {
				if (!junkWorldEngines.isOccupiedTrashCell16() &&
						!delayRemoveTrash){
					createTrash();
				}
				else {
					randomSpawnDelay = (TimeUtils.millis() - delayTrashSpawn) / 1000;
				}
			}; break;
			default: break;
			}
		}; break;
		default: break;
		}
	}

	private void createTrash(){
		Rectangle trashRand = trash.random().random().random();

		if (trashLayer.contains(trashRand, true)){
			if (redLayers.contains(trashRand, true)){
				if (bLayers.contains(trashRand, true)){
					if (acornLayer.contains(trashRand, true)){
						addNewLayers(redLayers, bLayers, acornLayer, trashRand);
					}
					else if (hayLayer.contains(trashRand, true)){
						addNewLayers(redLayers, bLayers, hayLayer, trashRand);
					}
					else if (appleLayer.contains(trashRand, true)){
						addNewLayers(redLayers, bLayers, appleLayer, trashRand);
					}
					else if (bananaPeelLayer.contains(trashRand, true)){
						addNewLayers(redLayers, bLayers, bananaPeelLayer, trashRand);
					}
					else if (branchLayer.contains(trashRand, true)){
						addNewLayers(redLayers, bLayers, branchLayer, trashRand);
					}
					else if (deadMouseLayer.contains(trashRand, true)){
						addNewLayers(redLayers, bLayers, deadMouseLayer, trashRand);
					}
					else if (eggShellLayer.contains(trashRand, true)){
						addNewLayers(redLayers, bLayers, eggShellLayer, trashRand);
					}
					else if (featherLayer.contains(trashRand, true)){
						addNewLayers(redLayers, bLayers, featherLayer, trashRand);
					}
					else if (fishBoneLayer.contains(trashRand, true)){
						addNewLayers(redLayers, bLayers, fishBoneLayer, trashRand);
					}
					else if (flowerLayer.contains(trashRand, true)){
						addNewLayers(redLayers, bLayers, flowerLayer, trashRand);
					}
					else if (hairLayer.contains(trashRand, true)){
						addNewLayers(redLayers, bLayers, hairLayer, trashRand);
					}
					else if (grassLayer.contains(trashRand, true)){
						addNewLayers(redLayers, bLayers, grassLayer, trashRand);
					}
					else if (leavesLayer.contains(trashRand, true)){
						addNewLayers(redLayers, bLayers, leavesLayer, trashRand);
					}
					else if (manureLayer.contains(trashRand, true)){
						addNewLayers(redLayers, bLayers, manureLayer, trashRand);
					}
					else if (rootsLayer.contains(trashRand, true)){
						addNewLayers(redLayers, bLayers, rootsLayer, trashRand);
					}
				}
				else if (nrLayers.contains(trashRand, true)){
					if (bottleLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, bottleLayer, trashRand);
					}
					else if (canLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, canLayer, trashRand);
					}
					else if (cardboardLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, cardboardLayer, trashRand);
					}
					else if (cerealBoxLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, cerealBoxLayer, trashRand);
					}
					else if (dirtyShirtLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, dirtyShirtLayer, trashRand);
					}
					else if (envelopeLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, envelopeLayer, trashRand);
					}
					else if (funnelLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, funnelLayer, trashRand);
					}
					else if (hangerLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, hangerLayer, trashRand);
					}
					else if (newspaperLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, newspaperLayer, trashRand);
					}
					else if (paperLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, paperLayer, trashRand);
					}
					else if (pillBottleLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, pillBottleLayer, trashRand);
					}
					else if (plasticBagLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, plasticBagLayer, trashRand);
					}
					else if (tyreLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, tyreLayer, trashRand);
					}
					else if (vaseLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, vaseLayer, trashRand);
					}
					else if (waffleIronLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, waffleIronLayer, trashRand);
					}
				}
				else if (nrLayers.contains(trashRand, true)){
					if (aerosolCanLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, aerosolCanLayer, trashRand);
					}
					else if (brokenBulbLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, brokenBulbLayer, trashRand);
					}
					else if (brokenGlassLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, brokenGlassLayer, trashRand);
					}
					else if (chewingGumLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, chewingGumLayer, trashRand);
					}
					else if (cigaretteLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, cigaretteLayer, trashRand);
					}
					else if (deadBatteryLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, deadBatteryLayer, trashRand);
					}
					else if (dirtyDiaperLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, dirtyDiaperLayer, trashRand);
					}
					else if (insecticideSprayLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, insecticideSprayLayer, trashRand);
					}
					else if (leftoverCakeLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, leftoverCakeLayer, trashRand);
					}
					else if (leftoverChickenLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, leftoverChickenLayer, trashRand);
					}
					else if (nailLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, nailLayer, trashRand);
					}
					else if (paintCanLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, paintCanLayer, trashRand);
					}
					else if (syringeLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, syringeLayer, trashRand);
					}
					else if (tornPaperLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, tornPaperLayer, trashRand);
					}
					else if (usedMotorOilLayer.contains(trashRand, true)){
						addNewLayers(redLayers, nrLayers, usedMotorOilLayer, trashRand);
					}
				}
			}
			else if (orangeLayers.contains(trashRand, true)){
				if (bLayers.contains(trashRand, true)){
					if (acornLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, bLayers, acornLayer, trashRand);
					}
					else if (hayLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, bLayers, hayLayer, trashRand);
					}
					else if (appleLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, bLayers, appleLayer, trashRand);
					}
					else if (bananaPeelLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, bLayers, bananaPeelLayer, trashRand);
					}
					else if (branchLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, bLayers, branchLayer, trashRand);
					}
					else if (deadMouseLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, bLayers, deadMouseLayer, trashRand);
					}
					else if (eggShellLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, bLayers, eggShellLayer, trashRand);
					}
					else if (featherLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, bLayers, featherLayer, trashRand);
					}
					else if (fishBoneLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, bLayers, fishBoneLayer, trashRand);
					}
					else if (flowerLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, bLayers, flowerLayer, trashRand);
					}
					else if (hairLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, bLayers, hairLayer, trashRand);
					}
					else if (grassLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, bLayers, grassLayer, trashRand);
					}
					else if (leavesLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, bLayers, leavesLayer, trashRand);
					}
					else if (manureLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, bLayers, manureLayer, trashRand);
					}
					else if (rootsLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, bLayers, rootsLayer, trashRand);
					}
				}
				else if (nrLayers.contains(trashRand, true)){
					if (bottleLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, bottleLayer, trashRand);
					}
					else if (canLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, canLayer, trashRand);
					}
					else if (cardboardLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, cardboardLayer, trashRand);
					}
					else if (cerealBoxLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, cerealBoxLayer, trashRand);
					}
					else if (dirtyShirtLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, dirtyShirtLayer, trashRand);
					}
					else if (envelopeLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, envelopeLayer, trashRand);
					}
					else if (funnelLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, funnelLayer, trashRand);
					}
					else if (hangerLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, hangerLayer, trashRand);
					}
					else if (newspaperLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, newspaperLayer, trashRand);
					}
					else if (paperLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, paperLayer, trashRand);
					}
					else if (pillBottleLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, pillBottleLayer, trashRand);
					}
					else if (plasticBagLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, plasticBagLayer, trashRand);
					}
					else if (tyreLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, tyreLayer, trashRand);
					}
					else if (vaseLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, vaseLayer, trashRand);
					}
					else if (waffleIronLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, waffleIronLayer, trashRand);
					}
				}
				else if (nrLayers.contains(trashRand, true)){
					if (aerosolCanLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, aerosolCanLayer, trashRand);
					}
					else if (brokenBulbLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, brokenBulbLayer, trashRand);
					}
					else if (brokenGlassLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, brokenGlassLayer, trashRand);
					}
					else if (chewingGumLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, chewingGumLayer, trashRand);
					}
					else if (cigaretteLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, cigaretteLayer, trashRand);
					}
					else if (deadBatteryLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, deadBatteryLayer, trashRand);
					}
					else if (dirtyDiaperLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, dirtyDiaperLayer, trashRand);
					}
					else if (insecticideSprayLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, insecticideSprayLayer, trashRand);
					}
					else if (leftoverCakeLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, leftoverCakeLayer, trashRand);
					}
					else if (leftoverChickenLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, leftoverChickenLayer, trashRand);
					}
					else if (nailLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, nailLayer, trashRand);
					}
					else if (paintCanLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, paintCanLayer, trashRand);
					}
					else if (syringeLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, syringeLayer, trashRand);
					}
					else if (tornPaperLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, tornPaperLayer, trashRand);
					}
					else if (usedMotorOilLayer.contains(trashRand, true)){
						addNewLayers(orangeLayers, nrLayers, usedMotorOilLayer, trashRand);
					}
				}
			}
			else if (yellowLayers.contains(trashRand, true)){
				if (bLayers.contains(trashRand, true)){
					if (acornLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, bLayers, acornLayer, trashRand);
					}
					else if (hayLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, bLayers, hayLayer, trashRand);
					}
					else if (appleLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, bLayers, appleLayer, trashRand);
					}
					else if (bananaPeelLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, bLayers, bananaPeelLayer, trashRand);
					}
					else if (branchLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, bLayers, branchLayer, trashRand);
					}
					else if (deadMouseLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, bLayers, deadMouseLayer, trashRand);
					}
					else if (eggShellLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, bLayers, eggShellLayer, trashRand);
					}
					else if (featherLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, bLayers, featherLayer, trashRand);
					}
					else if (fishBoneLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, bLayers, fishBoneLayer, trashRand);
					}
					else if (flowerLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, bLayers, flowerLayer, trashRand);
					}
					else if (hairLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, bLayers, hairLayer, trashRand);
					}
					else if (grassLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, bLayers, grassLayer, trashRand);
					}
					else if (leavesLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, bLayers, leavesLayer, trashRand);
					}
					else if (manureLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, bLayers, manureLayer, trashRand);
					}
					else if (rootsLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, bLayers, rootsLayer, trashRand);
					}
				}
				else if (nrLayers.contains(trashRand, true)){
					if (bottleLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, bottleLayer, trashRand);
					}
					else if (canLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, canLayer, trashRand);
					}
					else if (cardboardLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, cardboardLayer, trashRand);
					}
					else if (cerealBoxLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, cerealBoxLayer, trashRand);
					}
					else if (dirtyShirtLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, dirtyShirtLayer, trashRand);
					}
					else if (envelopeLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, envelopeLayer, trashRand);
					}
					else if (funnelLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, funnelLayer, trashRand);
					}
					else if (hangerLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, hangerLayer, trashRand);
					}
					else if (newspaperLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, newspaperLayer, trashRand);
					}
					else if (paperLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, paperLayer, trashRand);
					}
					else if (pillBottleLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, pillBottleLayer, trashRand);
					}
					else if (plasticBagLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, plasticBagLayer, trashRand);
					}
					else if (tyreLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, tyreLayer, trashRand);
					}
					else if (vaseLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, vaseLayer, trashRand);
					}
					else if (waffleIronLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, waffleIronLayer, trashRand);
					}
				}
				else if (nrLayers.contains(trashRand, true)){
					if (aerosolCanLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, aerosolCanLayer, trashRand);
					}
					else if (brokenBulbLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, brokenBulbLayer, trashRand);
					}
					else if (brokenGlassLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, brokenGlassLayer, trashRand);
					}
					else if (chewingGumLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, chewingGumLayer, trashRand);
					}
					else if (cigaretteLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, cigaretteLayer, trashRand);
					}
					else if (deadBatteryLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, deadBatteryLayer, trashRand);
					}
					else if (dirtyDiaperLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, dirtyDiaperLayer, trashRand);
					}
					else if (insecticideSprayLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, insecticideSprayLayer, trashRand);
					}
					else if (leftoverCakeLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, leftoverCakeLayer, trashRand);
					}
					else if (leftoverChickenLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, leftoverChickenLayer, trashRand);
					}
					else if (nailLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, nailLayer, trashRand);
					}
					else if (paintCanLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, paintCanLayer, trashRand);
					}
					else if (syringeLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, syringeLayer, trashRand);
					}
					else if (tornPaperLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, tornPaperLayer, trashRand);
					}
					else if (usedMotorOilLayer.contains(trashRand, true)){
						addNewLayers(yellowLayers, nrLayers, usedMotorOilLayer, trashRand);
					}
				}
			}
			else if (greenLayers.contains(trashRand, true)){
				if (bLayers.contains(trashRand, true)){
					if (acornLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, bLayers, acornLayer, trashRand);
					}
					else if (hayLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, bLayers, hayLayer, trashRand);
					}
					else if (appleLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, bLayers, appleLayer, trashRand);
					}
					else if (bananaPeelLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, bLayers, bananaPeelLayer, trashRand);
					}
					else if (branchLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, bLayers, branchLayer, trashRand);
					}
					else if (deadMouseLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, bLayers, deadMouseLayer, trashRand);
					}
					else if (eggShellLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, bLayers, eggShellLayer, trashRand);
					}
					else if (featherLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, bLayers, featherLayer, trashRand);
					}
					else if (fishBoneLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, bLayers, fishBoneLayer, trashRand);
					}
					else if (flowerLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, bLayers, flowerLayer, trashRand);
					}
					else if (hairLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, bLayers, hairLayer, trashRand);
					}
					else if (grassLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, bLayers, grassLayer, trashRand);
					}
					else if (leavesLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, bLayers, leavesLayer, trashRand);
					}
					else if (manureLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, bLayers, manureLayer, trashRand);
					}
					else if (rootsLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, bLayers, rootsLayer, trashRand);
					}
				}
				else if (nrLayers.contains(trashRand, true)){
					if (bottleLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, bottleLayer, trashRand);
					}
					else if (canLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, canLayer, trashRand);
					}
					else if (cardboardLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, cardboardLayer, trashRand);
					}
					else if (cerealBoxLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, cerealBoxLayer, trashRand);
					}
					else if (dirtyShirtLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, dirtyShirtLayer, trashRand);
					}
					else if (envelopeLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, envelopeLayer, trashRand);
					}
					else if (funnelLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, funnelLayer, trashRand);
					}
					else if (hangerLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, hangerLayer, trashRand);
					}
					else if (newspaperLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, newspaperLayer, trashRand);
					}
					else if (paperLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, paperLayer, trashRand);
					}
					else if (pillBottleLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, pillBottleLayer, trashRand);
					}
					else if (plasticBagLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, plasticBagLayer, trashRand);
					}
					else if (tyreLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, tyreLayer, trashRand);
					}
					else if (vaseLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, vaseLayer, trashRand);
					}
					else if (waffleIronLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, waffleIronLayer, trashRand);
					}
				}
				else if (nrLayers.contains(trashRand, true)){
					if (aerosolCanLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, aerosolCanLayer, trashRand);
					}
					else if (brokenBulbLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, brokenBulbLayer, trashRand);
					}
					else if (brokenGlassLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, brokenGlassLayer, trashRand);
					}
					else if (chewingGumLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, chewingGumLayer, trashRand);
					}
					else if (cigaretteLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, cigaretteLayer, trashRand);
					}
					else if (deadBatteryLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, deadBatteryLayer, trashRand);
					}
					else if (dirtyDiaperLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, dirtyDiaperLayer, trashRand);
					}
					else if (insecticideSprayLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, insecticideSprayLayer, trashRand);
					}
					else if (leftoverCakeLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, leftoverCakeLayer, trashRand);
					}
					else if (leftoverChickenLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, leftoverChickenLayer, trashRand);
					}
					else if (nailLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, nailLayer, trashRand);
					}
					else if (paintCanLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, paintCanLayer, trashRand);
					}
					else if (syringeLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, syringeLayer, trashRand);
					}
					else if (tornPaperLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, tornPaperLayer, trashRand);
					}
					else if (usedMotorOilLayer.contains(trashRand, true)){
						addNewLayers(greenLayers, nrLayers, usedMotorOilLayer, trashRand);
					}
				}
			}
			else if (blueLayers.contains(trashRand, true)){
				if (bLayers.contains(trashRand, true)){
					if (acornLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, bLayers, acornLayer, trashRand);
					}
					else if (hayLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, bLayers, hayLayer, trashRand);
					}
					else if (appleLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, bLayers, appleLayer, trashRand);
					}
					else if (bananaPeelLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, bLayers, bananaPeelLayer, trashRand);
					}
					else if (branchLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, bLayers, branchLayer, trashRand);
					}
					else if (deadMouseLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, bLayers, deadMouseLayer, trashRand);
					}
					else if (eggShellLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, bLayers, eggShellLayer, trashRand);
					}
					else if (featherLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, bLayers, featherLayer, trashRand);
					}
					else if (fishBoneLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, bLayers, fishBoneLayer, trashRand);
					}
					else if (flowerLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, bLayers, flowerLayer, trashRand);
					}
					else if (hairLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, bLayers, hairLayer, trashRand);
					}
					else if (grassLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, bLayers, grassLayer, trashRand);
					}
					else if (leavesLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, bLayers, leavesLayer, trashRand);
					}
					else if (manureLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, bLayers, manureLayer, trashRand);
					}
					else if (rootsLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, bLayers, rootsLayer, trashRand);
					}
				}
				else if (nrLayers.contains(trashRand, true)){
					if (bottleLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, bottleLayer, trashRand);
					}
					else if (canLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, canLayer, trashRand);
					}
					else if (cardboardLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, cardboardLayer, trashRand);
					}
					else if (cerealBoxLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, cerealBoxLayer, trashRand);
					}
					else if (dirtyShirtLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, dirtyShirtLayer, trashRand);
					}
					else if (envelopeLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, envelopeLayer, trashRand);
					}
					else if (funnelLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, funnelLayer, trashRand);
					}
					else if (hangerLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, hangerLayer, trashRand);
					}
					else if (newspaperLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, newspaperLayer, trashRand);
					}
					else if (paperLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, paperLayer, trashRand);
					}
					else if (pillBottleLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, pillBottleLayer, trashRand);
					}
					else if (plasticBagLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, plasticBagLayer, trashRand);
					}
					else if (tyreLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, tyreLayer, trashRand);
					}
					else if (vaseLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, vaseLayer, trashRand);
					}
					else if (waffleIronLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, waffleIronLayer, trashRand);
					}
				}
				else if (nrLayers.contains(trashRand, true)){
					if (aerosolCanLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, aerosolCanLayer, trashRand);
					}
					else if (brokenBulbLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, brokenBulbLayer, trashRand);
					}
					else if (brokenGlassLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, brokenGlassLayer, trashRand);
					}
					else if (chewingGumLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, chewingGumLayer, trashRand);
					}
					else if (cigaretteLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, cigaretteLayer, trashRand);
					}
					else if (deadBatteryLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, deadBatteryLayer, trashRand);
					}
					else if (dirtyDiaperLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, dirtyDiaperLayer, trashRand);
					}
					else if (insecticideSprayLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, insecticideSprayLayer, trashRand);
					}
					else if (leftoverCakeLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, leftoverCakeLayer, trashRand);
					}
					else if (leftoverChickenLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, leftoverChickenLayer, trashRand);
					}
					else if (nailLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, nailLayer, trashRand);
					}
					else if (paintCanLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, paintCanLayer, trashRand);
					}
					else if (syringeLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, syringeLayer, trashRand);
					}
					else if (tornPaperLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, tornPaperLayer, trashRand);
					}
					else if (usedMotorOilLayer.contains(trashRand, true)){
						addNewLayers(blueLayers, nrLayers, usedMotorOilLayer, trashRand);
					}
				}
			}
			else if (purpleLayers.contains(trashRand, true)){
				if (bLayers.contains(trashRand, true)){
					if (acornLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, bLayers, acornLayer, trashRand);
					}
					else if (hayLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, bLayers, hayLayer, trashRand);
					}
					else if (appleLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, bLayers, appleLayer, trashRand);
					}
					else if (bananaPeelLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, bLayers, bananaPeelLayer, trashRand);
					}
					else if (branchLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, bLayers, branchLayer, trashRand);
					}
					else if (deadMouseLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, bLayers, deadMouseLayer, trashRand);
					}
					else if (eggShellLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, bLayers, eggShellLayer, trashRand);
					}
					else if (featherLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, bLayers, featherLayer, trashRand);
					}
					else if (fishBoneLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, bLayers, fishBoneLayer, trashRand);
					}
					else if (flowerLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, bLayers, flowerLayer, trashRand);
					}
					else if (hairLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, bLayers, hairLayer, trashRand);
					}
					else if (grassLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, bLayers, grassLayer, trashRand);
					}
					else if (leavesLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, bLayers, leavesLayer, trashRand);
					}
					else if (manureLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, bLayers, manureLayer, trashRand);
					}
					else if (rootsLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, bLayers, rootsLayer, trashRand);
					}
				}
				else if (nrLayers.contains(trashRand, true)){
					if (bottleLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, bottleLayer, trashRand);
					}
					else if (canLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, canLayer, trashRand);
					}
					else if (cardboardLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, cardboardLayer, trashRand);
					}
					else if (cerealBoxLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, cerealBoxLayer, trashRand);
					}
					else if (dirtyShirtLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, dirtyShirtLayer, trashRand);
					}
					else if (envelopeLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, envelopeLayer, trashRand);
					}
					else if (funnelLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, funnelLayer, trashRand);
					}
					else if (hangerLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, hangerLayer, trashRand);
					}
					else if (newspaperLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, newspaperLayer, trashRand);
					}
					else if (paperLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, paperLayer, trashRand);
					}
					else if (pillBottleLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, pillBottleLayer, trashRand);
					}
					else if (plasticBagLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, plasticBagLayer, trashRand);
					}
					else if (tyreLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, tyreLayer, trashRand);
					}
					else if (vaseLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, vaseLayer, trashRand);
					}
					else if (waffleIronLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, waffleIronLayer, trashRand);
					}
				}
				else if (nrLayers.contains(trashRand, true)){
					if (aerosolCanLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, aerosolCanLayer, trashRand);
					}
					else if (brokenBulbLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, brokenBulbLayer, trashRand);
					}
					else if (brokenGlassLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, brokenGlassLayer, trashRand);
					}
					else if (chewingGumLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, chewingGumLayer, trashRand);
					}
					else if (cigaretteLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, cigaretteLayer, trashRand);
					}
					else if (deadBatteryLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, deadBatteryLayer, trashRand);
					}
					else if (dirtyDiaperLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, dirtyDiaperLayer, trashRand);
					}
					else if (insecticideSprayLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, insecticideSprayLayer, trashRand);
					}
					else if (leftoverCakeLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, leftoverCakeLayer, trashRand);
					}
					else if (leftoverChickenLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, leftoverChickenLayer, trashRand);
					}
					else if (nailLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, nailLayer, trashRand);
					}
					else if (paintCanLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, paintCanLayer, trashRand);
					}
					else if (syringeLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, syringeLayer, trashRand);
					}
					else if (tornPaperLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, tornPaperLayer, trashRand);
					}
					else if (usedMotorOilLayer.contains(trashRand, true)){
						addNewLayers(purpleLayers, nrLayers, usedMotorOilLayer, trashRand);
					}
				}
			}
		}
		else {
			initialSpeed.add(new Float(0f));
			trashLayer.add(trashRand);
			trashLayer.peek().x = xTrashSpawnRandom;
			trashLayer.peek().y = yTrashSpawnRandom;
		}
	}

	private void addNewLayers(Array<Rectangle> colorArray, Array<Rectangle> typeArray, Array<Rectangle> trashArray, Rectangle trashRand){
		Rectangle duplicLayer = new Rectangle(trashRand);
		colorArray.add(duplicLayer);
		typeArray.add(duplicLayer);
		trashArray.add(duplicLayer);

		initialSpeed.add(0f);
		trashLayer.add(duplicLayer);
		trashLayer.peek().x = xTrashSpawnRandom;
		trashLayer.peek().y = yTrashSpawnRandom;
	}

	private void setTrashCanState() {
		if (currentCan1State == CURRENTCAN1STATE.FULL){
			currentTrashCan1 = trashCan1RegionFull;
		}
		if (currentCan2State == CURRENTCAN2STATE.FULL){
			currentTrashCan2 = trashCan2RegionFull;
		}
		if (currentCan3State == CURRENTCAN3STATE.FULL){
			currentTrashCan3 = trashCan3RegionFull;
		}
		if (currentCan4State == CURRENTCAN4STATE.FULL){
			currentTrashCan4 = trashCan4RegionFull;
		}

		if (currentCan1State == CURRENTCAN1STATE.EMPTY){
			currentTrashCan1 = trashCan1Region;
		} 
		if (currentCan2State == CURRENTCAN2STATE.EMPTY){
			currentTrashCan2 = trashCan2Region;
		}
		if (currentCan3State == CURRENTCAN3STATE.EMPTY){
			currentTrashCan3 = trashCan3Region;
		}
		if (currentCan4State == CURRENTCAN4STATE.EMPTY){
			currentTrashCan4 = trashCan4Region;
		}

		trashCan1Indicator.set(trashCan1Layer.x + 32, (trashCan1Layer.y + trashCan1Layer.height) - 1, 64, 1);
		trashCan2Indicator.set(trashCan2Layer.x + 32, (trashCan2Layer.y + trashCan2Layer.height) - 1, 64, 1);
		trashCan3Indicator.set(trashCan3Layer.x + 32, (trashCan3Layer.y + trashCan3Layer.height) - 1, 64, 1);
		trashCan4Indicator.set(trashCan4Layer.x + 32, (trashCan4Layer.y + trashCan4Layer.height) - 1, 64, 1);
	}

	private void changeCanColor(int trashCan){
		switch (trashCan){
		case 1: {
			switch (trashCanSelected){
			case FIRST: {
				switch (gamePalette.getFirstPalette()){
				case 1: trashCan1Properties.setTrashCanColor(1); break;
				case 2: trashCan1Properties.setTrashCanColor(2); break;
				case 3: trashCan1Properties.setTrashCanColor(3); break;
				case 4: trashCan1Properties.setTrashCanColor(4); break;
				case 5: trashCan1Properties.setTrashCanColor(5); break;
				case 6: trashCan1Properties.setTrashCanColor(6); break;
				default: break;
				}
			}; break;
			case SECOND: {
				switch (gamePalette.getFirstPalette()){
				case 1: trashCan2Properties.setTrashCanColor(1); break;
				case 2: trashCan2Properties.setTrashCanColor(2); break;
				case 3: trashCan2Properties.setTrashCanColor(3); break;
				case 4: trashCan2Properties.setTrashCanColor(4); break;
				case 5: trashCan2Properties.setTrashCanColor(5); break;
				case 6: trashCan2Properties.setTrashCanColor(6); break;
				default: break;
				}
			}; break;
			case THIRD: {
				switch (gamePalette.getFirstPalette()){
				case 1: trashCan3Properties.setTrashCanColor(1); break;
				case 2: trashCan3Properties.setTrashCanColor(2); break;
				case 3: trashCan3Properties.setTrashCanColor(3); break;
				case 4: trashCan3Properties.setTrashCanColor(4); break;
				case 5: trashCan3Properties.setTrashCanColor(5); break;
				case 6: trashCan3Properties.setTrashCanColor(6); break;
				default: break;
				}
			}; break;
			case FOURTH: {
				switch (gamePalette.getFirstPalette()){
				case 1: trashCan4Properties.setTrashCanColor(1); break;
				case 2: trashCan4Properties.setTrashCanColor(2); break;
				case 3: trashCan4Properties.setTrashCanColor(3); break;
				case 4: trashCan4Properties.setTrashCanColor(4); break;
				case 5: trashCan4Properties.setTrashCanColor(5); break;
				case 6: trashCan4Properties.setTrashCanColor(6); break;
				default: break;
				}
			}; break;
			default :break;
			}
		}; break;
		case 2: {
			switch (trashCanSelected){
			case FIRST: {
				switch (gamePalette.getSecondPalette()){
				case 1: trashCan1Properties.setTrashCanColor(1); break;
				case 2: trashCan1Properties.setTrashCanColor(2); break;
				case 3: trashCan1Properties.setTrashCanColor(3); break;
				case 4: trashCan1Properties.setTrashCanColor(4); break;
				case 5: trashCan1Properties.setTrashCanColor(5); break;
				case 6: trashCan1Properties.setTrashCanColor(6); break;
				default: break;
				}
			}; break;
			case SECOND: {
				switch (gamePalette.getSecondPalette()){
				case 1: trashCan2Properties.setTrashCanColor(1); break;
				case 2: trashCan2Properties.setTrashCanColor(2); break;
				case 3: trashCan2Properties.setTrashCanColor(3); break;
				case 4: trashCan2Properties.setTrashCanColor(4); break;
				case 5: trashCan2Properties.setTrashCanColor(5); break;
				case 6: trashCan2Properties.setTrashCanColor(6); break;
				default: break;
				}
			}; break;
			case THIRD: {
				switch (gamePalette.getSecondPalette()){
				case 1: trashCan3Properties.setTrashCanColor(1); break;
				case 2: trashCan3Properties.setTrashCanColor(2); break;
				case 3: trashCan3Properties.setTrashCanColor(3); break;
				case 4: trashCan3Properties.setTrashCanColor(4); break;
				case 5: trashCan3Properties.setTrashCanColor(5); break;
				case 6: trashCan3Properties.setTrashCanColor(6); break;
				default: break;
				}
			}; break;
			case FOURTH: {
				switch (gamePalette.getSecondPalette()){
				case 1: trashCan4Properties.setTrashCanColor(1); break;
				case 2: trashCan4Properties.setTrashCanColor(2); break;
				case 3: trashCan4Properties.setTrashCanColor(3); break;
				case 4: trashCan4Properties.setTrashCanColor(4); break;
				case 5: trashCan4Properties.setTrashCanColor(5); break;
				case 6: trashCan4Properties.setTrashCanColor(6); break;
				default: break;
				}
			}; break;
			default :break;
			}
		}; break;
		case 3: {
			switch (trashCanSelected){
			case FIRST: {
				switch (gamePalette.getThirdPalette()){
				case 1: trashCan1Properties.setTrashCanColor(1); break;
				case 2: trashCan1Properties.setTrashCanColor(2); break;
				case 3: trashCan1Properties.setTrashCanColor(3); break;
				case 4: trashCan1Properties.setTrashCanColor(4); break;
				case 5: trashCan1Properties.setTrashCanColor(5); break;
				case 6: trashCan1Properties.setTrashCanColor(6); break;
				default: break;
				}
			}; break;
			case SECOND: {
				switch (gamePalette.getThirdPalette()){
				case 1: trashCan2Properties.setTrashCanColor(1); break;
				case 2: trashCan2Properties.setTrashCanColor(2); break;
				case 3: trashCan2Properties.setTrashCanColor(3); break;
				case 4: trashCan2Properties.setTrashCanColor(4); break;
				case 5: trashCan2Properties.setTrashCanColor(5); break;
				case 6: trashCan2Properties.setTrashCanColor(6); break;
				default: break;
				}
			}; break;
			case THIRD: {
				switch (gamePalette.getThirdPalette()){
				case 1: trashCan3Properties.setTrashCanColor(1); break;
				case 2: trashCan3Properties.setTrashCanColor(2); break;
				case 3: trashCan3Properties.setTrashCanColor(3); break;
				case 4: trashCan3Properties.setTrashCanColor(4); break;
				case 5: trashCan3Properties.setTrashCanColor(5); break;
				case 6: trashCan3Properties.setTrashCanColor(6); break;
				default: break;
				}
			}; break;
			case FOURTH: {
				switch (gamePalette.getThirdPalette()){
				case 1: trashCan4Properties.setTrashCanColor(1); break;
				case 2: trashCan4Properties.setTrashCanColor(2); break;
				case 3: trashCan4Properties.setTrashCanColor(3); break;
				case 4: trashCan4Properties.setTrashCanColor(4); break;
				case 5: trashCan4Properties.setTrashCanColor(5); break;
				case 6: trashCan4Properties.setTrashCanColor(6); break;
				default: break;
				}
			}; break;
			default :break;
			}
		}; break;
		case 4: {
			switch (trashCanSelected){
			case FIRST: {
				switch (gamePalette.getFourthPalette()){
				case 1: trashCan1Properties.setTrashCanColor(1); break;
				case 2: trashCan1Properties.setTrashCanColor(2); break;
				case 3: trashCan1Properties.setTrashCanColor(3); break;
				case 4: trashCan1Properties.setTrashCanColor(4); break;
				case 5: trashCan1Properties.setTrashCanColor(5); break;
				case 6: trashCan1Properties.setTrashCanColor(6); break;
				default: break;
				}
			}; break;
			case SECOND: {
				switch (gamePalette.getFourthPalette()){
				case 1: trashCan2Properties.setTrashCanColor(1); break;
				case 2: trashCan2Properties.setTrashCanColor(2); break;
				case 3: trashCan2Properties.setTrashCanColor(3); break;
				case 4: trashCan2Properties.setTrashCanColor(4); break;
				case 5: trashCan2Properties.setTrashCanColor(5); break;
				case 6: trashCan2Properties.setTrashCanColor(6); break;
				default: break;
				}
			}; break;
			case THIRD: {
				switch (gamePalette.getFourthPalette()){
				case 1: trashCan3Properties.setTrashCanColor(1); break;
				case 2: trashCan3Properties.setTrashCanColor(2); break;
				case 3: trashCan3Properties.setTrashCanColor(3); break;
				case 4: trashCan3Properties.setTrashCanColor(4); break;
				case 5: trashCan3Properties.setTrashCanColor(5); break;
				case 6: trashCan3Properties.setTrashCanColor(6); break;
				default: break;
				}
			}; break;
			case FOURTH: {
				switch (gamePalette.getFourthPalette()){
				case 1: trashCan4Properties.setTrashCanColor(1); break;
				case 2: trashCan4Properties.setTrashCanColor(2); break;
				case 3: trashCan4Properties.setTrashCanColor(3); break;
				case 4: trashCan4Properties.setTrashCanColor(4); break;
				case 5: trashCan4Properties.setTrashCanColor(5); break;
				case 6: trashCan4Properties.setTrashCanColor(6); break;
				default: break;
				}
			}; break;
			default :break;
			}
		}; break;
		default: break;
		}
	}

	private void changePaletteColor(int paletteNum){
		if (junkWorldEngines.getGameMode() == 0){
			junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
		}
		switch (paletteNum){
		case 1: {
			switch (currentSelectedCanColor){
			case DULL1: gamePalette.setFirstPalette(previousDullCanColor.get(0)); break;
			case DULL2: gamePalette.setFirstPalette(previousDullCanColor.get(1)); break;
			case DULL3: gamePalette.setFirstPalette(previousDullCanColor.get(2)); break;
			case DULL4: gamePalette.setFirstPalette(previousDullCanColor.get(3)); break;
			case RED: gamePalette.setFirstPalette(1); break;
			case ORANGE: gamePalette.setFirstPalette(2); break;
			case YELLOW: gamePalette.setFirstPalette(3); break;
			case GREEN: gamePalette.setFirstPalette(4); break;
			case BLUE: gamePalette.setFirstPalette(5); break;
			case PURPLE: gamePalette.setFirstPalette(6); break;
			default: break;
			}
		}; break;
		case 2: {
			switch (currentSelectedCanColor){
			case DULL1: gamePalette.setSecondPalette(previousDullCanColor.get(0)); break;
			case DULL2: gamePalette.setSecondPalette(previousDullCanColor.get(1)); break;
			case DULL3: gamePalette.setSecondPalette(previousDullCanColor.get(2)); break;
			case DULL4: gamePalette.setSecondPalette(previousDullCanColor.get(3)); break;
			case RED: gamePalette.setSecondPalette(1); break;
			case ORANGE: gamePalette.setSecondPalette(2); break;
			case YELLOW: gamePalette.setSecondPalette(3); break;
			case GREEN: gamePalette.setSecondPalette(4); break;
			case BLUE: gamePalette.setSecondPalette(5); break;
			case PURPLE: gamePalette.setSecondPalette(6); break;
			default : break;
			}
		}; break;
		case 3: {
			switch (currentSelectedCanColor){
			case DULL1: gamePalette.setThirdPalette(previousDullCanColor.get(0)); break;
			case DULL2: gamePalette.setThirdPalette(previousDullCanColor.get(1)); break;
			case DULL3: gamePalette.setThirdPalette(previousDullCanColor.get(2)); break;
			case DULL4: gamePalette.setThirdPalette(previousDullCanColor.get(3)); break;
			case RED: gamePalette.setThirdPalette(1); break;
			case ORANGE: gamePalette.setThirdPalette(2); break;
			case YELLOW: gamePalette.setThirdPalette(3); break;
			case GREEN: gamePalette.setThirdPalette(4); break;
			case BLUE: gamePalette.setThirdPalette(5); break;
			case PURPLE: gamePalette.setThirdPalette(6); break;
			default : break;
			}
		}; break;
		case 4: {
			switch (currentSelectedCanColor){
			case DULL1: gamePalette.setFourthPalette(previousDullCanColor.get(0)); break;
			case DULL2: gamePalette.setFourthPalette(previousDullCanColor.get(1)); break;
			case DULL3: gamePalette.setFourthPalette(previousDullCanColor.get(2)); break;
			case DULL4: gamePalette.setFourthPalette(previousDullCanColor.get(3)); break;
			case RED: gamePalette.setFourthPalette(1); break;
			case ORANGE: gamePalette.setFourthPalette(2); break;
			case YELLOW: gamePalette.setFourthPalette(3); break;
			case GREEN: gamePalette.setFourthPalette(4); break;
			case BLUE: gamePalette.setFourthPalette(5); break;
			case PURPLE: gamePalette.setFourthPalette(6); break;
			default : break;
			}
		}; break;
		default: break;
		}
		disallow = false;
		delayReUpdateStates();
	}

	private void threadDelays() {

		if (delayItemActive != 0){
			if (TimeUtils.nanoTime() - delayItemActive >= 10000000){
				delayItemActive = 0;
				itemActive = true;
			}
		}

		if (delayColListener != 0){
			if (TimeUtils.nanoTime() - delayColListener >= 10000){
				delayColListener = 0;
				junkWorldEngines.setClickableCol(true);
			}
		}

		if (delayColorTypeListener != 0){
			if (TimeUtils.nanoTime() - delayColorTypeListener >= 10000000){
				delayColorTypeListener = 0;
				switch (currentBottomHUDState){
				case ABILITY_SELECTION: {
					if (typeOrColorSelectionRegion == typeSelectionRegion){
						currentBottomHUDState = CurrentBottomHUDState.TYPE_SELECTION;
						setTrashCanDelay = true;
						setTrashCanColor = true;
						setTrashCanType = false;
						currentSelectedPalette = CurrentSelectedPalette.NONE;
						currentSelectedCanColor = CurrentSelectedCanColor.NONE;
						currentSelectedType = CurrentSelectedType.NONE;
					}
					else {
						currentBottomHUDState = CurrentBottomHUDState.COLOR_SELECTION;
						setTrashCanDelay = true;
						setTrashCanColor = false;
						setTrashCanType = true;
						currentSelectedPalette = CurrentSelectedPalette.NONE;
						currentSelectedCanColor = CurrentSelectedCanColor.NONE;
						currentSelectedType = CurrentSelectedType.NONE;
					}
				}; break;
				case COLOR_SELECTION: {
					currentBottomHUDState = CurrentBottomHUDState.TYPE_SELECTION;
					setTrashCanDelay = true;
					setTrashCanColor = true;
					setTrashCanType = false;
					currentSelectedPalette = CurrentSelectedPalette.NONE;
					currentSelectedCanColor = CurrentSelectedCanColor.NONE;
					currentSelectedType = CurrentSelectedType.NONE;
				}; break;
				case TYPE_SELECTION: {
					currentBottomHUDState = CurrentBottomHUDState.COLOR_SELECTION;
					setTrashCanDelay = true;
					setTrashCanColor = false;
					setTrashCanType = true;
					currentSelectedPalette = CurrentSelectedPalette.NONE;
					currentSelectedCanColor = CurrentSelectedCanColor.NONE;
					currentSelectedType = CurrentSelectedType.NONE;
				}; break;
				default: break;
				}
			}
		}

		if (delayAbilityListener != 0){
			if (TimeUtils.nanoTime() - delayAbilityListener >= 10000000){
				delayAbilityListener = 0;
				if (currentBottomHUDState == CurrentBottomHUDState.COLOR_SELECTION ||
						currentBottomHUDState == CurrentBottomHUDState.TYPE_SELECTION){
					currentBottomHUDState = CurrentBottomHUDState.ABILITY_SELECTION;
				}
				else {
					if (typeOrColorSelectionRegion == colorSelectionRegion){
						currentBottomHUDState = CurrentBottomHUDState.TYPE_SELECTION;
						setTrashCanDelay = true;
						setTrashCanColor = true;
						setTrashCanType = false;
						currentSelectedPalette = CurrentSelectedPalette.NONE;
						currentSelectedCanColor = CurrentSelectedCanColor.NONE;
						currentSelectedType = CurrentSelectedType.NONE;
					}
					else {
						currentBottomHUDState = CurrentBottomHUDState.COLOR_SELECTION;
						setTrashCanDelay = true;
						setTrashCanColor = false;
						setTrashCanType = true;
						currentSelectedPalette = CurrentSelectedPalette.NONE;
						currentSelectedCanColor = CurrentSelectedCanColor.NONE;
						currentSelectedType = CurrentSelectedType.NONE;
					}
				}
			}
		}

		if (delayCancelCurrentSelections != 0){
			if (TimeUtils.nanoTime() - delayCancelCurrentSelections >= 10000){
				if (Gdx.input.justTouched()){
					delayCancelCurrentSelections = 0;
					if ((!(touchPos.x >= selection1Layer.x &&
							touchPos.x < selection4Layer.x + selection4Layer.width &&
							touchPos.y >= selection1Layer.y &&
							touchPos.y < selection1Layer.y + selection1Layer.height) &&
							!(touchPos.x >= trashCan1Layer.x &&
							touchPos.x < trashCan1Layer.x + trashCan1Layer.width &&
							touchPos.y >= trashCan1Layer.y && 
							touchPos.y < trashCan1Layer.y + trashCan1Layer.height &&
							!moveTrashCan1 &&
							!returnTrashCanOf1 &&
							!unclickableCan1) &&
							!(touchPos.x >= trashCan2Layer.x &&
							touchPos.x < trashCan2Layer.x + trashCan2Layer.width &&
							touchPos.y >= trashCan2Layer.y && 
							touchPos.y < trashCan2Layer.y + trashCan2Layer.height &&
							!moveTrashCan2 &&
							!returnTrashCanOf2 &&
							!unclickableCan2) &&
							!(touchPos.x >= trashCan3Layer.x &&
							touchPos.x < trashCan3Layer.x + trashCan3Layer.width &&
							touchPos.y >= trashCan3Layer.y && 
							touchPos.y < trashCan3Layer.y + trashCan3Layer.height &&
							!moveTrashCan3 &&
							!returnTrashCanOf3 &&
							!unclickableCan3) &&
							!(touchPos.x >= trashCan4Layer.x &&
							touchPos.x < trashCan4Layer.x + trashCan4Layer.width &&
							touchPos.y >= trashCan4Layer.y && 
							touchPos.y < trashCan4Layer.y + trashCan4Layer.height &&
							!moveTrashCan4 &&
							!returnTrashCanOf4 &&
							!unclickableCan4)) ||
							(touchPos.x >= trashCan1Layer.x && touchPos.x < trashCan1Layer.x + trashCan1Layer.width &&
							touchPos.y >= trashCan1Layer.y && touchPos.y < trashCan1Layer.y + trashCan1Layer.height && 
							trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7 && currentBottomHUDState == CurrentBottomHUDState.COLOR_SELECTION) ||
							(touchPos.x >= trashCan2Layer.x && touchPos.x < trashCan2Layer.x + trashCan2Layer.width &&
							touchPos.y >= trashCan2Layer.y && touchPos.y < trashCan2Layer.y + trashCan2Layer.height && 
							trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7 && currentBottomHUDState == CurrentBottomHUDState.COLOR_SELECTION) ||
							(touchPos.x >= trashCan3Layer.x && touchPos.x < trashCan3Layer.x + trashCan3Layer.width &&
							touchPos.y >= trashCan3Layer.y && touchPos.y < trashCan3Layer.y + trashCan3Layer.height && 
							trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7 && currentBottomHUDState == CurrentBottomHUDState.COLOR_SELECTION) ||
							(touchPos.x >= trashCan4Layer.x && touchPos.x < trashCan4Layer.x + trashCan4Layer.width &&
							touchPos.y >= trashCan4Layer.y && touchPos.y < trashCan4Layer.y + trashCan4Layer.height && 
							trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7 && currentBottomHUDState == CurrentBottomHUDState.COLOR_SELECTION)){
						delayReUpdateStates();
					}
					else {
						delayCancelCurrentSelections = 0;
					}
				}
			}
		}

		//		TODO delays for BottomHUD

		if (delaySelection1 != 0){
			if (TimeUtils.nanoTime() - delaySelection1 >= 10000){
				delaySelection1 = 0;
				if (isLongPressed){
					if (junkWorldEngines.getGameMode() == 0){
						junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
					}
					if (currentAbilityState1 != CURRENTABILITYSTATE1.UNCLICKABLE){
						switch (trashCan1Properties.getTrashCan()){
						case 1:{
							if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF &&
									averageCount1 <= 1){
								currentAbilityState1 = CURRENTABILITYSTATE1.ON;
							}
							else currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
						}; break;
						case 2:{
							if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
								currentAbilityState1 = CURRENTABILITYSTATE1.ON;
								delayDuration1 = TimeUtils.millis();
								delayFrameRate1 = TimeUtils.millis();
								delayCooldown1 = TimeUtils.millis();
							}
							else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
								currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
							}
						}; break;
						case 3:{
							if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
								currentAbilityState1 = CURRENTABILITYSTATE1.ON;
								delayDuration1 = TimeUtils.millis();
								delayFrameRate1 = TimeUtils.millis();
								delayCooldown1 = TimeUtils.millis();
							}
							else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
								currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
							}
						}; break;
						case 4:{
							if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
								currentAbilityState1 = CURRENTABILITYSTATE1.ON;
								delayDuration1 = TimeUtils.millis();
								delayFrameRate1 = TimeUtils.millis();
								delayCooldown1 = TimeUtils.millis();
							}
							else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
								currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
							}
						}; break;
						case 5:{
							if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
								if (trashCan1Properties.getTrashCanColor() != 0){
									dullPrevColor1 = trashCan1Properties.getTrashCanColor();
								}
								else {
									dullPrevColor1 = previousDullCanColor.get(0);
								}
								trashCan1Properties.setTrashCanColor(7);
								if (currentCapacity1 > 1){
									notDumped += currentCapacity1 - 1;
									currentCapacity1 = 1;
								}
								trashCan1Capacity = 1;
								currentAbilityState1 = CURRENTABILITYSTATE1.ON;
							}
							else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
								trashCan1Capacity = junkWorldEngines.getDullCanCapacity();
								trashCan1Properties.setTrashCanColor(dullPrevColor1);
								currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
							}
						}; break;
						case 6:{
							if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
								delayEnergy1Anim = TimeUtils.millis();
								currentAbilityState1 = CURRENTABILITYSTATE1.ON;
							}
							else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
								delayEnergy1Anim = 0;
								currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
							}
						}; break;
						default: break;
						}
						delayReUpdateStates();
					}
				}
				else {
					switch (currentBottomHUDState){
					case ABILITY_SELECTION:{
						if (junkWorldEngines.getGameMode() == 0){
							junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
						}
						if (trashCan1AbilityPos == 1 &&
								isTrashCan1){
							if (currentAbilityState1 != CURRENTABILITYSTATE1.UNCLICKABLE){
								switch (trashCan1Properties.getTrashCan()){
								case 1:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF &&
											averageCount1 <= 1){
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
									}
									else currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
								}; break;
								case 2:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
										delayDuration1 = TimeUtils.millis();
										delayFrameRate1 = TimeUtils.millis();
										delayCooldown1 = TimeUtils.millis();
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
									}
								}; break;
								case 3:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
										delayDuration1 = TimeUtils.millis();
										delayFrameRate1 = TimeUtils.millis();
										delayCooldown1 = TimeUtils.millis();
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
									}
								}; break;
								case 4:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
										delayDuration1 = TimeUtils.millis();
										delayFrameRate1 = TimeUtils.millis();
										delayCooldown1 = TimeUtils.millis();
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
									}
								}; break;
								case 5:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										if (trashCan1Properties.getTrashCanColor() != 0){
											dullPrevColor1 = trashCan1Properties.getTrashCanColor();
										}
										else {
											dullPrevColor1 = previousDullCanColor.get(0);
										}
										trashCan1Properties.setTrashCanColor(7);
										if (currentCapacity1 > 1){
											notDumped += currentCapacity1 - 1;
											currentCapacity1 = 1;
										}
										trashCan1Capacity = 1;
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										trashCan1Capacity = junkWorldEngines.getDullCanCapacity();
										trashCan1Properties.setTrashCanColor(dullPrevColor1);
										currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
									}
								}; break;
								case 6:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										delayEnergy1Anim = TimeUtils.millis();
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										delayEnergy1Anim = 0;
										currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
									}
								}; break;
								default: break;
								}
							}
						}
						else if (trashCan2AbilityPos == 1 &&
								isTrashCan2){
							if (currentAbilityState2 != CURRENTABILITYSTATE2.UNCLICKABLE){
								switch (trashCan2Properties.getTrashCan()){
								case 1:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF &&
											averageCount2 <= 1){
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
									}
									else currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
								}; break;
								case 2:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
										delayDuration2 = TimeUtils.millis();
										delayFrameRate2 = TimeUtils.millis();
										delayCooldown2 = TimeUtils.millis();
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
									}
								}; break;
								case 3:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
										delayDuration2 = TimeUtils.millis();
										delayFrameRate2 = TimeUtils.millis();
										delayCooldown2 = TimeUtils.millis();
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
									}
								}; break;
								case 4:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
										delayDuration2 = TimeUtils.millis();
										delayFrameRate2 = TimeUtils.millis();
										delayCooldown2 = TimeUtils.millis();
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
									}
								}; break;
								case 5:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										if (trashCan2Properties.getTrashCanColor() != 0){
											dullPrevColor2 = trashCan2Properties.getTrashCanColor();
										}
										else {
											dullPrevColor2 = previousDullCanColor.get(1);
										}
										trashCan2Properties.setTrashCanColor(7);
										if (currentCapacity2 > 1){
											notDumped += currentCapacity2 - 1;
											currentCapacity2 = 1;
										}
										trashCan2Capacity = 1;
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										trashCan2Capacity = junkWorldEngines.getDullCanCapacity();
										trashCan2Properties.setTrashCanColor(dullPrevColor2);
										currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
									}
								}; break;
								case 6:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										delayEnergy2Anim = TimeUtils.millis();
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										delayEnergy2Anim = 0;
										currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
									}
								}; break;
								default: break;
								}
							}
						}
						else if (trashCan3AbilityPos == 1 &&
								isTrashCan3){
							if (currentAbilityState3 != CURRENTABILITYSTATE3.UNCLICKABLE){
								switch (trashCan3Properties.getTrashCan()){
								case 1:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF &&
											averageCount3 <= 1){
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
									}
									else currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
								}; break;
								case 2:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
										delayDuration3 = TimeUtils.millis();
										delayFrameRate3 = TimeUtils.millis();
										delayCooldown3 = TimeUtils.millis();
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
									}
								}; break;
								case 3:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
										delayDuration3 = TimeUtils.millis();
										delayFrameRate3 = TimeUtils.millis();
										delayCooldown3 = TimeUtils.millis();
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
									}
								}; break;
								case 4:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
										delayDuration3 = TimeUtils.millis();
										delayFrameRate3 = TimeUtils.millis();
										delayCooldown3 = TimeUtils.millis();
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
									}
								}; break;
								case 5:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										if (trashCan3Properties.getTrashCanColor() != 0){
											dullPrevColor3 = trashCan3Properties.getTrashCanColor();
										}
										else {
											dullPrevColor3 = previousDullCanColor.get(2);
										}
										trashCan3Properties.setTrashCanColor(7);
										if (currentCapacity3 > 1){
											notDumped += currentCapacity3 - 1;
											currentCapacity3 = 1;
										}
										trashCan3Capacity = 1;
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										trashCan3Capacity = junkWorldEngines.getDullCanCapacity();
										trashCan3Properties.setTrashCanColor(dullPrevColor3);
										currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
									}
								}; break;
								case 6:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										delayEnergy3Anim = TimeUtils.millis();
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										delayEnergy3Anim = 0;
										currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
									}
								}; break;
								default: break;
								}
							}
						}
						else if (trashCan4AbilityPos == 1 &&
								isTrashCan4){
							if (currentAbilityState4 != CURRENTABILITYSTATE4.UNCLICKABLE){
								switch (trashCan4Properties.getTrashCan()){
								case 1:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF &&
											averageCount4 <= 1){
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
									}
									else currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
								}; break;
								case 2:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
										delayDuration4 = TimeUtils.millis();
										delayFrameRate4 = TimeUtils.millis();
										delayCooldown4 = TimeUtils.millis();
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
									}
								}; break;
								case 3:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
										delayDuration4 = TimeUtils.millis();
										delayFrameRate4 = TimeUtils.millis();
										delayCooldown4 = TimeUtils.millis();
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
									}
								}; break;
								case 4:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
										delayDuration4 = TimeUtils.millis();
										delayFrameRate4 = TimeUtils.millis();
										delayCooldown4 = TimeUtils.millis();
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
									}
								}; break;
								case 5:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										if (trashCan4Properties.getTrashCanColor() != 0){
											dullPrevColor4 = trashCan4Properties.getTrashCanColor();
										}
										else {
											dullPrevColor4 = previousDullCanColor.get(3);
										}
										trashCan4Properties.setTrashCanColor(7);
										if (currentCapacity4 > 1){
											notDumped += currentCapacity4 - 1;
											currentCapacity4 = 1;
										}
										trashCan4Capacity = 1;
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										trashCan4Capacity = junkWorldEngines.getDullCanCapacity();
										trashCan4Properties.setTrashCanColor(dullPrevColor4);
										currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
									}
								}; break;
								case 6:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										delayEnergy4Anim = TimeUtils.millis();
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										delayEnergy4Anim = 0;
										currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
									}
								}; break;
								default: break;
								}
							}
						}
						delayReUpdateStates();
					}; break;
					case TYPE_SELECTION:{
						if (currentSelectedType != CurrentSelectedType.BIODEGRADABLE){
							currentSelectedType = CurrentSelectedType.BIODEGRADABLE;
							setTrashCanType = true;
							delayCancelCurrentSelections = TimeUtils.nanoTime();
						}
						else {
							currentSelectedType = CurrentSelectedType.NONE;
							setTrashCanType = false;
						}
					}; break;
					case COLOR_SELECTION:{
						if (currentSelectedCanColor == CurrentSelectedCanColor.NONE){
							currentSelectedPalette = CurrentSelectedPalette.FIRST;
							switch (gamePalette.getFirstPalette()){
							case 1: currentSelectedCanColor = CurrentSelectedCanColor.RED; break;
							case 2: currentSelectedCanColor = CurrentSelectedCanColor.ORANGE; break;
							case 3: currentSelectedCanColor = CurrentSelectedCanColor.YELLOW; break;
							case 4: currentSelectedCanColor = CurrentSelectedCanColor.GREEN; break;
							case 5: currentSelectedCanColor = CurrentSelectedCanColor.BLUE; break;
							case 6: currentSelectedCanColor = CurrentSelectedCanColor.PURPLE; break;
							default: break;
							}
							setTrashCanColor = true;
							delayCancelCurrentSelections = TimeUtils.nanoTime();
						}
						else {
							if (currentSelectedPalette != CurrentSelectedPalette.NONE){
								switch (currentSelectedPalette){
								case FIRST: {
									switch (gamePalette.getFirstPalette()){
									case 1: gamePalette.setFirstPalette(1); break;
									case 2: gamePalette.setFirstPalette(2); break;
									case 3: gamePalette.setFirstPalette(3); break;
									case 4: gamePalette.setFirstPalette(4); break;
									case 5: gamePalette.setFirstPalette(5); break;
									case 6: gamePalette.setFirstPalette(6); break;
									default: break;
									}
								}; break;
								case SECOND: {
									switch (gamePalette.getFirstPalette()){
									case 1: gamePalette.setSecondPalette(1); break;
									case 2: gamePalette.setSecondPalette(2); break;
									case 3: gamePalette.setSecondPalette(3); break;
									case 4: gamePalette.setSecondPalette(4); break;
									case 5: gamePalette.setSecondPalette(5); break;
									case 6: gamePalette.setSecondPalette(6); break;
									default: break;
									}
								}; break;
								case THIRD: {
									switch (gamePalette.getFirstPalette()){
									case 1: gamePalette.setThirdPalette(1); break;
									case 2: gamePalette.setThirdPalette(2); break;
									case 3: gamePalette.setThirdPalette(3); break;
									case 4: gamePalette.setThirdPalette(4); break;
									case 5: gamePalette.setThirdPalette(5); break;
									case 6: gamePalette.setThirdPalette(6); break;
									default: break;
									}
								}; break;
								case FOURTH: {
									switch (gamePalette.getFirstPalette()){
									case 1: gamePalette.setFourthPalette(1); break;
									case 2: gamePalette.setFourthPalette(2); break;
									case 3: gamePalette.setFourthPalette(3); break;
									case 4: gamePalette.setFourthPalette(4); break;
									case 5: gamePalette.setFourthPalette(5); break;
									case 6: gamePalette.setFourthPalette(6); break;
									default: break;
									}
								}; break;
								default: break;
								}

								switch (currentSelectedCanColor){
								case RED: gamePalette.setFirstPalette(1); break;
								case ORANGE: gamePalette.setFirstPalette(2); break;
								case YELLOW: gamePalette.setFirstPalette(3); break;
								case GREEN: gamePalette.setFirstPalette(4); break;
								case BLUE: gamePalette.setFirstPalette(5); break;
								case PURPLE: gamePalette.setFirstPalette(6); break;
								default : break;
								}
								disallow = false;
								delayReUpdateStates();
							}
							else {
								disallow = true;
								changeCanColor(1);
								changePaletteColor(1);
							}
						}
					}; break;
					default: break;
					}
				}
			}
		}

		if (delaySelection2 != 0){
			if (TimeUtils.nanoTime() - delaySelection2 >= 10000){
				delaySelection2 = 0;
				if (isLongPressed){
					if (junkWorldEngines.getGameMode() == 0){
						junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
					}
					if (currentAbilityState2 != CURRENTABILITYSTATE2.UNCLICKABLE){
						switch (trashCan2Properties.getTrashCan()){
						case 1:{
							if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF &&
									averageCount1 <= 1){
								currentAbilityState2 = CURRENTABILITYSTATE2.ON;
							}
							else currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
						}; break;
						case 2:{
							if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
								currentAbilityState2 = CURRENTABILITYSTATE2.ON;
								delayDuration2 = TimeUtils.millis();
								delayFrameRate2 = TimeUtils.millis();
								delayCooldown2 = TimeUtils.millis();
							}
							else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
								currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
							}
						}; break;
						case 3:{
							if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
								currentAbilityState2 = CURRENTABILITYSTATE2.ON;
								delayDuration2 = TimeUtils.millis();
								delayFrameRate2 = TimeUtils.millis();
								delayCooldown2 = TimeUtils.millis();
							}
							else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
								currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
							}
						}; break;
						case 4:{
							if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
								currentAbilityState2 = CURRENTABILITYSTATE2.ON;
								delayDuration2 = TimeUtils.millis();
								delayFrameRate2 = TimeUtils.millis();
								delayCooldown2 = TimeUtils.millis();
							}
							else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
								currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
							}
						}; break;
						case 5:{
							if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
								if (trashCan2Properties.getTrashCanColor() != 0){
									dullPrevColor2 = trashCan2Properties.getTrashCanColor();
								}
								else {
									dullPrevColor2 = previousDullCanColor.get(1);
								}
								trashCan2Properties.setTrashCanColor(7);
								if (currentCapacity2 > 1){
									notDumped += currentCapacity2 - 1;
									currentCapacity2 = 1;
								}
								trashCan2Capacity = 1;
								currentAbilityState2 = CURRENTABILITYSTATE2.ON;
							}
							else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
								trashCan2Capacity = junkWorldEngines.getDullCanCapacity();
								trashCan2Properties.setTrashCanColor(dullPrevColor2);
								currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
							}
						}; break;
						case 6:{
							if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
								delayEnergy2Anim = TimeUtils.millis();
								currentAbilityState2 = CURRENTABILITYSTATE2.ON;
							}
							else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
								delayEnergy2Anim = 0;
								currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
							}
						}; break;
						default: break;
						}
						delayReUpdateStates();
					}
				}
				else {
					switch (currentBottomHUDState){
					case ABILITY_SELECTION:{
						if (junkWorldEngines.getGameMode() == 0){
							junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
						}
						if (trashCan1AbilityPos == 2 &&
								isTrashCan1){
							if (currentAbilityState1 != CURRENTABILITYSTATE1.UNCLICKABLE){
								switch (trashCan1Properties.getTrashCan()){
								case 1:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF &&
											averageCount1 <= 1){
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
									}
									else currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
								}; break;
								case 2:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
										delayDuration1 = TimeUtils.millis();
										delayFrameRate1 = TimeUtils.millis();
										delayCooldown1 = TimeUtils.millis();
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
									}
								}; break;
								case 3:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
										delayDuration1 = TimeUtils.millis();
										delayFrameRate1 = TimeUtils.millis();
										delayCooldown1 = TimeUtils.millis();
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
									}
								}; break;
								case 4:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
										delayDuration1 = TimeUtils.millis();
										delayFrameRate1 = TimeUtils.millis();
										delayCooldown1 = TimeUtils.millis();
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
									}
								}; break;
								case 5:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										if (trashCan1Properties.getTrashCanColor() != 0){
											dullPrevColor1 = trashCan1Properties.getTrashCanColor();
										}
										else {
											dullPrevColor1 = previousDullCanColor.get(0);
										}
										trashCan1Properties.setTrashCanColor(7);
										if (currentCapacity1 > 1){
											notDumped += currentCapacity1 - 1;
											currentCapacity1 = 1;
										}
										trashCan1Capacity = 1;
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										trashCan1Capacity = junkWorldEngines.getDullCanCapacity();
										trashCan1Properties.setTrashCanColor(dullPrevColor1);
										currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
									}
								}; break;
								case 6:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										delayEnergy1Anim = TimeUtils.millis();
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										delayEnergy1Anim = 0;
										currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
									}
								}; break;
								default: break;
								}
							}
						}
						else if (trashCan2AbilityPos == 2 &&
								isTrashCan2){
							if (currentAbilityState2 != CURRENTABILITYSTATE2.UNCLICKABLE){
								switch (trashCan2Properties.getTrashCan()){
								case 1:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF &&
											averageCount2 <= 1){
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
									}
									else currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
								}; break;
								case 2:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
										delayDuration2 = TimeUtils.millis();
										delayFrameRate2 = TimeUtils.millis();
										delayCooldown2 = TimeUtils.millis();
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
									}
								}; break;
								case 3:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
										delayDuration2 = TimeUtils.millis();
										delayFrameRate2 = TimeUtils.millis();
										delayCooldown2 = TimeUtils.millis();
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
									}
								}; break;
								case 4:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
										delayDuration2 = TimeUtils.millis();
										delayFrameRate2 = TimeUtils.millis();
										delayCooldown2 = TimeUtils.millis();
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
									}
								}; break;
								case 5:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										if (trashCan2Properties.getTrashCanColor() != 0){
											dullPrevColor2 = trashCan2Properties.getTrashCanColor();
										}
										else {
											dullPrevColor2 = previousDullCanColor.get(1);
										}
										trashCan2Properties.setTrashCanColor(7);
										if (currentCapacity2 > 1){
											notDumped += currentCapacity2 - 1;
											currentCapacity2 = 1;
										}
										trashCan2Capacity = 1;
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										trashCan2Capacity = junkWorldEngines.getDullCanCapacity();
										trashCan2Properties.setTrashCanColor(dullPrevColor2);
										currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
									}
								}; break;
								case 6:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										delayEnergy2Anim = TimeUtils.millis();
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										delayEnergy2Anim = 0;
										currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
									}
								}; break;
								default: break;
								}
							}
						}
						else if (trashCan3AbilityPos == 2 &&
								isTrashCan3){
							if (currentAbilityState3 != CURRENTABILITYSTATE3.UNCLICKABLE){
								switch (trashCan3Properties.getTrashCan()){
								case 1:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF &&
											averageCount3 <= 1){
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
									}
									else currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
								}; break;
								case 2:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
										delayDuration3 = TimeUtils.millis();
										delayFrameRate3 = TimeUtils.millis();
										delayCooldown3 = TimeUtils.millis();
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
									}
								}; break;
								case 3:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
										delayDuration3 = TimeUtils.millis();
										delayFrameRate3 = TimeUtils.millis();
										delayCooldown3 = TimeUtils.millis();
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
									}
								}; break;
								case 4:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
										delayDuration3 = TimeUtils.millis();
										delayFrameRate3 = TimeUtils.millis();
										delayCooldown3 = TimeUtils.millis();
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
									}
								}; break;
								case 5:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										if (trashCan3Properties.getTrashCanColor() != 0){
											dullPrevColor3 = trashCan3Properties.getTrashCanColor();
										}
										else {
											dullPrevColor3 = previousDullCanColor.get(2);
										}
										trashCan3Properties.setTrashCanColor(7);
										if (currentCapacity3 > 1){
											notDumped += currentCapacity3 - 1;
											currentCapacity3 = 1;
										}
										trashCan3Capacity = 1;
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										trashCan3Capacity = junkWorldEngines.getDullCanCapacity();
										trashCan3Properties.setTrashCanColor(dullPrevColor3);
										currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
									}
								}; break;
								case 6:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										delayEnergy3Anim = TimeUtils.millis();
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										delayEnergy3Anim = 0;
										currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
									}
								}; break;
								default: break;
								}
							}
						}
						else if (trashCan4AbilityPos == 2 &&
								isTrashCan4){
							if (currentAbilityState4 != CURRENTABILITYSTATE4.UNCLICKABLE){
								switch (trashCan4Properties.getTrashCan()){
								case 1:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF &&
											averageCount4 <= 1){
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
									}
									else currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
								}; break;
								case 2:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
										delayDuration4 = TimeUtils.millis();
										delayFrameRate4 = TimeUtils.millis();
										delayCooldown4 = TimeUtils.millis();
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
									}
								}; break;
								case 3:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
										delayDuration4 = TimeUtils.millis();
										delayFrameRate4 = TimeUtils.millis();
										delayCooldown4 = TimeUtils.millis();
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
									}
								}; break;
								case 4:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
										delayDuration4 = TimeUtils.millis();
										delayFrameRate4 = TimeUtils.millis();
										delayCooldown4 = TimeUtils.millis();
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
									}
								}; break;
								case 5:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										if (trashCan4Properties.getTrashCanColor() != 0){
											dullPrevColor4 = trashCan4Properties.getTrashCanColor();
										}
										else {
											dullPrevColor4 = previousDullCanColor.get(3);
										}
										trashCan4Properties.setTrashCanColor(7);
										if (currentCapacity4 > 1){
											notDumped += currentCapacity4 - 1;
											currentCapacity4 = 1;
										}
										trashCan4Capacity = 1;
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										trashCan4Capacity = junkWorldEngines.getDullCanCapacity();
										trashCan4Properties.setTrashCanColor(dullPrevColor4);
										currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
									}
								}; break;
								case 6:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										delayEnergy4Anim = TimeUtils.millis();
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										delayEnergy4Anim = 0;
										currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
									}
								}; break;
								default: break;
								}
							}
						}
						delayReUpdateStates();
					};
					case TYPE_SELECTION:{
						if (currentSelectedType != CurrentSelectedType.RECYCLABLE){
							currentSelectedType = CurrentSelectedType.RECYCLABLE;
							setTrashCanType = true;
							delayCancelCurrentSelections = TimeUtils.nanoTime();
						}
						else {
							currentSelectedType = CurrentSelectedType.NONE;
							setTrashCanType = false;
						}
					}; break;
					case COLOR_SELECTION:{
						if (currentSelectedCanColor == CurrentSelectedCanColor.NONE){
							currentSelectedPalette = CurrentSelectedPalette.SECOND;
							switch (gamePalette.getSecondPalette()){
							case 1: currentSelectedCanColor = CurrentSelectedCanColor.RED; break;
							case 2: currentSelectedCanColor = CurrentSelectedCanColor.ORANGE; break;
							case 3: currentSelectedCanColor = CurrentSelectedCanColor.YELLOW; break;
							case 4: currentSelectedCanColor = CurrentSelectedCanColor.GREEN; break;
							case 5: currentSelectedCanColor = CurrentSelectedCanColor.BLUE; break;
							case 6: currentSelectedCanColor = CurrentSelectedCanColor.PURPLE; break;
							default: break;
							}
							setTrashCanColor = true;
							delayCancelCurrentSelections = TimeUtils.nanoTime();
						}
						else {
							if (currentSelectedPalette != CurrentSelectedPalette.NONE){
								switch (currentSelectedPalette){
								case FIRST: {
									switch (gamePalette.getSecondPalette()){
									case 1: gamePalette.setFirstPalette(1); break;
									case 2: gamePalette.setFirstPalette(2); break;
									case 3: gamePalette.setFirstPalette(3); break;
									case 4: gamePalette.setFirstPalette(4); break;
									case 5: gamePalette.setFirstPalette(5); break;
									case 6: gamePalette.setFirstPalette(6); break;
									default: break;
									}
								}; break;
								case SECOND: {
									switch (gamePalette.getSecondPalette()){
									case 1: gamePalette.setSecondPalette(1); break;
									case 2: gamePalette.setSecondPalette(2); break;
									case 3: gamePalette.setSecondPalette(3); break;
									case 4: gamePalette.setSecondPalette(4); break;
									case 5: gamePalette.setSecondPalette(5); break;
									case 6: gamePalette.setSecondPalette(6); break;
									default: break;
									}
								}; break;
								case THIRD: {
									switch (gamePalette.getSecondPalette()){
									case 1: gamePalette.setThirdPalette(1); break;
									case 2: gamePalette.setThirdPalette(2); break;
									case 3: gamePalette.setThirdPalette(3); break;
									case 4: gamePalette.setThirdPalette(4); break;
									case 5: gamePalette.setThirdPalette(5); break;
									case 6: gamePalette.setThirdPalette(6); break;
									default: break;
									}
								}; break;
								case FOURTH: {
									switch (gamePalette.getSecondPalette()){
									case 1: gamePalette.setFourthPalette(1); break;
									case 2: gamePalette.setFourthPalette(2); break;
									case 3: gamePalette.setFourthPalette(3); break;
									case 4: gamePalette.setFourthPalette(4); break;
									case 5: gamePalette.setFourthPalette(5); break;
									case 6: gamePalette.setFourthPalette(6); break;
									default: break;
									}
								}; break;
								default: break;
								}

								switch (currentSelectedCanColor){
								case RED: gamePalette.setSecondPalette(1); break;
								case ORANGE: gamePalette.setSecondPalette(2); break;
								case YELLOW: gamePalette.setSecondPalette(3); break;
								case GREEN: gamePalette.setSecondPalette(4); break;
								case BLUE: gamePalette.setSecondPalette(5); break;
								case PURPLE: gamePalette.setSecondPalette(6); break;
								default : break;
								}
								disallow = false;
								delayReUpdateStates();
							}
							else {
								disallow = true;
								changeCanColor(2);
								changePaletteColor(2);
							}
						}
					}; break;
					default: break;
					}
				}
			}
		}

		if (delaySelection3 != 0){
			if (TimeUtils.nanoTime() - delaySelection3 >= 10000){
				delaySelection3 = 0;
				if (isLongPressed){
					if (junkWorldEngines.getGameMode() == 0){
						junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
					}
					if (currentAbilityState3 != CURRENTABILITYSTATE3.UNCLICKABLE){
						switch (trashCan3Properties.getTrashCan()){
						case 1:{
							if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF &&
									averageCount1 <= 1){
								currentAbilityState3 = CURRENTABILITYSTATE3.ON;
							}
							else currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
						}; break;
						case 2:{
							if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
								currentAbilityState3 = CURRENTABILITYSTATE3.ON;
								delayDuration3 = TimeUtils.millis();
								delayFrameRate3 = TimeUtils.millis();
								delayCooldown3 = TimeUtils.millis();
							}
							else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
								currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
							}
						}; break;
						case 3:{
							if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
								currentAbilityState3 = CURRENTABILITYSTATE3.ON;
								delayDuration3 = TimeUtils.millis();
								delayFrameRate3 = TimeUtils.millis();
								delayCooldown3 = TimeUtils.millis();
							}
							else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
								currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
							}
						}; break;
						case 4:{
							if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
								currentAbilityState3 = CURRENTABILITYSTATE3.ON;
								delayDuration3 = TimeUtils.millis();
								delayFrameRate3 = TimeUtils.millis();
								delayCooldown3 = TimeUtils.millis();
							}
							else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
								currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
							}
						}; break;
						case 5:{
							if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
								if (trashCan3Properties.getTrashCanColor() != 0){
									dullPrevColor3 = trashCan3Properties.getTrashCanColor();
								}
								else {
									dullPrevColor3 = previousDullCanColor.get(2);
								}
								trashCan3Properties.setTrashCanColor(7);
								if (currentCapacity3 > 1){
									notDumped += currentCapacity3 - 1;
									currentCapacity3 = 1;
								}
								trashCan3Capacity = 1;
								currentAbilityState3 = CURRENTABILITYSTATE3.ON;
							}
							else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
								trashCan3Capacity = junkWorldEngines.getDullCanCapacity();
								trashCan3Properties.setTrashCanColor(dullPrevColor3);
								currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
							}
						}; break;
						case 6:{
							if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
								delayEnergy3Anim = TimeUtils.millis();
								currentAbilityState3 = CURRENTABILITYSTATE3.ON;
							}
							else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
								delayEnergy3Anim = 0;
								currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
							}
						}; break;
						default: break;
						}
						delayReUpdateStates();
					}
				}
				else {	
					switch (currentBottomHUDState){
					case ABILITY_SELECTION:{
						if (junkWorldEngines.getGameMode() == 0){
							junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
						}
						if (trashCan1AbilityPos == 3 &&
								isTrashCan1){
							if (currentAbilityState1 != CURRENTABILITYSTATE1.UNCLICKABLE){
								switch (trashCan1Properties.getTrashCan()){
								case 1:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF &&
											averageCount1 <= 1){
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
									}
									else currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
								}; break;
								case 2:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
										delayDuration1 = TimeUtils.millis();
										delayFrameRate1 = TimeUtils.millis();
										delayCooldown1 = TimeUtils.millis();
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
									}
								}; break;
								case 3:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
										delayDuration1 = TimeUtils.millis();
										delayFrameRate1 = TimeUtils.millis();
										delayCooldown1 = TimeUtils.millis();
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
									}
								}; break;
								case 4:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
										delayDuration1 = TimeUtils.millis();
										delayFrameRate1 = TimeUtils.millis();
										delayCooldown1 = TimeUtils.millis();
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
									}
								}; break;
								case 5:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										if (trashCan1Properties.getTrashCanColor() != 0){
											dullPrevColor1 = trashCan1Properties.getTrashCanColor();
										}
										else {
											dullPrevColor1 = previousDullCanColor.get(0);
										}
										trashCan1Properties.setTrashCanColor(7);
										if (currentCapacity1 > 1){
											notDumped += currentCapacity1 - 1;
											currentCapacity1 = 1;
										}
										trashCan1Capacity = 1;
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										trashCan1Capacity = junkWorldEngines.getDullCanCapacity();
										trashCan1Properties.setTrashCanColor(dullPrevColor1);
										currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
									}
								}; break;
								case 6:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										delayEnergy1Anim = TimeUtils.millis();
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										delayEnergy1Anim = 0;
										currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
									}
								}; break;
								default: break;
								}
							}
						}
						else if (trashCan2AbilityPos == 3 &&
								isTrashCan2){
							if (currentAbilityState2 != CURRENTABILITYSTATE2.UNCLICKABLE){
								switch (trashCan2Properties.getTrashCan()){
								case 1:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF &&
											averageCount2 <= 1){
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
									}
									else currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
								}; break;
								case 2:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
										delayDuration2 = TimeUtils.millis();
										delayFrameRate2 = TimeUtils.millis();
										delayCooldown2 = TimeUtils.millis();
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
									}
								}; break;
								case 3:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
										delayDuration2 = TimeUtils.millis();
										delayFrameRate2 = TimeUtils.millis();
										delayCooldown2 = TimeUtils.millis();
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
									}
								}; break;
								case 4:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
										delayDuration2 = TimeUtils.millis();
										delayFrameRate2 = TimeUtils.millis();
										delayCooldown2 = TimeUtils.millis();
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
									}
								}; break;
								case 5:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										if (trashCan2Properties.getTrashCanColor() != 0){
											dullPrevColor2 = trashCan2Properties.getTrashCanColor();
										}
										else {
											dullPrevColor2 = previousDullCanColor.get(1);
										}
										trashCan2Properties.setTrashCanColor(7);
										if (currentCapacity2 > 1){
											notDumped += currentCapacity2 - 1;
											currentCapacity2 = 1;
										}
										trashCan2Capacity = 1;
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										trashCan2Capacity = junkWorldEngines.getDullCanCapacity();
										trashCan2Properties.setTrashCanColor(dullPrevColor2);
										currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
									}
								}; break;
								case 6:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										delayEnergy2Anim = TimeUtils.millis();
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										delayEnergy2Anim = 0;
										currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
									}
								}; break;
								default: break;
								}
							}
						}
						else if (trashCan3AbilityPos == 3 &&
								isTrashCan3){
							if (currentAbilityState3 != CURRENTABILITYSTATE3.UNCLICKABLE){
								switch (trashCan3Properties.getTrashCan()){
								case 1:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF &&
											averageCount3 <= 1){
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
									}
									else currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
								}; break;
								case 2:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
										delayDuration3 = TimeUtils.millis();
										delayFrameRate3 = TimeUtils.millis();
										delayCooldown3 = TimeUtils.millis();
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
									}
								}; break;
								case 3:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
										delayDuration3 = TimeUtils.millis();
										delayFrameRate3 = TimeUtils.millis();
										delayCooldown3 = TimeUtils.millis();
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
									}
								}; break;
								case 4:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
										delayDuration3 = TimeUtils.millis();
										delayFrameRate3 = TimeUtils.millis();
										delayCooldown3 = TimeUtils.millis();
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
									}
								}; break;
								case 5:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										if (trashCan3Properties.getTrashCanColor() != 0){
											dullPrevColor3 = trashCan3Properties.getTrashCanColor();
										}
										else {
											dullPrevColor3 = previousDullCanColor.get(2);
										}
										trashCan3Properties.setTrashCanColor(7);
										if (currentCapacity3 > 1){
											notDumped += currentCapacity3 - 1;
											currentCapacity3 = 1;
										}
										trashCan3Capacity = 1;
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										trashCan3Capacity = junkWorldEngines.getDullCanCapacity();
										trashCan3Properties.setTrashCanColor(dullPrevColor3);
										currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
									}
								}; break;
								case 6:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										delayEnergy3Anim = TimeUtils.millis();
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										delayEnergy3Anim = 0;
										currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
									}
								}; break;
								default: break;
								}
							}
						}
						else if (trashCan4AbilityPos == 3 &&
								isTrashCan4){
							if (currentAbilityState4 != CURRENTABILITYSTATE4.UNCLICKABLE){
								switch (trashCan4Properties.getTrashCan()){
								case 1:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF &&
											averageCount4 <= 1){
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
									}
									else currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
								}; break;
								case 2:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
										delayDuration4 = TimeUtils.millis();
										delayFrameRate4 = TimeUtils.millis();
										delayCooldown4 = TimeUtils.millis();
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
									}
								}; break;
								case 3:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
										delayDuration4 = TimeUtils.millis();
										delayFrameRate4 = TimeUtils.millis();
										delayCooldown4 = TimeUtils.millis();
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
									}
								}; break;
								case 4:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
										delayDuration4 = TimeUtils.millis();
										delayFrameRate4 = TimeUtils.millis();
										delayCooldown4 = TimeUtils.millis();
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
									}
								}; break;
								case 5:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										if (trashCan4Properties.getTrashCanColor() != 0){
											dullPrevColor4 = trashCan4Properties.getTrashCanColor();
										}
										else {
											dullPrevColor4 = previousDullCanColor.get(3);
										}
										trashCan4Properties.setTrashCanColor(7);
										if (currentCapacity4 > 1){
											notDumped += currentCapacity4 - 1;
											currentCapacity4 = 1;
										}
										trashCan4Capacity = 1;
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										trashCan4Capacity = junkWorldEngines.getDullCanCapacity();
										trashCan4Properties.setTrashCanColor(dullPrevColor4);
										currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
									}
								}; break;
								case 6:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										delayEnergy4Anim = TimeUtils.millis();
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										delayEnergy4Anim = 0;
										currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
									}
								};
								default: break;
								}
							}
						}
						delayReUpdateStates();
					}; break;
					case TYPE_SELECTION:{
						if (currentSelectedType != CurrentSelectedType.NONRECYCLABLE){
							currentSelectedType = CurrentSelectedType.NONRECYCLABLE;
							setTrashCanType = true;
							delayCancelCurrentSelections = TimeUtils.nanoTime();
						}
						else {
							currentSelectedType = CurrentSelectedType.NONE;
							setTrashCanType = false;
						}
					}; break;
					case COLOR_SELECTION:{
						if (gamePalette.getThirdPalette() != 0){
							if (currentSelectedCanColor == CurrentSelectedCanColor.NONE){
								currentSelectedPalette = CurrentSelectedPalette.THIRD;
								switch (gamePalette.getThirdPalette()){
								case 1: currentSelectedCanColor = CurrentSelectedCanColor.RED; break;
								case 2: currentSelectedCanColor = CurrentSelectedCanColor.ORANGE; break;
								case 3: currentSelectedCanColor = CurrentSelectedCanColor.YELLOW; break;
								case 4: currentSelectedCanColor = CurrentSelectedCanColor.GREEN; break;
								case 5: currentSelectedCanColor = CurrentSelectedCanColor.BLUE; break;
								case 6: currentSelectedCanColor = CurrentSelectedCanColor.PURPLE; break;
								default: break;
								}
								setTrashCanColor = true;
								delayCancelCurrentSelections = TimeUtils.nanoTime();
							}
							else {
								if (currentSelectedPalette != CurrentSelectedPalette.NONE){
									switch (currentSelectedPalette){
									case FIRST: {
										switch (gamePalette.getThirdPalette()){
										case 1: gamePalette.setFirstPalette(1); break;
										case 2: gamePalette.setFirstPalette(2); break;
										case 3: gamePalette.setFirstPalette(3); break;
										case 4: gamePalette.setFirstPalette(4); break;
										case 5: gamePalette.setFirstPalette(5); break;
										case 6: gamePalette.setFirstPalette(6); break;
										default: break;
										}
									}; break;
									case SECOND: {
										switch (gamePalette.getThirdPalette()){
										case 1: gamePalette.setSecondPalette(1); break;
										case 2: gamePalette.setSecondPalette(2); break;
										case 3: gamePalette.setSecondPalette(3); break;
										case 4: gamePalette.setSecondPalette(4); break;
										case 5: gamePalette.setSecondPalette(5); break;
										case 6: gamePalette.setSecondPalette(6); break;
										default: break;
										}
									}; break;
									case THIRD: {
										switch (gamePalette.getThirdPalette()){
										case 1: gamePalette.setThirdPalette(1); break;
										case 2: gamePalette.setThirdPalette(2); break;
										case 3: gamePalette.setThirdPalette(3); break;
										case 4: gamePalette.setThirdPalette(4); break;
										case 5: gamePalette.setThirdPalette(5); break;
										case 6: gamePalette.setThirdPalette(6); break;
										default: break;
										}
									}; break;
									case FOURTH: {
										switch (gamePalette.getThirdPalette()){
										case 1: gamePalette.setFourthPalette(1); break;
										case 2: gamePalette.setFourthPalette(2); break;
										case 3: gamePalette.setFourthPalette(3); break;
										case 4: gamePalette.setFourthPalette(4); break;
										case 5: gamePalette.setFourthPalette(5); break;
										case 6: gamePalette.setFourthPalette(6); break;
										default: break;
										}
									}; break;
									default: break;
									}

									switch (currentSelectedCanColor){
									case RED: gamePalette.setThirdPalette(1); break;
									case ORANGE: gamePalette.setThirdPalette(2); break;
									case YELLOW: gamePalette.setThirdPalette(3); break;
									case GREEN: gamePalette.setThirdPalette(4); break;
									case BLUE: gamePalette.setThirdPalette(5); break;
									case PURPLE: gamePalette.setThirdPalette(6); break;
									default : break;
									}
									disallow = false;
									delayReUpdateStates();
								}
								else {
									disallow = true;
									changeCanColor(3);
									changePaletteColor(3);
								}
							}
						}
					}; break;
					default: break;
					}
				}
			}
		}


		if (delaySelection4 != 0){
			if (TimeUtils.nanoTime() - delaySelection4 >= 10000){
				delaySelection4 = 0;
				if (isLongPressed){
					if (junkWorldEngines.getGameMode() == 0){
						junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
					}
					if (currentAbilityState4 != CURRENTABILITYSTATE4.UNCLICKABLE){
						switch (trashCan4Properties.getTrashCan()){
						case 1:{
							if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF &&
									averageCount1 <= 1){
								currentAbilityState4 = CURRENTABILITYSTATE4.ON;
							}
							else currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
						}; break;
						case 2:{
							if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
								currentAbilityState4 = CURRENTABILITYSTATE4.ON;
								delayDuration4 = TimeUtils.millis();
								delayFrameRate4 = TimeUtils.millis();
								delayCooldown4 = TimeUtils.millis();
							}
							else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
								currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
							}
						}; break;
						case 3:{
							if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
								currentAbilityState4 = CURRENTABILITYSTATE4.ON;
								delayDuration4 = TimeUtils.millis();
								delayFrameRate4 = TimeUtils.millis();
								delayCooldown4 = TimeUtils.millis();
							}
							else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
								currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
							}
						}; break;
						case 4:{
							if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
								currentAbilityState4 = CURRENTABILITYSTATE4.ON;
								delayDuration4 = TimeUtils.millis();
								delayFrameRate4 = TimeUtils.millis();
								delayCooldown4 = TimeUtils.millis();
							}
							else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
								currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
							}
						}; break;
						case 5:{
							if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
								if (trashCan4Properties.getTrashCanColor() != 0){
									dullPrevColor4 = trashCan4Properties.getTrashCanColor();
								}
								else {
									dullPrevColor4 = previousDullCanColor.get(3);
								}
								trashCan4Properties.setTrashCanColor(7);
								if (currentCapacity4 > 1){
									notDumped += currentCapacity4 - 1;
									currentCapacity4 = 1;
								}
								trashCan4Capacity = 1;
								currentAbilityState4 = CURRENTABILITYSTATE4.ON;
							}
							else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
								trashCan4Capacity = junkWorldEngines.getDullCanCapacity();
								trashCan4Properties.setTrashCanColor(dullPrevColor4);
								currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
							}
						}; break;
						case 6:{
							if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
								delayEnergy4Anim = TimeUtils.millis();
								currentAbilityState4 = CURRENTABILITYSTATE4.ON;
							}
							else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
								delayEnergy4Anim = 0;
								currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
							}
						}; break;
						default: break;
						}
						delayReUpdateStates();
					}
				}
				else {
					switch (currentBottomHUDState){
					case ABILITY_SELECTION:{
						if (junkWorldEngines.getGameMode() == 0){
							junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
						}
						if (trashCan1AbilityPos == 4 &&
								isTrashCan1){
							if (currentAbilityState1 != CURRENTABILITYSTATE1.UNCLICKABLE){
								switch (trashCan1Properties.getTrashCan()){
								case 1:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF &&
											averageCount1 <= 1){
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
									}
									else currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
								}; break;
								case 2:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
										delayDuration1 = TimeUtils.millis();
										delayFrameRate1 = TimeUtils.millis();
										delayCooldown1 = TimeUtils.millis();
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
									}
								}; break;
								case 3:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
										delayDuration1 = TimeUtils.millis();
										delayFrameRate1 = TimeUtils.millis();
										delayCooldown1 = TimeUtils.millis();
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
									}
								}; break;
								case 4:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
										delayDuration1 = TimeUtils.millis();
										delayFrameRate1 = TimeUtils.millis();
										delayCooldown1 = TimeUtils.millis();
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
									}
								}; break;
								case 5:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										if (trashCan1Properties.getTrashCanColor() != 0){
											dullPrevColor1 = trashCan1Properties.getTrashCanColor();
										}
										else {
											dullPrevColor1 = previousDullCanColor.get(0);
										}
										trashCan1Properties.setTrashCanColor(7);
										if (currentCapacity1 > 1){
											notDumped += currentCapacity1 - 1;
											currentCapacity1 = 1;
										}
										trashCan1Capacity = 1;
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										trashCan1Capacity = junkWorldEngines.getDullCanCapacity();
										trashCan1Properties.setTrashCanColor(dullPrevColor1);
										currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
									}
								}; break;
								case 6:{
									if (currentAbilityState1 == CURRENTABILITYSTATE1.OFF){
										delayEnergy1Anim = TimeUtils.millis();
										currentAbilityState1 = CURRENTABILITYSTATE1.ON;
									}
									else if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
										delayEnergy1Anim = 0;
										currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
									}
								}; break;
								default: break;
								}
							}
						}
						else if (trashCan2AbilityPos == 4 &&
								isTrashCan2){
							if (currentAbilityState2 != CURRENTABILITYSTATE2.UNCLICKABLE){
								switch (trashCan2Properties.getTrashCan()){
								case 1:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF &&
											averageCount2 <= 1){
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
									}
									else currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
								}; break;
								case 2:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
										delayDuration2 = TimeUtils.millis();
										delayFrameRate2 = TimeUtils.millis();
										delayCooldown2 = TimeUtils.millis();
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
									}
								}; break;
								case 3:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
										delayDuration2 = TimeUtils.millis();
										delayFrameRate2 = TimeUtils.millis();
										delayCooldown2 = TimeUtils.millis();
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
									}
								}; break;
								case 4:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
										delayDuration2 = TimeUtils.millis();
										delayFrameRate2 = TimeUtils.millis();
										delayCooldown2 = TimeUtils.millis();
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
									}
								}; break;
								case 5:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										if (trashCan2Properties.getTrashCanColor() != 0){
											dullPrevColor2 = trashCan2Properties.getTrashCanColor();
										}
										else {
											dullPrevColor2 = previousDullCanColor.get(1);
										}
										trashCan2Properties.setTrashCanColor(7);
										if (currentCapacity2 > 1){
											notDumped += currentCapacity2 - 1;
											currentCapacity2 = 1;
										}
										trashCan2Capacity = 1;
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										trashCan2Capacity = junkWorldEngines.getDullCanCapacity();
										trashCan2Properties.setTrashCanColor(dullPrevColor2);
										currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
									}
								}; break;
								case 6:{
									if (currentAbilityState2 == CURRENTABILITYSTATE2.OFF){
										delayEnergy2Anim = TimeUtils.millis();
										currentAbilityState2 = CURRENTABILITYSTATE2.ON;
									}
									else if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
										delayEnergy2Anim = 0;
										currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
									}
								}; break;
								default: break;
								}
							}
						}
						else if (trashCan3AbilityPos == 4 &&
								isTrashCan3){
							if (currentAbilityState3 != CURRENTABILITYSTATE3.UNCLICKABLE){
								switch (trashCan3Properties.getTrashCan()){
								case 1:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF &&
											averageCount3 <= 1){
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
									}
									else currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
								}; break;
								case 2:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
										delayDuration3 = TimeUtils.millis();
										delayFrameRate3 = TimeUtils.millis();
										delayCooldown3 = TimeUtils.millis();
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
									}
								}; break;
								case 3:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
										delayDuration3 = TimeUtils.millis();
										delayFrameRate3 = TimeUtils.millis();
										delayCooldown3 = TimeUtils.millis();
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
									}
								}; break;
								case 4:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
										delayDuration3 = TimeUtils.millis();
										delayFrameRate3 = TimeUtils.millis();
										delayCooldown3 = TimeUtils.millis();
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
									}
								}; break;
								case 5:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										if (trashCan3Properties.getTrashCanColor() != 0){
											dullPrevColor3 = trashCan3Properties.getTrashCanColor();
										}
										else {
											dullPrevColor3 = previousDullCanColor.get(2);
										}
										trashCan3Properties.setTrashCanColor(7);
										if (currentCapacity3 > 1){
											notDumped += currentCapacity3 - 1;
											currentCapacity3 = 1;
										}
										trashCan3Capacity = 1;
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										trashCan3Capacity = junkWorldEngines.getDullCanCapacity();
										trashCan3Properties.setTrashCanColor(dullPrevColor3);
										currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
									}
								}; break;
								case 6:{
									if (currentAbilityState3 == CURRENTABILITYSTATE3.OFF){
										delayEnergy3Anim = TimeUtils.millis();
										currentAbilityState3 = CURRENTABILITYSTATE3.ON;
									}
									else if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
										delayEnergy3Anim = 0;
										currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
									}
								}; break;
								default: break;
								}
							}
						}
						else if (trashCan4AbilityPos == 4 &&
								isTrashCan4){
							if (currentAbilityState4 != CURRENTABILITYSTATE4.UNCLICKABLE){
								switch (trashCan4Properties.getTrashCan()){
								case 1:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF &&
											averageCount4 <= 1){
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
									}
									else currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
								}; break;
								case 2:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
										delayDuration4 = TimeUtils.millis();
										delayFrameRate4 = TimeUtils.millis();
										delayCooldown4 = TimeUtils.millis();
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
									}
								}; break;
								case 3:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
										delayDuration4 = TimeUtils.millis();
										delayFrameRate4 = TimeUtils.millis();
										delayCooldown4 = TimeUtils.millis();
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
									}
								}; break;
								case 4:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
										delayDuration4 = TimeUtils.millis();
										delayFrameRate4 = TimeUtils.millis();
										delayCooldown4 = TimeUtils.millis();
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
									}
								}; break;
								case 5:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										if (trashCan4Properties.getTrashCanColor() != 0){
											dullPrevColor4 = trashCan4Properties.getTrashCanColor();
										}
										else {
											dullPrevColor4 = previousDullCanColor.get(3);
										}
										trashCan4Properties.setTrashCanColor(7);
										if (currentCapacity4 > 1){
											notDumped += currentCapacity4 - 1;
											currentCapacity4 = 1;
										}
										trashCan4Capacity = 1;
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										trashCan4Capacity = junkWorldEngines.getDullCanCapacity();
										trashCan4Properties.setTrashCanColor(dullPrevColor4);
										currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
									}
								}; break;
								case 6:{
									if (currentAbilityState4 == CURRENTABILITYSTATE4.OFF){
										delayEnergy4Anim = TimeUtils.millis();
										currentAbilityState4 = CURRENTABILITYSTATE4.ON;
									}
									else if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
										delayEnergy4Anim = 0;
										currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
									}
								}; break;
								default: break;
								}
							}
						}
						delayReUpdateStates();
					}; break;
					case TYPE_SELECTION:{
					}; break;
					case COLOR_SELECTION:{
						if (gamePalette.getFourthPalette() != 0){
							if (junkWorldEngines.isPalette4Unlocked()){
								if (currentSelectedCanColor == CurrentSelectedCanColor.NONE){
									currentSelectedPalette = CurrentSelectedPalette.FOURTH;
									switch (gamePalette.getFourthPalette()){
									case 1: currentSelectedCanColor = CurrentSelectedCanColor.RED; break;
									case 2: currentSelectedCanColor = CurrentSelectedCanColor.ORANGE; break;
									case 3: currentSelectedCanColor = CurrentSelectedCanColor.YELLOW; break;
									case 4: currentSelectedCanColor = CurrentSelectedCanColor.GREEN; break;
									case 5: currentSelectedCanColor = CurrentSelectedCanColor.BLUE; break;
									case 6: currentSelectedCanColor = CurrentSelectedCanColor.PURPLE; break;
									default: break;
									}
									setTrashCanColor = true;
									delayCancelCurrentSelections = TimeUtils.nanoTime();
								}
								else {
									if (currentSelectedPalette != CurrentSelectedPalette.NONE){
										switch (currentSelectedPalette){
										case FIRST: {
											switch (gamePalette.getFourthPalette()){
											case 1: gamePalette.setFirstPalette(1); break;
											case 2: gamePalette.setFirstPalette(2); break;
											case 3: gamePalette.setFirstPalette(3); break;
											case 4: gamePalette.setFirstPalette(4); break;
											case 5: gamePalette.setFirstPalette(5); break;
											case 6: gamePalette.setFirstPalette(6); break;
											default: break;
											}
										}; break;
										case SECOND: {
											switch (gamePalette.getFourthPalette()){
											case 1: gamePalette.setSecondPalette(1); break;
											case 2: gamePalette.setSecondPalette(2); break;
											case 3: gamePalette.setSecondPalette(3); break;
											case 4: gamePalette.setSecondPalette(4); break;
											case 5: gamePalette.setSecondPalette(5); break;
											case 6: gamePalette.setSecondPalette(6); break;
											default: break;
											}
										}; break;
										case THIRD: {
											switch (gamePalette.getFourthPalette()){
											case 1: gamePalette.setThirdPalette(1); break;
											case 2: gamePalette.setThirdPalette(2); break;
											case 3: gamePalette.setThirdPalette(3); break;
											case 4: gamePalette.setThirdPalette(4); break;
											case 5: gamePalette.setThirdPalette(5); break;
											case 6: gamePalette.setThirdPalette(6); break;
											default: break;
											}
										}; break;
										case FOURTH: {
											switch (gamePalette.getFourthPalette()){
											case 1: gamePalette.setFourthPalette(1); break;
											case 2: gamePalette.setFourthPalette(2); break;
											case 3: gamePalette.setFourthPalette(3); break;
											case 4: gamePalette.setFourthPalette(4); break;
											case 5: gamePalette.setFourthPalette(5); break;
											case 6: gamePalette.setFourthPalette(6); break;
											default: break;
											}
										}; break;
										default: break;
										}

										switch (currentSelectedCanColor){
										case RED: gamePalette.setFourthPalette(1); break;
										case ORANGE: gamePalette.setFourthPalette(2); break;
										case YELLOW: gamePalette.setFourthPalette(3); break;
										case GREEN: gamePalette.setFourthPalette(4); break;
										case BLUE: gamePalette.setFourthPalette(5); break;
										case PURPLE: gamePalette.setFourthPalette(6); break;
										default : break;
										}
										disallow = false;
										delayReUpdateStates();
									}
									else {
										disallow = true;
										changeCanColor(4);
										changePaletteColor(4);
									}
								}
							}
						}
					}; break;
					default: break;
					}
				}
			}
		}

		if (delayTrashCanSelection1 != 0){
			if (TimeUtils.nanoTime() - delayTrashCanSelection1 >= 10000){
				delayTrashCanSelection1 = 0;
				switch (currentBottomHUDState){
				case ABILITY_SELECTION: {

				}; break;
				case TYPE_SELECTION: {
					if (currentSelectedType != CurrentSelectedType.NONE){
						if (junkWorldEngines.getGameMode() == 0){
							junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
						}
						switch (currentSelectedType){
						case BIODEGRADABLE: trashCan1Properties.setTrashCanType(1); break;
						case RECYCLABLE: trashCan1Properties.setTrashCanType(2); break;
						case NONRECYCLABLE: trashCan1Properties.setTrashCanType(3); break;
						default: break;
						}
						delayReUpdateStates();
					}
				}; break;
				case COLOR_SELECTION: {
					if (currentSelectedCanColor == CurrentSelectedCanColor.NONE){
						switch (trashCan1Properties.getTrashCanColor()){
						case 0: currentSelectedCanColor = CurrentSelectedCanColor.DULL1; break;
						case 1: currentSelectedCanColor = CurrentSelectedCanColor.RED; break;
						case 2: currentSelectedCanColor = CurrentSelectedCanColor.ORANGE; break;
						case 3: currentSelectedCanColor = CurrentSelectedCanColor.YELLOW; break;
						case 4: currentSelectedCanColor = CurrentSelectedCanColor.GREEN; break;
						case 5: currentSelectedCanColor = CurrentSelectedCanColor.BLUE; break;
						case 6: currentSelectedCanColor = CurrentSelectedCanColor.PURPLE; break;
						default : currentSelectedCanColor = CurrentSelectedCanColor.NONE; break;
						}
					}
					else {
						if (currentSelectedPalette != CurrentSelectedPalette.NONE){
							if (junkWorldEngines.getGameMode() == 0){
								junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
							}
							switch (currentSelectedPalette){
							case FIRST: {
								switch (trashCan1Properties.getTrashCanColor()){
								case 0: gamePalette.setFirstPalette(previousDullCanColor.get(0)); break;
								case 1: gamePalette.setFirstPalette(1); break;
								case 2: gamePalette.setFirstPalette(2); break;
								case 3: gamePalette.setFirstPalette(3); break;
								case 4: gamePalette.setFirstPalette(4); break;
								case 5: gamePalette.setFirstPalette(5); break;
								case 6: gamePalette.setFirstPalette(6); break;
								default: break;
								}
							}; break;
							case SECOND: {
								switch (trashCan1Properties.getTrashCanColor()){
								case 0: gamePalette.setSecondPalette(previousDullCanColor.get(0)); break;
								case 1: gamePalette.setSecondPalette(1); break;
								case 2: gamePalette.setSecondPalette(2); break;
								case 3: gamePalette.setSecondPalette(3); break;
								case 4: gamePalette.setSecondPalette(4); break;
								case 5: gamePalette.setSecondPalette(5); break;
								case 6: gamePalette.setSecondPalette(6); break;
								default: break;
								}
							}; break;
							case THIRD: {
								switch (trashCan1Properties.getTrashCanColor()){
								case 0: gamePalette.setThirdPalette(previousDullCanColor.get(0)); break;
								case 1: gamePalette.setThirdPalette(1); break;
								case 2: gamePalette.setThirdPalette(2); break;
								case 3: gamePalette.setThirdPalette(3); break;
								case 4: gamePalette.setThirdPalette(4); break;
								case 5: gamePalette.setThirdPalette(5); break;
								case 6: gamePalette.setThirdPalette(6); break;
								default: break;
								}
							}; break;
							case FOURTH: {
								switch (trashCan1Properties.getTrashCanColor()){
								case 0: gamePalette.setFourthPalette(previousDullCanColor.get(0)); break;
								case 1: gamePalette.setFourthPalette(1); break;
								case 2: gamePalette.setFourthPalette(2); break;
								case 3: gamePalette.setFourthPalette(3); break;
								case 4: gamePalette.setFourthPalette(4); break;
								case 5: gamePalette.setFourthPalette(5); break;
								case 6: gamePalette.setFourthPalette(6); break;
								default: break;
								}
							}; break;
							default: break;
							}

							switch (currentSelectedCanColor){
							case RED: trashCan1Properties.setTrashCanColor(1); break;
							case ORANGE: trashCan1Properties.setTrashCanColor(2); break;
							case YELLOW: trashCan1Properties.setTrashCanColor(3); break;
							case GREEN: trashCan1Properties.setTrashCanColor(4); break;
							case BLUE: trashCan1Properties.setTrashCanColor(5); break;
							case PURPLE: trashCan1Properties.setTrashCanColor(6); break;
							default : break;
							}
						}
						delayReUpdateStates();
					}
				}; break;
				default: break;
				}
				disallow = false;
			}
		}

		if (delayTrashCanSelection2 != 0){
			if (TimeUtils.nanoTime() - delayTrashCanSelection2 >= 10000){
				delayTrashCanSelection2 = 0;		
				switch (currentBottomHUDState){
				case ABILITY_SELECTION: {

				}; break;
				case TYPE_SELECTION: {
					if (currentSelectedType != CurrentSelectedType.NONE){
						if (junkWorldEngines.getGameMode() == 0){
							junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
						}
						switch (currentSelectedType){
						case BIODEGRADABLE: trashCan2Properties.setTrashCanType(1); break;
						case RECYCLABLE: trashCan2Properties.setTrashCanType(2); break;
						case NONRECYCLABLE: trashCan2Properties.setTrashCanType(3); break;
						default: break;
						}
						delayReUpdateStates();
					}
				}; break;
				case COLOR_SELECTION: {
					if (currentSelectedCanColor == CurrentSelectedCanColor.NONE){
						switch (trashCan2Properties.getTrashCanColor()){
						case 0: currentSelectedCanColor = CurrentSelectedCanColor.DULL2; break;
						case 1: currentSelectedCanColor = CurrentSelectedCanColor.RED; break;
						case 2: currentSelectedCanColor = CurrentSelectedCanColor.ORANGE; break;
						case 3: currentSelectedCanColor = CurrentSelectedCanColor.YELLOW; break;
						case 4: currentSelectedCanColor = CurrentSelectedCanColor.GREEN; break;
						case 5: currentSelectedCanColor = CurrentSelectedCanColor.BLUE; break;
						case 6: currentSelectedCanColor = CurrentSelectedCanColor.PURPLE; break;
						default : currentSelectedCanColor = CurrentSelectedCanColor.NONE; break;
						}
					}
					else {
						if (currentSelectedPalette != CurrentSelectedPalette.NONE){
							if (junkWorldEngines.getGameMode() == 0){
								junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
							}
							switch (currentSelectedPalette){
							case FIRST: {
								switch (trashCan2Properties.getTrashCanColor()){
								case 0: gamePalette.setFirstPalette(previousDullCanColor.get(1)); break;
								case 1: gamePalette.setFirstPalette(1); break;
								case 2: gamePalette.setFirstPalette(2); break;
								case 3: gamePalette.setFirstPalette(3); break;
								case 4: gamePalette.setFirstPalette(4); break;
								case 5: gamePalette.setFirstPalette(5); break;
								case 6: gamePalette.setFirstPalette(6); break;
								default: break;
								}
							}; break;
							case SECOND: {
								switch (trashCan2Properties.getTrashCanColor()){
								case 0: gamePalette.setSecondPalette(previousDullCanColor.get(1)); break;
								case 1: gamePalette.setSecondPalette(1); break;
								case 2: gamePalette.setSecondPalette(2); break;
								case 3: gamePalette.setSecondPalette(3); break;
								case 4: gamePalette.setSecondPalette(4); break;
								case 5: gamePalette.setSecondPalette(5); break;
								case 6: gamePalette.setSecondPalette(6); break;
								default: break;
								}
							}; break;
							case THIRD: {
								switch (trashCan2Properties.getTrashCanColor()){
								case 0: gamePalette.setThirdPalette(previousDullCanColor.get(1)); break;
								case 1: gamePalette.setThirdPalette(1); break;
								case 2: gamePalette.setThirdPalette(2); break;
								case 3: gamePalette.setThirdPalette(3); break;
								case 4: gamePalette.setThirdPalette(4); break;
								case 5: gamePalette.setThirdPalette(5); break;
								case 6: gamePalette.setThirdPalette(6); break;
								default: break;
								}
							}; break;
							case FOURTH: {
								switch (trashCan2Properties.getTrashCanColor()){
								case 0: gamePalette.setFourthPalette(previousDullCanColor.get(1)); break;
								case 1: gamePalette.setFourthPalette(1); break;
								case 2: gamePalette.setFourthPalette(2); break;
								case 3: gamePalette.setFourthPalette(3); break;
								case 4: gamePalette.setFourthPalette(4); break;
								case 5: gamePalette.setFourthPalette(5); break;
								case 6: gamePalette.setFourthPalette(6); break;
								default: break;
								}
							}; break;
							default: break;
							}

							switch (currentSelectedCanColor){
							case RED: trashCan2Properties.setTrashCanColor(1); break;
							case ORANGE: trashCan2Properties.setTrashCanColor(2); break;
							case YELLOW: trashCan2Properties.setTrashCanColor(3); break;
							case GREEN: trashCan2Properties.setTrashCanColor(4); break;
							case BLUE: trashCan2Properties.setTrashCanColor(5); break;
							case PURPLE: trashCan2Properties.setTrashCanColor(6); break;
							default: break;
							}
						}
						delayReUpdateStates();
					}
				}; break;
				default: break;
				}
				disallow = false;
			}
		}

		if (delayTrashCanSelection3 != 0){
			if (TimeUtils.nanoTime() - delayTrashCanSelection3 >= 10000){
				delayTrashCanSelection3 = 0;		
				switch (currentBottomHUDState){
				case ABILITY_SELECTION: {

				}; break;
				case TYPE_SELECTION: {
					if (currentSelectedType != CurrentSelectedType.NONE){
						if (junkWorldEngines.getGameMode() == 0){
							junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
						}
						switch (currentSelectedType){
						case BIODEGRADABLE: trashCan3Properties.setTrashCanType(1); break;
						case RECYCLABLE: trashCan3Properties.setTrashCanType(2); break;
						case NONRECYCLABLE: trashCan3Properties.setTrashCanType(3); break;
						default: break;
						}
						delayReUpdateStates();
					}
				}; break;
				case COLOR_SELECTION: {
					if (currentSelectedCanColor == CurrentSelectedCanColor.NONE){
						switch (trashCan3Properties.getTrashCanColor()){
						case 0: currentSelectedCanColor = CurrentSelectedCanColor.DULL3; break;
						case 1: currentSelectedCanColor = CurrentSelectedCanColor.RED; break;
						case 2: currentSelectedCanColor = CurrentSelectedCanColor.ORANGE; break;
						case 3: currentSelectedCanColor = CurrentSelectedCanColor.YELLOW; break;
						case 4: currentSelectedCanColor = CurrentSelectedCanColor.GREEN; break;
						case 5: currentSelectedCanColor = CurrentSelectedCanColor.BLUE; break;
						case 6: currentSelectedCanColor = CurrentSelectedCanColor.PURPLE; break;
						default : currentSelectedCanColor = CurrentSelectedCanColor.NONE; break;
						}
					}
					else {
						if (currentSelectedPalette != CurrentSelectedPalette.NONE){
							if (junkWorldEngines.getGameMode() == 0){
								junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
							}
							switch (currentSelectedPalette){
							case FIRST: {
								switch (trashCan3Properties.getTrashCanColor()){
								case 0: gamePalette.setFirstPalette(previousDullCanColor.get(2)); break;
								case 1: gamePalette.setFirstPalette(1); break;
								case 2: gamePalette.setFirstPalette(2); break;
								case 3: gamePalette.setFirstPalette(3); break;
								case 4: gamePalette.setFirstPalette(4); break;
								case 5: gamePalette.setFirstPalette(5); break;
								case 6: gamePalette.setFirstPalette(6); break;
								default: break;
								}
							}; break;
							case SECOND: {
								switch (trashCan3Properties.getTrashCanColor()){
								case 0: gamePalette.setSecondPalette(previousDullCanColor.get(2)); break;
								case 1: gamePalette.setSecondPalette(1); break;
								case 2: gamePalette.setSecondPalette(2); break;
								case 3: gamePalette.setSecondPalette(3); break;
								case 4: gamePalette.setSecondPalette(4); break;
								case 5: gamePalette.setSecondPalette(5); break;
								case 6: gamePalette.setSecondPalette(6); break;
								default: break;
								}
							}; break;
							case THIRD: {
								switch (trashCan3Properties.getTrashCanColor()){
								case 0: gamePalette.setThirdPalette(previousDullCanColor.get(2)); break;
								case 1: gamePalette.setThirdPalette(1); break;
								case 2: gamePalette.setThirdPalette(2); break;
								case 3: gamePalette.setThirdPalette(3); break;
								case 4: gamePalette.setThirdPalette(4); break;
								case 5: gamePalette.setThirdPalette(5); break;
								case 6: gamePalette.setThirdPalette(6); break;
								default: break;
								}
							}; break;
							case FOURTH: {
								switch (trashCan3Properties.getTrashCanColor()){
								case 0: gamePalette.setFourthPalette(previousDullCanColor.get(2)); break;
								case 1: gamePalette.setFourthPalette(1); break;
								case 2: gamePalette.setFourthPalette(2); break;
								case 3: gamePalette.setFourthPalette(3); break;
								case 4: gamePalette.setFourthPalette(4); break;
								case 5: gamePalette.setFourthPalette(5); break;
								case 6: gamePalette.setFourthPalette(6); break;
								default: break;
								}
							}; break;
							default: break;
							}

							switch (currentSelectedCanColor){
							case RED: trashCan3Properties.setTrashCanColor(1); break;
							case ORANGE: trashCan3Properties.setTrashCanColor(2); break;
							case YELLOW: trashCan3Properties.setTrashCanColor(3); break;
							case GREEN: trashCan3Properties.setTrashCanColor(4); break;
							case BLUE: trashCan3Properties.setTrashCanColor(5); break;
							case PURPLE: trashCan3Properties.setTrashCanColor(6); break;
							default : break;
							}
						}
						delayReUpdateStates();
					}
				}; break;
				default: break;
				}
				disallow = false;
			}
		}

		if (delayTrashCanSelection4 != 0){
			if (TimeUtils.nanoTime() - delayTrashCanSelection4 >= 10000){
				delayTrashCanSelection4 = 0;		
				switch (currentBottomHUDState){
				case ABILITY_SELECTION: {

				}; break;
				case TYPE_SELECTION: {
					if (currentSelectedType != CurrentSelectedType.NONE){
						if (junkWorldEngines.getGameMode() == 0){
							junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
						}
						switch (currentSelectedType){
						case BIODEGRADABLE: trashCan4Properties.setTrashCanType(1); break;
						case RECYCLABLE: trashCan4Properties.setTrashCanType(2); break;
						case NONRECYCLABLE: trashCan4Properties.setTrashCanType(3); break;
						default: break;
						}
						setTrashCanType = false;
						delayReUpdateStates();
					}
				}; break;
				case COLOR_SELECTION: {
					if (currentSelectedCanColor == CurrentSelectedCanColor.NONE){
						switch (trashCan4Properties.getTrashCanColor()){
						case 0: currentSelectedCanColor = CurrentSelectedCanColor.DULL4; break;
						case 1: currentSelectedCanColor = CurrentSelectedCanColor.RED; break;
						case 2: currentSelectedCanColor = CurrentSelectedCanColor.ORANGE; break;
						case 3: currentSelectedCanColor = CurrentSelectedCanColor.YELLOW; break;
						case 4: currentSelectedCanColor = CurrentSelectedCanColor.GREEN; break;
						case 5: currentSelectedCanColor = CurrentSelectedCanColor.BLUE; break;
						case 6: currentSelectedCanColor = CurrentSelectedCanColor.PURPLE; break;
						default : currentSelectedCanColor = CurrentSelectedCanColor.NONE; break;
						}
					}
					else {
						if (currentSelectedPalette != CurrentSelectedPalette.NONE){
							if (junkWorldEngines.getGameMode() == 0){
								junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
							}
							switch (currentSelectedPalette){
							case FIRST: {
								switch (trashCan4Properties.getTrashCanColor()){
								case 0: gamePalette.setFirstPalette(previousDullCanColor.get(3)); break;
								case 1: gamePalette.setFirstPalette(1); break;
								case 2: gamePalette.setFirstPalette(2); break;
								case 3: gamePalette.setFirstPalette(3); break;
								case 4: gamePalette.setFirstPalette(4); break;
								case 5: gamePalette.setFirstPalette(5); break;
								case 6: gamePalette.setFirstPalette(6); break;
								default: break;
								}
							}; break;
							case SECOND: {
								switch (trashCan4Properties.getTrashCanColor()){
								case 0: gamePalette.setSecondPalette(previousDullCanColor.get(3)); break;
								case 1: gamePalette.setSecondPalette(1); break;
								case 2: gamePalette.setSecondPalette(2); break;
								case 3: gamePalette.setSecondPalette(3); break;
								case 4: gamePalette.setSecondPalette(4); break;
								case 5: gamePalette.setSecondPalette(5); break;
								case 6: gamePalette.setSecondPalette(6); break;
								default: break;
								}
							}; break;
							case THIRD: {
								switch (trashCan4Properties.getTrashCanColor()){
								case 0: gamePalette.setThirdPalette(previousDullCanColor.get(3)); break;
								case 1: gamePalette.setThirdPalette(1); break;
								case 2: gamePalette.setThirdPalette(2); break;
								case 3: gamePalette.setThirdPalette(3); break;
								case 4: gamePalette.setThirdPalette(4); break;
								case 5: gamePalette.setThirdPalette(5); break;
								case 6: gamePalette.setThirdPalette(6); break;
								default: break;
								}
							}; break;
							case FOURTH: {
								switch (trashCan4Properties.getTrashCanColor()){
								case 0: gamePalette.setFourthPalette(previousDullCanColor.get(3)); break;
								case 1: gamePalette.setFourthPalette(1); break;
								case 2: gamePalette.setFourthPalette(2); break;
								case 3: gamePalette.setFourthPalette(3); break;
								case 4: gamePalette.setFourthPalette(4); break;
								case 5: gamePalette.setFourthPalette(5); break;
								case 6: gamePalette.setFourthPalette(6); break;
								default: break;
								}
							}; break;
							default: break;
							}

							switch (currentSelectedCanColor){
							case RED: trashCan4Properties.setTrashCanColor(1); break;
							case ORANGE: trashCan4Properties.setTrashCanColor(2); break;
							case YELLOW: trashCan4Properties.setTrashCanColor(3); break;
							case GREEN: trashCan4Properties.setTrashCanColor(4); break;
							case BLUE: trashCan4Properties.setTrashCanColor(5); break;
							case PURPLE: trashCan4Properties.setTrashCanColor(6); break;
							default : break;
							}
						}
						delayReUpdateStates();
					}
				}; break;
				default: break;
				}
				disallow = false;
			}
		}

		//			
		if (delayDuration1 != 0){
			switch (trashCan1Properties.getTrashCan()){
			case 1:{
				delayDuration1 = 0;
				delayFrameRate1 = 0;
			}; break;
			case 2:{
				if (TimeUtils.millis() - delayDuration1 < 3000 &&
						currentAbilityState1 == CURRENTABILITYSTATE1.ON &&
						!moveTrashCan1 &&
						!returnTrashCanOf1){
					if (currentAbilityState1 == CURRENTABILITYSTATE1.COOLDOWN){
						delayDuration1 = 0;
						currentAbility1 = 0;
					}
					else if (TimeUtils.millis() - delayFrameRate1 >= 50){
						currentAbility1 = currentAbility1 + 1;
						if (currentAbility1 == 12){
							currentAbility1 = 6;
						}
						delayFrameRate1 = TimeUtils.millis();
					}
				}
				else {
					currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
					delayDuration1 = 0;
					currentAbility1 = 0;
					burnedAbility1Layer.clear();
				}
			}; break;
			case 3:{
				if (TimeUtils.millis() - delayDuration1 < 5000 &&
						currentAbilityState1 == CURRENTABILITYSTATE1.ON &&
						!moveTrashCan1 &&
						!returnTrashCanOf1){
					if (currentAbilityState1 == CURRENTABILITYSTATE1.COOLDOWN){
						delayDuration1 = 0;
						currentAbility1 = 0;
					}
					else if (TimeUtils.millis() - delayFrameRate1 >= 50){
						currentAbility1 = currentAbility1 + 1;
						if (currentAbility1 == 10){
							currentAbility1 = 3;
						}
						delayFrameRate1 = TimeUtils.millis();
					}
				}
				else {
					currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
					delayDuration1 = 0;
					currentAbility1 = 0;
				}
			}; break;
			case 4:{
				if (TimeUtils.millis() - delayDuration1 < 3500 &&
						currentAbilityState1 == CURRENTABILITYSTATE1.ON &&
						!moveTrashCan1 &&
						!returnTrashCanOf1){
					if (currentAbilityState1 == CURRENTABILITYSTATE1.COOLDOWN){
						delayDuration1 = 0;
						currentAbility1 = 0;
					}
					else if (TimeUtils.millis() - delayFrameRate1 >= 50){
						currentAbility1 = currentAbility1 + 1;
						if (currentAbility1 == 8){
							currentAbility1 = 0;
						}
						delayFrameRate1 = TimeUtils.millis();
					}
				}
				else {
					currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
					delayDuration1 = 0;
					currentAbility1 = 0;
				}
			}; break;
			case 5: {

			}; break;
			case 6: {

			}; break;
			default: break;
			}
		}

		if (delayDuration2 != 0){
			switch (trashCan2Properties.getTrashCan()){
			case 1:{
				delayDuration2 = 0;
				delayFrameRate2 = 0;
			}; break;
			case 2:{
				if (TimeUtils.millis() - delayDuration2 < 3000 &&
						currentAbilityState2 == CURRENTABILITYSTATE2.ON &&
						!moveTrashCan2 &&
						!returnTrashCanOf2){
					if (currentAbilityState2 == CURRENTABILITYSTATE2.COOLDOWN){
						delayDuration2 = 0;
						currentAbility2 = 0;
					}
					else if (TimeUtils.millis() - delayFrameRate2 >= 50){
						currentAbility2 = currentAbility2 + 1;
						if (currentAbility2 == 12){
							currentAbility2 = 6;
						}
						delayFrameRate2 = TimeUtils.millis();
					}
				}
				else {
					currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
					delayDuration2 = 0;
					currentAbility2 = 0;
					burnedAbility2Layer.clear();
				}
			}; break;
			case 3:{
				if (TimeUtils.millis() - delayDuration2 < 5000 &&
						currentAbilityState2 == CURRENTABILITYSTATE2.ON &&
						!moveTrashCan2 &&
						!returnTrashCanOf2){
					if (currentAbilityState2 == CURRENTABILITYSTATE2.COOLDOWN){
						delayDuration2 = 0;
						currentAbility2 = 0;
					}
					else if (TimeUtils.millis() - delayFrameRate2 >= 50){
						currentAbility2 = currentAbility2 + 1;
						if (currentAbility2 == 10){
							currentAbility2 = 3;
						}
						delayFrameRate2 = TimeUtils.millis();
					}
				}
				else {
					currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
					delayDuration2 = 0;
					currentAbility2 = 0;
				}
			}; break;
			case 4:{
				if (TimeUtils.millis() - delayDuration2 < 3500 &&
						currentAbilityState2 == CURRENTABILITYSTATE2.ON &&
						!moveTrashCan2 &&
						!returnTrashCanOf2){
					if (currentAbilityState2 == CURRENTABILITYSTATE2.COOLDOWN){
						delayDuration2 = 0;
						currentAbility2 = 0;
					}
					else if (TimeUtils.millis() - delayFrameRate2 >= 50){
						currentAbility2 = currentAbility2 + 1;
						if (currentAbility2 == 8){
							currentAbility2 = 0;
						}
						delayFrameRate2 = TimeUtils.millis();
					}
				}
				else {
					currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
					delayDuration2 = 0;
					currentAbility2 = 0;
				}
			}; break;
			default: break;
			}
		}

		if (delayDuration3 != 0){
			switch (trashCan3Properties.getTrashCan()){
			case 1:{
				delayDuration3 = 0;
				delayFrameRate3 = 0;
			}; break;
			case 2:{
				if (TimeUtils.millis() - delayDuration3 < 3000 &&
						currentAbilityState3 == CURRENTABILITYSTATE3.ON &&
						!moveTrashCan3 &&
						!returnTrashCanOf3){
					if (currentAbilityState3 == CURRENTABILITYSTATE3.COOLDOWN){
						delayDuration3 = 0;
						currentAbility3 = 0;
					}
					else if (TimeUtils.millis() - delayFrameRate3 >= 50){
						currentAbility3 = currentAbility3 + 1;
						if (currentAbility3 == 12){
							currentAbility3 = 6;
						}
						delayFrameRate3 = TimeUtils.millis();
					}
				}
				else {
					currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
					delayDuration3 = 0;
					currentAbility3 = 0;
					burnedAbility3Layer.clear();
				}
			}; break;
			case 3:{
				if (TimeUtils.millis() - delayDuration3 < 5000 &&
						currentAbilityState3 == CURRENTABILITYSTATE3.ON &&
						!moveTrashCan3 &&
						!returnTrashCanOf3){
					if (currentAbilityState3 == CURRENTABILITYSTATE3.COOLDOWN){
						delayDuration3 = 0;
						currentAbility3 = 0;
					}
					else if (TimeUtils.millis() - delayFrameRate3 >= 50){
						currentAbility3 = currentAbility3 + 1;
						if (currentAbility3 == 10){
							currentAbility3 = 3;
						}
						delayFrameRate3 = TimeUtils.millis();
					}
				}
				else {
					currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
					delayDuration3 = 0;
					currentAbility3 = 0;
				}
			}; break;
			case 4:{
				if (TimeUtils.millis() - delayDuration3 < 3500 &&
						currentAbilityState3 == CURRENTABILITYSTATE3.ON &&
						!moveTrashCan3 &&
						!returnTrashCanOf3){
					if (currentAbilityState3 == CURRENTABILITYSTATE3.COOLDOWN){
						delayDuration3 = 0;
						currentAbility3 = 0;
					}
					else if (TimeUtils.millis() - delayFrameRate3 >= 50){
						currentAbility3 = currentAbility3 + 1;
						if (currentAbility3 == 8){
							currentAbility3 = 0;
						}
						delayFrameRate3 = TimeUtils.millis();
					}
				}
				else {
					currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
					delayDuration3 = 0;
					currentAbility3 = 0;
				}
			}; break;
			default: break;
			}
		}

		if (delayDuration4 != 0){
			switch (trashCan4Properties.getTrashCan()){
			case 1:{
				delayDuration4 = 0;
				delayFrameRate4 = 0;
			}; break;
			case 2:{
				if (TimeUtils.millis() - delayDuration4 < 3000 &&
						currentAbilityState4 == CURRENTABILITYSTATE4.ON &&
						!moveTrashCan4 &&
						!returnTrashCanOf4){
					if (currentAbilityState4 == CURRENTABILITYSTATE4.COOLDOWN){
						delayDuration4 = 0;
						currentAbility4 = 0;
					}
					else if (TimeUtils.millis() - delayFrameRate4 >= 50){
						currentAbility4 = currentAbility4 + 1;
						if (currentAbility4 == 12){
							currentAbility4 = 6;
						}
						delayFrameRate4 = TimeUtils.millis();
					}
				}
				else {
					currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
					delayDuration4 = 0;
					currentAbility4 = 0;
					burnedAbility4Layer.clear();
				}
			}; break;
			case 3:{
				if (TimeUtils.millis() - delayDuration4 < 5000 &&
						currentAbilityState4 == CURRENTABILITYSTATE4.ON &&
						!moveTrashCan4 &&
						!returnTrashCanOf4){
					if (currentAbilityState4 == CURRENTABILITYSTATE4.COOLDOWN){
						delayDuration4 = 0;
						currentAbility4 = 0;
					}
					else if (TimeUtils.millis() - delayFrameRate4 >= 50){
						currentAbility4 = currentAbility4 + 1;
						if (currentAbility4 == 10){
							currentAbility4 = 3;
						}
						delayFrameRate4 = TimeUtils.millis();
					}
				}
				else {
					currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
					delayDuration4 = 0;
					currentAbility4 = 0;
				}
			}; break;
			case 4:{
				if (TimeUtils.millis() - delayDuration4 < 3500 &&
						currentAbilityState4 == CURRENTABILITYSTATE4.ON &&
						!moveTrashCan4 &&
						!returnTrashCanOf4){
					if (currentAbilityState4 == CURRENTABILITYSTATE4.COOLDOWN){
						delayDuration4 = 0;
						currentAbility4 = 0;
					}
					else if (TimeUtils.millis() - delayFrameRate4 >= 50){
						currentAbility4 = currentAbility4 + 1;
						if (currentAbility4 == 8){
							currentAbility4 = 0;
						}
						delayFrameRate4 = TimeUtils.millis();
					}
				}
				else {
					currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
					delayDuration4 = 0;
					currentAbility4 = 0;
				}
			}; break;
			default: break;
			}
		}
		//		Ability Cooldowns
		if (delayCooldown1 != 0){
			if (TimeUtils.millis() - delayCooldown1 >= cooldown1){
				if (currentAbilityState1 != CURRENTABILITYSTATE1.UNCLICKABLE){
					delayCooldown1 = 0;
					currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
				}
			}
		}
		if (delayCooldown2 != 0){
			if (TimeUtils.millis() - delayCooldown2 >= cooldown2){
				if (currentAbilityState2 != CURRENTABILITYSTATE2.UNCLICKABLE){
					delayCooldown2 = 0;
					currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
				}
			}
		}
		if (delayCooldown3 != 0){
			if (TimeUtils.millis() - delayCooldown3 >= cooldown3){
				if (currentAbilityState3 != CURRENTABILITYSTATE3.UNCLICKABLE){
					delayCooldown3 = 0;
					currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
				}
			}
		}
		if (delayCooldown4 != 0){
			if (TimeUtils.millis() - delayCooldown4 >= cooldown4){
				if (currentAbilityState4 != CURRENTABILITYSTATE4.UNCLICKABLE){
					delayCooldown4 = 0;
					currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
				}
			}
		}

		if (delayBombPics.get(0) != 0){
			if (TimeUtils.millis() - delayBombPics.get(0) >= 100){
				delayBombPics.set(0, TimeUtils.millis());
				if (currentBombRegion.get(0) + 1 != 11){
					currentBombRegion.set(0, currentBombRegion.get(0) + 1);
				}
				else {
					currentBombRegion.set(0, 0);
					delayBombPics.set(0, (long) 0);
				}
			}
		}

		if (delayItem1CD != 0){
			if (TimeUtils.millis() - delayItem1CD >= item1CD){
				delayItem1CD = 0;
				currentItem1State = CurrentItem1State.CLICKABLE;
			}
		}

		if (delayItem2CD != 0){
			if (TimeUtils.millis() - delayItem2CD >= item2CD){
				delayItem2CD = 0;
				currentItem2State = CurrentItem2State.CLICKABLE;
			}
		}

		if (delayItem3CD != 0){
			if (TimeUtils.millis() - delayItem3CD >= item3CD){
				delayItem3CD = 0;
				currentItem3State = CurrentItem3State.CLICKABLE;
			}
		}

		if (delayItem4CD != 0){
			if (TimeUtils.millis() - delayItem4CD >= item4CD){
				delayItem4CD = 0;
				currentItem4State = CurrentItem4State.CLICKABLE;
			}
		}

		if (delayItem5CD != 0){
			if (TimeUtils.millis() - delayItem5CD >= item5CD){
				delayItem5CD = 0;
				currentItem5State = CurrentItem5State.CLICKABLE;
			}
		}

		if (delayItem6CD != 0){
			if (TimeUtils.millis() - delayItem6CD >= item6CD){
				delayItem6CD = 0;
				currentItem6State = CurrentItem6State.CLICKABLE;
			}
		}


		//		Bomb Animation
		if (delayBombPics.get(0) != 0){
			if (TimeUtils.millis() - delayBombPics.get(0) >= 30){
				delayBombPics.set(0, TimeUtils.millis());
				if (currentBombRegion.get(0) + 1 != 11){
					currentBombRegion.set(0, currentBombRegion.get(0) + 1);
				}
				else {
					currentBombRegion.set(0, 0);
					delayBombPics.set(0, (long) 0);
					burnedTrash1Layer.clear();
				}
			}
		}

		if (delayBombPics.get(1) != 0){
			if (TimeUtils.millis() - delayBombPics.get(1) >= 30){
				delayBombPics.set(1, TimeUtils.millis());
				if (currentBombRegion.get(1) + 1 != 11){
					currentBombRegion.set(1, currentBombRegion.get(1) + 1);
				}
				else {
					currentBombRegion.set(1, 0);
					delayBombPics.set(1, (long) 0);
					burnedTrash2Layer.clear();
				}
			}
		}

		if (delayBombPics.get(2) != 0){
			if (TimeUtils.millis() - delayBombPics.get(2) >= 30){
				delayBombPics.set(2, TimeUtils.millis());
				if (currentBombRegion.get(2) + 1 != 11){
					currentBombRegion.set(2, currentBombRegion.get(2) + 1);
				}
				else {
					currentBombRegion.set(2, 0);
					delayBombPics.set(2, (long) 0);
					burnedTrash3Layer.clear();
				}
			}
		}

		if (delayBombPics.get(3) != 0){
			if (TimeUtils.millis() - delayBombPics.get(3) >= 30){
				delayBombPics.set(3, TimeUtils.millis());
				if (currentBombRegion.get(3) + 1 != 11){
					currentBombRegion.set(3, currentBombRegion.get(3) + 1);
				}
				else {
					currentBombRegion.set(3, 0);
					delayBombPics.set(3, (long) 0);
					burnedTrash4Layer.clear();
				}
			}
		}

		if (delayBombPics.get(4) != 0){
			if (TimeUtils.millis() - delayBombPics.get(4) >= 30){
				delayBombPics.set(4, TimeUtils.millis());
				if (currentBombRegion.get(4) + 1 != 11){
					currentBombRegion.set(4, currentBombRegion.get(4) + 1);
				}
				else {
					currentBombRegion.set(4, 0);
					delayBombPics.set(4, (long) 0);
					burnedTrash5Layer.clear();
				}
			}
		}

		if (delayBombPics.get(5) != 0){
			if (TimeUtils.millis() - delayBombPics.get(5) >= 30){
				delayBombPics.set(5, TimeUtils.millis());
				if (currentBombRegion.get(5) + 1 != 11){
					currentBombRegion.set(5, currentBombRegion.get(5) + 1);
				}
				else {
					currentBombRegion.set(5, 0);
					delayBombPics.set(5, (long) 0);
					burnedTrash6Layer.clear();
				}
			}
		}

		if (delayIceflakePics != 0){
			if (TimeUtils.millis() - delayIceflakePics >= 30){
				delayIceflakePics = TimeUtils.millis();
				if (currentIceflakeRegion + 1 < 6){
					currentIceflakeRegion += 1;
				}
				else {
					iceflakeLayers.set(0, 0, 0, 0);
					currentIceflakeRegion = 0;
					delayIceflakePics = 0;
				}
			}
		}


		if (delayBurstModeCooldown != 0){
			if ((TimeUtils.millis() - delayBurstModeCooldown >= junkWorldEngines.getBurstModeCooldown() / 24)){
				if (currentCDBurstMode != 24){
					delayBurstModeCooldown = TimeUtils.millis();
					currentCDBurstMode += 1;
				}
				else {
					delayBurstModeCooldown = 0;
					currentCDBurstMode = 0;
					burstModeButton = BurstModeButton.CLICKABLE;
					delayBurstModeClickable = TimeUtils.millis();
				}
			}
		}

		if (delayBurstModeClicked != 0){
			if (TimeUtils.millis() - delayBurstModeClicked >= junkWorldEngines.getBurstModeDur() / 24){
				if (currentClickedBurstMode != 24){
					delayBurstModeClicked = TimeUtils.millis();
					currentClickedBurstMode += 1;
				}
				else {
					delayBurstModeClicked = 0;
					currentClickedBurstMode = 0;
					burstModeButton = BurstModeButton.COOLDOWN;
					delayBurstModeCooldown = TimeUtils.millis();	
				}
			}
		}

		if (delayEnergy1Anim != 0){
			if (!(swiftCan1Energy - (junkWorldEngines.getSwiftCanDegen() * Gdx.graphics.getDeltaTime()) < 0)){
				swiftCan1Energy -= junkWorldEngines.getSwiftCanDegen() * Gdx.graphics.getDeltaTime();
			}
			else {
				delayEnergy1Anim = 0;
				delaySwiftCan1Energy = TimeUtils.millis();
				currentAbilityState1 = CURRENTABILITYSTATE1.UNCLICKABLE;
			}
		}

		if (delayEnergy2Anim != 0){
			if (!(swiftCan2Energy - (junkWorldEngines.getSwiftCanDegen() * Gdx.graphics.getDeltaTime()) < 0)){
				swiftCan2Energy -= junkWorldEngines.getSwiftCanDegen() * Gdx.graphics.getDeltaTime();
			}
			else {
				delayEnergy2Anim = 0;
				delaySwiftCan2Energy = TimeUtils.millis();
				currentAbilityState2 = CURRENTABILITYSTATE2.UNCLICKABLE;
			}
		}

		if (delayEnergy3Anim != 0){
			if (!(swiftCan3Energy - (junkWorldEngines.getSwiftCanDegen() * Gdx.graphics.getDeltaTime()) < 0)){
				swiftCan3Energy -= junkWorldEngines.getSwiftCanDegen() * Gdx.graphics.getDeltaTime();
			}
			else {
				delayEnergy3Anim = 0;
				delaySwiftCan3Energy = TimeUtils.millis();
				currentAbilityState3 = CURRENTABILITYSTATE3.UNCLICKABLE;
			}
		}

		if (delayEnergy4Anim != 0){
			if (!(swiftCan4Energy - (junkWorldEngines.getSwiftCanDegen() * Gdx.graphics.getDeltaTime()) < 0)){
				swiftCan4Energy -= junkWorldEngines.getSwiftCanDegen() * Gdx.graphics.getDeltaTime();
			}
			else {
				delayEnergy4Anim = 0;
				delaySwiftCan4Energy = TimeUtils.millis();
				currentAbilityState4 = CURRENTABILITYSTATE4.UNCLICKABLE;
			}
		}

		if (delaySwiftCan1Energy != 0){
			if (swiftCan1Energy >= (junkWorldEngines.getSwiftCanEnergyTot() * 2) / 5){
				delaySwiftCan1Energy = 0;
				currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
			}
		}

		if (delaySwiftCan2Energy != 0){
			if (swiftCan2Energy >= (junkWorldEngines.getSwiftCanEnergyTot() * 2) / 5){
				delaySwiftCan2Energy = 0;
				currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
			}
		}

		if (delaySwiftCan3Energy != 0){
			if (swiftCan3Energy >= (junkWorldEngines.getSwiftCanEnergyTot() * 2) / 5){
				delaySwiftCan3Energy = 0;
				currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
			}
		}

		if (delaySwiftCan4Energy != 0){
			if (swiftCan4Energy >= (junkWorldEngines.getSwiftCanEnergyTot() * 2) / 5){
				delaySwiftCan4Energy = 0;
				currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
			}
		}

		if (delayGluedTrash != 0){
			if (TimeUtils.millis() - delayGluedTrash >= 1500){
				delayGluedTrash = 0;
				gluedTrashLayer = null;
			}
		}

		if (delayDefroze != 0){
			if (TimeUtils.millis() - delayDefroze >= 1000){
				delayDefroze = 0;
				frozenTrashLayer.clear();
			}
		}

		if (delayUnaugmentCans != 0){
			if (TimeUtils.millis() - delayUnaugmentCans >= 2000){
				delayUnaugmentCans = 0;
				augmentCan1 = false;
				augmentCan2 = false;
				augmentCan3 = false;
				augmentCan4 = false;
			}
		}

		if (TimeUtils.millis() - delayAugmentAni >= 100){
			delayAugmentAni = TimeUtils.millis();
			if (!aniBack){
				if (currentAugmentedBurstRegion + 1 <= 5){
					currentAugmentedBurstRegion += 1;
				}
				else {
					aniBack = true;
				}
			}
			else {
				if (currentAugmentedBurstRegion - 1 >= 0){
					currentAugmentedBurstRegion -= 1;
				}
				else {
					aniBack = false;;
				}
			}
		}

		if (delaySticker != 0){
			if (TimeUtils.millis() - delaySticker >= 1000){
				delaySticker = 0;
			}
		}

		if (delaySpeedRush.get(0) != 0){
			if (TimeUtils.millis() - delaySpeedRush.get(0) >= 2000){
				delaySpeedRush.set(0, (long) 0);
			}
		}
		if (delaySpeedRush.get(1) != 0){
			if (TimeUtils.millis() - delaySpeedRush.get(1) >= 2000){
				delaySpeedRush.set(1, (long) 0);
			}
		}
		if (delaySpeedRush.get(2) != 0){
			if (TimeUtils.millis() - delaySpeedRush.get(2) >= 2000){
				delaySpeedRush.set(2, (long) 0);
			}
		}
		if (delaySpeedRush.get(3) != 0){
			if (TimeUtils.millis() - delaySpeedRush.get(3) >= 2000){
				delaySpeedRush.set(3, (long) 0);
			}
		}

		if (trashCan1Properties.getTrashCan() == 5 && dumpStarter){
			if (ifCanIsDull.get(0)){
				ifCanIsDull.set(0, false);
				delayDullCanColor1 = TimeUtils.millis();
			}
		}
		if (trashCan2Properties.getTrashCan() == 5 && dumpStarter){
			if (ifCanIsDull.get(1)){
				ifCanIsDull.set(1, false);
				delayDullCanColor2 = TimeUtils.millis();
			}
		}
		if (trashCan3Properties.getTrashCan() == 5 && dumpStarter){
			if (ifCanIsDull.get(2)){
				ifCanIsDull.set(2, false);
				delayDullCanColor3 = TimeUtils.millis();
			}
		}
		if (trashCan4Properties.getTrashCan() == 5 && dumpStarter){
			if (ifCanIsDull.get(3)){
				ifCanIsDull.set(3, false);
				delayDullCanColor4 = TimeUtils.millis();
			}
		}

		if (delayDullCanColor1 != 0){
			if (TimeUtils.millis() - delayDullCanColor1 >= 15000){
				if (trashCan1Properties.getTrashCanColor() != 0){
					if (trashCan1Properties.getTrashCanColor() != 0 && trashCan1Properties.getTrashCanColor() != 7){
						previousDullCanColor.set(0, trashCan1Properties.getTrashCanColor());
					}
					else {
						previousDullCanColor.set(0, dullPrevColor1);
					}
					trashCan1Properties.setTrashCanColor(0);
					trashCan1Capacity = junkWorldEngines.getDullCanCapacity();
					if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
						currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
					}
					else if (currentAbilityState1 == CURRENTABILITYSTATE1.UNCLICKABLE && (moveTrashCan1 || returnTrashCanOf1)){
						previousAbility1State = PreviousAbility1State.OFF;
					}
					currentCapacity1 -= currentCapacity1/2;
					delayDullCanColor1 = 0;
					ifCanIsDull.set(0, true);
				}
				else {
					delayDullCanColor1 = 0;
					ifCanIsDull.set(0, true);
				}
			}
		}

		if (delayDullCanColor2 != 0){
			if (TimeUtils.millis() - delayDullCanColor2 >= 15000){
				if (trashCan2Properties.getTrashCanColor() != 0){
					if (trashCan2Properties.getTrashCanColor() != 0 && trashCan2Properties.getTrashCanColor() != 7){
						previousDullCanColor.set(1, trashCan2Properties.getTrashCanColor());
					}
					else {
						previousDullCanColor.set(1, dullPrevColor2);
					}
					trashCan2Properties.setTrashCanColor(0);
					trashCan2Capacity = junkWorldEngines.getDullCanCapacity();
					if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
						currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
					}
					else if (currentAbilityState2 == CURRENTABILITYSTATE2.UNCLICKABLE && (moveTrashCan2 || returnTrashCanOf2)){
						previousAbility2State = PreviousAbility2State.OFF;
					}

					currentCapacity2 -= currentCapacity2/2;
					delayDullCanColor2 = 0;
					ifCanIsDull.set(1, true);
				}
				else {
					delayDullCanColor2 = 0;
					ifCanIsDull.set(1, true);
				}
			}
		}

		if (delayDullCanColor3 != 0){
			if (TimeUtils.millis() - delayDullCanColor3 >= 15000){
				if (trashCan3Properties.getTrashCanColor() != 0){
					if (trashCan3Properties.getTrashCanColor() != 0 && trashCan3Properties.getTrashCanColor() != 7){
						previousDullCanColor.set(2, trashCan3Properties.getTrashCanColor());
					}
					else {
						previousDullCanColor.set(2, dullPrevColor3);
					}
					trashCan3Properties.setTrashCanColor(0);
					trashCan3Capacity = junkWorldEngines.getDullCanCapacity();
					if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
						currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
					}
					else if (currentAbilityState3 == CURRENTABILITYSTATE3.UNCLICKABLE && (moveTrashCan3 || returnTrashCanOf3)){
						previousAbility3State = PreviousAbility3State.OFF;
					}

					currentCapacity3 -= currentCapacity3/2;
					delayDullCanColor3 = 0;
					ifCanIsDull.set(2, true);
				}
				else {
					delayDullCanColor3 = 0;
					ifCanIsDull.set(2, true);
				}
			}
		}

		if (delayDullCanColor4 != 0){
			if (TimeUtils.millis() - delayDullCanColor4 >= 15000){
				if (trashCan4Properties.getTrashCanColor() != 0){
					if (trashCan4Properties.getTrashCanColor() != 0 && trashCan4Properties.getTrashCanColor() != 7){
						previousDullCanColor.set(3, trashCan4Properties.getTrashCanColor());
					}
					else {
						previousDullCanColor.set(3, dullPrevColor4);
					}
					trashCan4Properties.setTrashCanColor(0);
					trashCan4Capacity = junkWorldEngines.getDullCanCapacity();
					if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
						currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
					}
					else if (currentAbilityState4 == CURRENTABILITYSTATE4.UNCLICKABLE && (moveTrashCan4 || returnTrashCanOf4)){
						previousAbility4State = PreviousAbility4State.OFF;
					}

					currentCapacity4 -= currentCapacity4/2;
					delayDullCanColor4 = 0;
					ifCanIsDull.set(3, true);
				}
				else {
					delayDullCanColor4 = 0;
					ifCanIsDull.set(3, true);
				}
			}
		}

		if (delayResetTap1 != 0){
			if (TimeUtils.millis() - delayResetTap1 >= 300){
				delayResetTap1 = 0;
				isLongPressed = false;
				trashCan1Input.clearListeners();
				trashCan2Input.clearListeners();
				trashCan3Input.clearListeners();
				trashCan4Input.clearListeners();
			}
		}

		if (delayResetTap2 != 0){
			if (TimeUtils.millis() - delayResetTap2 >= 300){
				delayResetTap2 = 0;
				isLongPressed = false;
				trashCan1Input.clearListeners();
				trashCan2Input.clearListeners();
				trashCan3Input.clearListeners();
				trashCan4Input.clearListeners();
			}
		}

		if (delayResetTap3 != 0){
			if (TimeUtils.millis() - delayResetTap3 >= 300){
				delayResetTap3 = 0;
				isLongPressed = false;
				trashCan1Input.clearListeners();
				trashCan2Input.clearListeners();
				trashCan3Input.clearListeners();
				trashCan4Input.clearListeners();
			}
		}

		if (delayResetTap4 != 0){
			if (TimeUtils.millis() - delayResetTap4 >= 300){
				delayResetTap4 = 0;
				isLongPressed = false;
				trashCan1Input.clearListeners();
				trashCan2Input.clearListeners();
				trashCan3Input.clearListeners();
				trashCan4Input.clearListeners();
			}
		}

		//		TODO
		if (!delayActivateReset){
			if (delayReUpdateStates != 0){
				if (TimeUtils.nanoTime() - delayReUpdateStates >= 10000000){
					if (!disallow){
						switch (trashCanSelected){
						case FIRST: {
							currentCan1State = CURRENTCAN1STATE.EMPTY;
						}; break;
						case SECOND: {
							currentCan2State = CURRENTCAN2STATE.EMPTY;
						}; break;
						case THIRD: {
							currentCan3State = CURRENTCAN3STATE.EMPTY;
						}; break;
						case FOURTH: {
							currentCan4State = CURRENTCAN4STATE.EMPTY;
						}; break;
						default: break;
						}

						switch (returningTrashCan){
						case FIRST: currentCan1State = CURRENTCAN1STATE.EMPTY; break;
						case SECOND: currentCan2State = CURRENTCAN2STATE.EMPTY; break;
						case THIRD: currentCan3State = CURRENTCAN3STATE.EMPTY; break;
						case FOURTH: currentCan4State = CURRENTCAN4STATE.EMPTY; break;
						default: break;
						}

						switch (currentBottomHUDState){
						case ABILITY_SELECTION: {
						}; break;
						case COLOR_SELECTION: {
							setTrashCanDelay = true;
							setTrashCanColor = false;
							setTrashCanType = true;
							currentSelectedPalette = CurrentSelectedPalette.NONE;
							currentSelectedCanColor = CurrentSelectedCanColor.NONE;
							currentSelectedType = CurrentSelectedType.NONE;
						}; break;
						case TYPE_SELECTION: {
							setTrashCanDelay = true;
							setTrashCanColor = true;
							setTrashCanType = false;
							currentSelectedPalette = CurrentSelectedPalette.NONE;
							currentSelectedCanColor = CurrentSelectedCanColor.NONE;
							currentSelectedType = CurrentSelectedType.NONE;
						}; break;
						default:
							break;
						}

						junkWorldEngines.setGreaterThanXPos(false);
						junkWorldEngines.setLessThanXPos(false);
						junkWorldEngines.setGreaterThanReturningXPos(false);
						junkWorldEngines.setLessThanReturningXPos(false);
						noTrashCan = false;
						trashCanSelected = TRASHCANSELECTED.NONE;
						returningTrashCan = RETURNINGTRASHCAN.NONE;
						addListener = true;
						delayReUpdateStates = 0;
					}
				}
			}
		}
		else delayActivateReset = false;
	}

	private void moveableTrashCan() {
		if (moveTrashCan1){
			if (!isTrashCan1){
				switch (trashCan1AbilityPos){
				case 1: trashCan1Layer.x = 0; break;
				case 2: trashCan1Layer.x = 128; break;
				case 3: trashCan1Layer.x = 256; break;
				case 4: trashCan1Layer.x = 384;  break;
				default: break;
				}
				reUpdateStates(1);
			}
			else {
				if (junkWorldEngines.getGameMode() == 0){
					if (tutorialSet) {
						tutorialSet = false;
						junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
					}
				}
				if ((trashCan1Speed / Math.abs(trashCan1Speed) == 1)){
					if (trashCan1Layer.x + trashCan1Speed > trashCan1XTarget){
						trashCan1Speed = trashCan1XTarget - trashCan1Layer.x;
					}
				}
				else if ((trashCan1Speed / Math.abs(trashCan1Speed) == -1)){
					if (trashCan1Layer.x + trashCan1Speed < trashCan1XTarget){
						trashCan1Speed = trashCan1XTarget - trashCan1Layer.x;
					}
				}

				if (trashCan1Layer.x != trashCan1XTarget){
					trashCan1Layer.x += trashCan1Speed;
					if (trashCan1Layer.x == trashCan1XTarget){
						reUpdateStates(1);
					}
				}
				else {
					reUpdateStates(1);
				}
			}
		}

		if (returnTrashCanOf1){

			if (!isTrashCan1){
				switch (trashCan1AbilityPos){
				case 1: trashCan1Layer.x = 0; break;
				case 2: trashCan1Layer.x = 128; break;
				case 3: trashCan1Layer.x = 256; break;
				case 4: trashCan1Layer.x = 384; break;
				default: break;
				}
				reUpdateStates2(1, returningTrashCan1);
			}
			else {
				if (returningTrashCan1Speed / Math.abs(returningTrashCan1Speed) == 1){
					if (trashCan1Layer.x + returningTrashCan1Speed > returningTrashCan1Target){
						returningTrashCan1Speed = returningTrashCan1Target - trashCan1Layer.x;
					}
				}
				else if (returningTrashCan1Speed / Math.abs(returningTrashCan1Speed) == -1){
					if (trashCan1Layer.x + returningTrashCan1Speed < returningTrashCan1Target){
						returningTrashCan1Speed = returningTrashCan1Target - trashCan1Layer.x;
					}
				}

				if (trashCan1Layer.x != returningTrashCan1Target){
					trashCan1Layer.x += returningTrashCan1Speed;
					if (trashCan1Layer.x == returningTrashCan1Target){
						reUpdateStates2(1, returningTrashCan1);
					}
				}
				else {
					reUpdateStates2(1, returningTrashCan1);
				}
			}
		}

		if (moveTrashCan2){

			if (!isTrashCan2){
				switch (trashCan2AbilityPos){
				case 1: trashCan2Layer.x = 0; break;
				case 2: trashCan2Layer.x = 128; break;
				case 3: trashCan2Layer.x = 256; break;
				case 4: trashCan2Layer.x = 384; break;
				default: break;
				}
				reUpdateStates(2);
			}
			else {
				if (junkWorldEngines.getGameMode() == 0){
					if (tutorialSet) {
						tutorialSet = false;
						junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
					}
				}
				if ((trashCan2Speed / Math.abs(trashCan2Speed) == 1)){
					if (trashCan2Layer.x + trashCan2Speed > trashCan2XTarget){
						trashCan2Speed = trashCan2XTarget - trashCan2Layer.x;
					}
				}
				else if ((trashCan2Speed / Math.abs(trashCan2Speed) == -1)){
					if (trashCan2Layer.x + trashCan2Speed < trashCan2XTarget){
						trashCan2Speed = trashCan2XTarget - trashCan2Layer.x;
					}
				}

				if (trashCan2Layer.x != trashCan2XTarget){
					trashCan2Layer.x += trashCan2Speed;
					if (trashCan2Layer.x == trashCan2XTarget){
						reUpdateStates(2);
					}
				}
				else {
					reUpdateStates(2);
				}
			}
		}

		if (returnTrashCanOf2){

			if (!isTrashCan2){
				switch (trashCan2AbilityPos){
				case 1: trashCan2Layer.x = 0; break;
				case 2: trashCan2Layer.x = 128; break;
				case 3: trashCan2Layer.x = 256; break;
				case 4: trashCan2Layer.x = 384; break;
				default: break;
				}
				reUpdateStates2(2, returningTrashCan2);
			}
			else {
				if (returningTrashCan2Speed / Math.abs(returningTrashCan2Speed) == 1){
					if (trashCan2Layer.x + returningTrashCan2Speed > returningTrashCan2Target){
						returningTrashCan2Speed = returningTrashCan2Target - trashCan2Layer.x;
					}
				}
				else if (returningTrashCan2Speed / Math.abs(returningTrashCan2Speed) == -1){
					if (trashCan2Layer.x + returningTrashCan2Speed < returningTrashCan2Target){
						returningTrashCan2Speed = returningTrashCan2Target - trashCan2Layer.x;
					}
				}

				if (trashCan2Layer.x != returningTrashCan2Target){
					trashCan2Layer.x += returningTrashCan2Speed;
					if (trashCan2Layer.x == returningTrashCan2Target){
						reUpdateStates2(2, returningTrashCan2);
					}
				}
				else {
					reUpdateStates2(2, returningTrashCan2);
				}
			}
		}

		if (moveTrashCan3){

			if (!isTrashCan3){
				switch (trashCan3AbilityPos){
				case 1: trashCan3Layer.x = 0; break;
				case 2: trashCan3Layer.x = 128; break;
				case 3: trashCan3Layer.x = 256; break;
				case 4: trashCan3Layer.x = 384; break;
				default: break;
				}
				reUpdateStates(3);
			}
			else {
				if (junkWorldEngines.getGameMode() == 0){
					if (tutorialSet) {
						tutorialSet = false;
						junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
					}
				}
				if ((trashCan3Speed / Math.abs(trashCan3Speed) == 1)){
					if (trashCan3Layer.x + trashCan3Speed > trashCan3XTarget){
						trashCan3Speed = trashCan3XTarget - trashCan3Layer.x;
					}
				}
				else if ((trashCan3Speed / Math.abs(trashCan3Speed) == -1)){
					if (trashCan3Layer.x + trashCan3Speed < trashCan3XTarget){
						trashCan3Speed = trashCan3XTarget - trashCan3Layer.x;
					}
				}

				if (trashCan3Layer.x != trashCan3XTarget){
					trashCan3Layer.x += trashCan3Speed;
					if (trashCan3Layer.x == trashCan3XTarget){
						reUpdateStates(3);
					}
				}
				else {
					reUpdateStates(3);
				}
			}
		}

		if (returnTrashCanOf3){

			if (!isTrashCan3){
				switch (trashCan3AbilityPos){
				case 1: trashCan3Layer.x = 0; break;
				case 2: trashCan3Layer.x = 128; break;
				case 3: trashCan3Layer.x = 256; break;
				case 4: trashCan3Layer.x = 384; break;
				default: break;
				}
				reUpdateStates2(3, returningTrashCan3);
			}
			else {
				if (returningTrashCan3Speed / Math.abs(returningTrashCan3Speed) == 1){
					if (trashCan3Layer.x + returningTrashCan3Speed > returningTrashCan3Target){
						returningTrashCan3Speed = returningTrashCan3Target - trashCan3Layer.x;
					}
				}
				else if (returningTrashCan3Speed / Math.abs(returningTrashCan3Speed) == -1){
					if (trashCan3Layer.x + returningTrashCan3Speed < returningTrashCan3Target){
						returningTrashCan3Speed = returningTrashCan3Target - trashCan3Layer.x;
					}
				}

				if (trashCan3Layer.x != returningTrashCan3Target){
					trashCan3Layer.x += returningTrashCan3Speed;
					if (trashCan3Layer.x == returningTrashCan3Target){
						reUpdateStates2(3, returningTrashCan3);
					}
				}
				else {
					reUpdateStates2(3, returningTrashCan3);
				}
			}
		}

		if (moveTrashCan4){

			if (!isTrashCan4){
				switch (trashCan4AbilityPos){
				case 1: trashCan4Layer.x = 0; break;
				case 2: trashCan4Layer.x = 128; break;
				case 3: trashCan4Layer.x = 256; break;
				case 4: trashCan4Layer.x = 384; break;
				default: break;
				}
				reUpdateStates(4);
			}
			else {
				if (junkWorldEngines.getGameMode() == 0){
					if (tutorialSet) {
						tutorialSet = false;
						junkWorldEngines.setCurrentTutorial(junkWorldEngines.getCurrentTutorial() + 1);
					}
				}
				if ((trashCan4Speed / Math.abs(trashCan4Speed) == 1)){
					if (trashCan4Layer.x + trashCan4Speed > trashCan4XTarget){
						trashCan4Speed = trashCan4XTarget - trashCan4Layer.x;
					}
				}
				else if ((trashCan4Speed / Math.abs(trashCan4Speed) == -1)){
					if (trashCan4Layer.x + trashCan4Speed < trashCan4XTarget){
						trashCan4Speed = trashCan4XTarget - trashCan4Layer.x;
					}
				}

				if (trashCan4Layer.x != trashCan4XTarget){
					trashCan4Layer.x += trashCan4Speed;
					if (trashCan4Layer.x == trashCan4XTarget){
						reUpdateStates(4);
					}
				}
				else {
					reUpdateStates(4);
				}
			}
		}

		if (returnTrashCanOf4){

			if (!isTrashCan4){
				switch (trashCan4AbilityPos){
				case 1: trashCan4Layer.x = 0; break;
				case 2: trashCan4Layer.x = 128; break;
				case 3: trashCan4Layer.x = 256; break;
				case 4: trashCan4Layer.x = 384; break;
				default: break;
				}
				reUpdateStates2(4, returningTrashCan4);
			}
			else {
				if (returningTrashCan4Speed / Math.abs(returningTrashCan4Speed) == 1){
					if (trashCan4Layer.x + returningTrashCan4Speed > returningTrashCan4Target){
						returningTrashCan4Speed = returningTrashCan4Target - trashCan4Layer.x;
					}
				}
				else if (returningTrashCan4Speed / Math.abs(returningTrashCan4Speed) == -1){
					if (trashCan4Layer.x + returningTrashCan4Speed < returningTrashCan4Target){
						returningTrashCan4Speed = returningTrashCan4Target - trashCan4Layer.x;
					}
				}

				if (trashCan4Layer.x != returningTrashCan4Target){
					trashCan4Layer.x += returningTrashCan4Speed;
					if (trashCan4Layer.x == returningTrashCan4Target){
						reUpdateStates2(4, returningTrashCan4);
					}
				}
				else {
					reUpdateStates2(4, returningTrashCan4);
				}
			}
		}
	}

	private void updateEngines(int xPos, int yPos) {
		currentXPos = xPos;
		float selectedX = 0;
		switch (trashCanSelected){
		case FIRST: selectedX = trashCan1Layer.x; break;
		case SECOND: selectedX = trashCan2Layer.x; break;
		case THIRD: selectedX = trashCan3Layer.x; break;
		case FOURTH: selectedX = trashCan4Layer.x; break;
		default: break;
		}
		junkWorldEngines.setBackXPos(selectedX);
		if (yPos < secondDivRow && yPos >= firstDivRow){
			if (currentXPos < secondDivCol &&
					currentXPos >= firstDivCol){
				junkWorldEngines.setXPos(0);
				if (selectedX >= 128) {
					junkWorldEngines.setGreaterThanXPos(true);
					junkWorldEngines.setLessThanXPos(false);
				} 
				else {
					junkWorldEngines.setGreaterThanXPos(false);
					junkWorldEngines.setLessThanXPos(false);
				}
				switch (trashCanSelected){
				case FIRST: trashCan1AbilityPos = 1; break;
				case SECOND: trashCan2AbilityPos = 1; break;
				case THIRD: trashCan3AbilityPos = 1; break;
				case FOURTH: trashCan4AbilityPos = 1; break;
				default: break;
				}
			}
			else if (currentXPos < thirdDivCol &&
					currentXPos >= secondDivCol) {
				junkWorldEngines.setXPos(128);
				if (selectedX >= 256) {
					junkWorldEngines.setGreaterThanXPos(true);
					junkWorldEngines.setLessThanXPos(false);
				}
				else if (selectedX < 128) {
					junkWorldEngines.setGreaterThanXPos(false);
					junkWorldEngines.setLessThanXPos(true);
				}
				else {
					junkWorldEngines.setGreaterThanXPos(false);
					junkWorldEngines.setLessThanXPos(false);
				}
				switch (trashCanSelected){
				case FIRST: trashCan1AbilityPos = 2; break;
				case SECOND: trashCan2AbilityPos = 2; break;
				case THIRD: trashCan3AbilityPos = 2; break;
				case FOURTH: trashCan4AbilityPos = 2; break;
				default: break;
				}
			}
			else if (currentXPos < fourthDivCol &&
					currentXPos >= thirdDivCol) {
				junkWorldEngines.setXPos(256);
				if (selectedX >= 384) {
					junkWorldEngines.setGreaterThanXPos(true);
					junkWorldEngines.setLessThanXPos(false);
				}
				else if (selectedX < 256) {
					junkWorldEngines.setGreaterThanXPos(false);
					junkWorldEngines.setLessThanXPos(true);
				}
				else {
					junkWorldEngines.setGreaterThanXPos(false);
					junkWorldEngines.setLessThanXPos(false);
				}
				switch (trashCanSelected){
				case FIRST: trashCan1AbilityPos = 3; break;
				case SECOND: trashCan2AbilityPos = 3; break;
				case THIRD: trashCan3AbilityPos = 3; break;
				case FOURTH: trashCan4AbilityPos = 3; break;
				default: break;
				}
			}
			else if (currentXPos < fifthDivCol &&
					currentXPos >= fourthDivCol) {
				junkWorldEngines.setXPos(384);
				if (selectedX < 384) {
					junkWorldEngines.setGreaterThanXPos(false);
					junkWorldEngines.setLessThanXPos(true);
				}
				else {
					junkWorldEngines.setGreaterThanXPos(false);
					junkWorldEngines.setLessThanXPos(false);
				}
				switch (trashCanSelected){
				case FIRST: trashCan1AbilityPos = 4; break;
				case SECOND: trashCan2AbilityPos = 4; break;
				case THIRD: trashCan3AbilityPos = 4; break;
				case FOURTH: trashCan4AbilityPos = 4; break;
				default: break;
				}
			}
			switch (trashCanSelected){
			case FIRST: trashCan1XTarget = junkWorldEngines.getXPos(); break;
			case SECOND: trashCan2XTarget = junkWorldEngines.getXPos(); break;
			case THIRD: trashCan3XTarget = junkWorldEngines.getXPos(); break;
			case FOURTH: trashCan4XTarget = junkWorldEngines.getXPos(); break;
			default: break;
			}
		}
	}

	private void updateMechanics() {
		float returningX = 0;

		if (currentXPos < secondDivCol &&
				currentXPos >= firstDivCol) {
			if (trashCan1Layer.x == 0 &&
					!trashCan1Used){
				noTrashCan  = false;
				trashCan1Used = true;
				returningX = trashCan1Layer.x;
				returningTrashCan = RETURNINGTRASHCAN.FIRST;
				switch (trashCanSelected){
				case FIRST: {
					returningTrashCan1Target = trashCan1Layer.x;
				}; break;
				case SECOND: {
					returningTrashCan1Target = trashCan2Layer.x; 
				}; break;
				case THIRD: {
					returningTrashCan1Target = trashCan3Layer.x;
				}; break;
				case FOURTH: {
					returningTrashCan1Target = trashCan4Layer.x;
				}; break;
				default: {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}; break;
				}

				if (junkWorldEngines.getBackXPos() == 0){
					trashCan1AbilityPos = 1;
					updateReturningMechanics(1, 1, returningTrashCan1Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 128){
					trashCan1AbilityPos = 2;
					updateReturningMechanics(1, 1, returningTrashCan1Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 256){
					trashCan1AbilityPos = 3;
					updateReturningMechanics(1, 1, returningTrashCan1Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 384){
					trashCan1AbilityPos = 4;
					updateReturningMechanics(1, 1, returningTrashCan1Target, returningX);
				}
				else {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}
			}
			else if (trashCan2Layer.x == 0 &&
					!trashCan2Used){
				noTrashCan  = false;
				trashCan2Used = true;
				returningX = trashCan2Layer.x;
				returningTrashCan = RETURNINGTRASHCAN.SECOND;
				switch (trashCanSelected){
				case FIRST: {
					returningTrashCan2Target = trashCan1Layer.x;
				}; break;
				case SECOND: {
					returningTrashCan2Target = trashCan2Layer.x;
				}; break;
				case THIRD: {
					returningTrashCan2Target = trashCan3Layer.x;
				}; break;
				case FOURTH: {
					returningTrashCan2Target = trashCan4Layer.x;
				}; break;
				default: {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}; break;
				}

				if (junkWorldEngines.getBackXPos() == 0){
					trashCan2AbilityPos = 1;
					updateReturningMechanics(2, 1, returningTrashCan2Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 128){
					trashCan2AbilityPos = 2;
					updateReturningMechanics(2, 1, returningTrashCan2Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 256){
					trashCan2AbilityPos = 3;
					updateReturningMechanics(2, 1, returningTrashCan2Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 384){
					trashCan2AbilityPos = 4;
					updateReturningMechanics(2, 1, returningTrashCan2Target, returningX);
				}
				else {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}
			}
			else if (trashCan3Layer.x == 0 &&
					!trashCan3Used){
				noTrashCan  = false;
				trashCan3Used = true;
				returningX = trashCan3Layer.x;
				returningTrashCan = RETURNINGTRASHCAN.THIRD;
				switch (trashCanSelected){
				case FIRST: {
					returningTrashCan3Target = trashCan1Layer.x; 
				}; break;
				case SECOND: {
					returningTrashCan3Target = trashCan2Layer.x; 
				}; break;
				case THIRD: {
					returningTrashCan3Target = trashCan3Layer.x; 
				}; break;
				case FOURTH: {
					returningTrashCan3Target = trashCan4Layer.x;
				}; break;
				default: {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}; break;
				}

				if (junkWorldEngines.getBackXPos() == 0){
					trashCan3AbilityPos = 1;
					updateReturningMechanics(3, 1, returningTrashCan3Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 128){
					trashCan3AbilityPos = 2;
					updateReturningMechanics(3, 1, returningTrashCan3Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 256){
					trashCan3AbilityPos = 3;
					updateReturningMechanics(3, 1, returningTrashCan3Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 384){
					trashCan3AbilityPos = 4;
					updateReturningMechanics(3, 1, returningTrashCan3Target, returningX);
				}
				else {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}
			}
			else if (trashCan4Layer.x == 0 &&
					!trashCan4Used){
				noTrashCan  = false;
				trashCan4Used = true;
				returningX = trashCan4Layer.x;
				returningTrashCan = RETURNINGTRASHCAN.FOURTH;
				switch (trashCanSelected){
				case FIRST: {
					returningTrashCan4Target = trashCan1Layer.x;
				}; break;
				case SECOND: {
					returningTrashCan4Target = trashCan2Layer.x;
				} break;
				case THIRD: {
					returningTrashCan4Target = trashCan3Layer.x;
				} break;
				case FOURTH: {
					returningTrashCan4Target = trashCan4Layer.x;
				}; break;
				default: {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}; break;
				}

				if (junkWorldEngines.getBackXPos() == 0){
					trashCan4AbilityPos = 1;
					updateReturningMechanics(4, 1, returningTrashCan4Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 128){
					trashCan4AbilityPos = 2;
					updateReturningMechanics(4, 1, returningTrashCan4Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 256){
					trashCan4AbilityPos = 3;
					updateReturningMechanics(4, 1, returningTrashCan4Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 384){
					trashCan4AbilityPos = 4;
					updateReturningMechanics(4, 1, returningTrashCan4Target, returningX);
				}
				else {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}
			}
			else {
				noTrashCan  = true;
				junkWorldEngines.setGreaterThanReturningXPos(false);
				junkWorldEngines.setLessThanReturningXPos(false);
			}
		}
		else if (currentXPos < thirdDivCol &&
				currentXPos >= secondDivCol) {
			if (trashCan1Layer.x == 128 &&
					!trashCan1Used){
				noTrashCan  = false;
				trashCan1Used = true;
				returningX = trashCan1Layer.x;
				returningTrashCan = RETURNINGTRASHCAN.FIRST;
				switch (trashCanSelected){
				case FIRST: {
					returningTrashCan1Target = trashCan1Layer.x; 
				}; break;
				case SECOND: {
					returningTrashCan1Target = trashCan2Layer.x; 
				}; break;
				case THIRD: {
					returningTrashCan1Target = trashCan3Layer.x; 
				}; break;
				case FOURTH: {
					returningTrashCan1Target = trashCan4Layer.x;
				}; break;
				default: {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}; break;
				}

				if (junkWorldEngines.getBackXPos() == 0){
					trashCan1AbilityPos = 1;
					updateReturningMechanics(1, 2, returningTrashCan1Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 128){
					trashCan1AbilityPos = 2;
					updateReturningMechanics(1, 2, returningTrashCan1Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 256){
					trashCan1AbilityPos = 3;
					updateReturningMechanics(1, 2, returningTrashCan1Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 384){
					trashCan1AbilityPos = 4;
					updateReturningMechanics(1, 2, returningTrashCan1Target, returningX);
				}
				else {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}
			}
			else if (trashCan2Layer.x == 128 &&
					!trashCan2Used){
				noTrashCan  = false;
				trashCan2Used = true;
				returningX = trashCan2Layer.x;
				returningTrashCan = RETURNINGTRASHCAN.SECOND;
				switch (trashCanSelected){
				case FIRST: {
					returningTrashCan2Target = trashCan1Layer.x; 
				}; break;
				case SECOND: {
					returningTrashCan2Target = trashCan2Layer.x; 
				}; break;
				case THIRD: {
					returningTrashCan2Target = trashCan3Layer.x; 
				}; break;
				case FOURTH: {
					returningTrashCan2Target = trashCan4Layer.x;
				}; break;
				default: {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}; break;
				}

				if (junkWorldEngines.getBackXPos() == 0){
					trashCan2AbilityPos = 1;
					updateReturningMechanics(2, 2, returningTrashCan2Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 128){
					trashCan2AbilityPos = 2;
					updateReturningMechanics(2, 2, returningTrashCan2Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 256){
					trashCan2AbilityPos = 3;
					updateReturningMechanics(2, 2, returningTrashCan2Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 384){
					trashCan2AbilityPos = 4;
					updateReturningMechanics(2, 2, returningTrashCan2Target, returningX);
				}
				else {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}
			}
			else if (trashCan3Layer.x == 128 &&
					!trashCan3Used){
				noTrashCan  = false;
				trashCan3Used = true;
				returningX = trashCan3Layer.x;
				returningTrashCan = RETURNINGTRASHCAN.THIRD;
				switch (trashCanSelected){
				case FIRST: {
					returningTrashCan3Target = trashCan1Layer.x; 
				}; break;
				case SECOND: {
					returningTrashCan3Target = trashCan2Layer.x; 
				}; break;
				case THIRD: {
					returningTrashCan3Target = trashCan3Layer.x; 
				}; break;
				case FOURTH: {
					returningTrashCan3Target = trashCan4Layer.x;
				}; break;
				default: {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}; break;
				}

				if (junkWorldEngines.getBackXPos() == 0){
					trashCan3AbilityPos = 1;
					updateReturningMechanics(3, 2, returningTrashCan3Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 128){
					trashCan3AbilityPos = 2;
					updateReturningMechanics(3, 2, returningTrashCan3Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 256){
					trashCan3AbilityPos = 3;
					updateReturningMechanics(3, 2, returningTrashCan3Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 384){
					trashCan3AbilityPos = 4;
					updateReturningMechanics(3, 2, returningTrashCan3Target, returningX);
				}
				else {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}
			}
			else if (trashCan4Layer.x == 128 &&
					!trashCan4Used){
				noTrashCan  = false;
				trashCan4Used = true;
				returningX = trashCan4Layer.x;
				returningTrashCan = RETURNINGTRASHCAN.FOURTH;
				switch (trashCanSelected){
				case FIRST: {
					returningTrashCan4Target = trashCan1Layer.x; 
				}; break;
				case SECOND: {
					returningTrashCan4Target = trashCan2Layer.x; 
				}; break;
				case THIRD: {
					returningTrashCan4Target = trashCan3Layer.x; 
				}; break;
				case FOURTH: {
					returningTrashCan4Target = trashCan4Layer.x;
				}; break;
				default: {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}; break;
				}

				if (junkWorldEngines.getBackXPos() == 0){
					trashCan4AbilityPos = 1;
					updateReturningMechanics(4, 2, returningTrashCan4Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 128){
					trashCan4AbilityPos = 2;
					updateReturningMechanics(4, 2, returningTrashCan4Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 256){
					trashCan4AbilityPos = 3;
					updateReturningMechanics(4, 2, returningTrashCan4Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 384){
					trashCan4AbilityPos = 4;
					updateReturningMechanics(4, 2, returningTrashCan4Target, returningX);
				}
				else {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}
			}
			else {
				noTrashCan  = true;
				junkWorldEngines.setGreaterThanReturningXPos(false);
				junkWorldEngines.setLessThanReturningXPos(false);
			}
		}
		else if (currentXPos < fourthDivCol &&
				currentXPos >= thirdDivCol) {
			if (trashCan1Layer.x == 256 &&
					!trashCan1Used){
				noTrashCan  = false;
				trashCan1Used = true;
				returningX = trashCan1Layer.x;
				returningTrashCan = RETURNINGTRASHCAN.FIRST;
				switch (trashCanSelected){
				case FIRST: {
					returningTrashCan1Target = trashCan1Layer.x; 
				}; break;
				case SECOND: {
					returningTrashCan1Target = trashCan2Layer.x; 
				}; break;
				case THIRD: {
					returningTrashCan1Target = trashCan3Layer.x; 
				}; break;
				case FOURTH: {
					returningTrashCan1Target = trashCan4Layer.x;
				}; break;
				default: {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}; break;
				}

				if (junkWorldEngines.getBackXPos() == 0){
					trashCan1AbilityPos = 1;
					updateReturningMechanics(1, 3, returningTrashCan1Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 128){
					trashCan1AbilityPos = 2;
					updateReturningMechanics(1, 3, returningTrashCan1Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 256){
					trashCan1AbilityPos = 3;
					updateReturningMechanics(1, 3, returningTrashCan1Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 384){
					trashCan1AbilityPos = 4;
					updateReturningMechanics(1, 3, returningTrashCan1Target, returningX);
				}
				else {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}
			}
			else if (trashCan2Layer.x == 256 &&
					!trashCan2Used){
				noTrashCan  = false;
				trashCan2Used = true;
				returningX = trashCan2Layer.x;
				returningTrashCan = RETURNINGTRASHCAN.SECOND;
				switch (trashCanSelected){
				case FIRST: {
					returningTrashCan2Target = trashCan1Layer.x; 
				}; break;
				case SECOND: {
					returningTrashCan2Target = trashCan2Layer.x; 
				}; break;
				case THIRD: {
					returningTrashCan2Target = trashCan3Layer.x; 
				}; break;
				case FOURTH: {
					returningTrashCan2Target = trashCan4Layer.x;
				}; break;
				default: {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}; break;
				}

				if (junkWorldEngines.getBackXPos() == 0){
					trashCan2AbilityPos = 1;
					updateReturningMechanics(2, 3, returningTrashCan2Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 128){
					trashCan2AbilityPos = 2;
					updateReturningMechanics(2, 3, returningTrashCan2Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 256){
					trashCan2AbilityPos = 3;
					updateReturningMechanics(2, 3, returningTrashCan2Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 384){
					trashCan2AbilityPos = 4;
					updateReturningMechanics(2, 3, returningTrashCan2Target, returningX);
				}
				else {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}
			}
			else if (trashCan3Layer.x == 256 &&
					!trashCan3Used){
				noTrashCan  = false;
				trashCan3Used = true;
				returningX = trashCan3Layer.x;
				returningTrashCan = RETURNINGTRASHCAN.THIRD;
				switch (trashCanSelected){
				case FIRST: {
					returningTrashCan3Target = trashCan1Layer.x; 
				}; break;
				case SECOND: {
					returningTrashCan3Target = trashCan2Layer.x; 
				}; break;
				case THIRD: {
					returningTrashCan3Target = trashCan3Layer.x; 
				}; break;
				case FOURTH: {
					returningTrashCan3Target = trashCan4Layer.x;
				}; break;
				default: {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}; break;
				}

				if (junkWorldEngines.getBackXPos() == 0){
					trashCan3AbilityPos = 1;
					updateReturningMechanics(3, 3, returningTrashCan3Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 128){
					trashCan3AbilityPos = 2;
					updateReturningMechanics(3, 3, returningTrashCan3Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 256){
					trashCan3AbilityPos = 3;
					updateReturningMechanics(3, 3, returningTrashCan3Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 384){
					trashCan3AbilityPos = 4;
					updateReturningMechanics(3, 3, returningTrashCan3Target, returningX);
				}
				else {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}
			}
			else if (trashCan4Layer.x == 256 &&
					!trashCan4Used){
				noTrashCan  = false;
				trashCan4Used = true;
				returningX = trashCan4Layer.x;
				returningTrashCan = RETURNINGTRASHCAN.FOURTH;
				switch (trashCanSelected){
				case FIRST: {
					returningTrashCan4Target = trashCan1Layer.x; 
				}; break;
				case SECOND: {
					returningTrashCan4Target = trashCan2Layer.x; 
				}; break;
				case THIRD: {
					returningTrashCan4Target = trashCan3Layer.x;
				}; break;
				case FOURTH: {
					returningTrashCan4Target = trashCan4Layer.x;
				}; break;
				default: {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}; break;
				}

				if (junkWorldEngines.getBackXPos() == 0){
					trashCan4AbilityPos = 1;
					updateReturningMechanics(4, 3, returningTrashCan4Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 128){
					trashCan4AbilityPos = 2;
					updateReturningMechanics(4, 3, returningTrashCan4Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 256){
					trashCan4AbilityPos = 3;
					updateReturningMechanics(4, 3, returningTrashCan4Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 384){
					trashCan4AbilityPos = 4;
					updateReturningMechanics(4, 3, returningTrashCan4Target, returningX);
				}
				else {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}
			}
			else {
				noTrashCan  = true;
				junkWorldEngines.setGreaterThanReturningXPos(false);
				junkWorldEngines.setLessThanReturningXPos(false);
			}
		}
		else if (currentXPos < fifthDivCol &&
				currentXPos >= fourthDivCol) {
			if (trashCan1Layer.x == 384 &&
					!trashCan1Used){
				noTrashCan  = false;
				trashCan1Used = true;
				returningX = trashCan1Layer.x;
				returningTrashCan = RETURNINGTRASHCAN.FIRST;
				switch (trashCanSelected){
				case FIRST: {
					returningTrashCan1Target = trashCan1Layer.x; 
				}; break;
				case SECOND: {
					returningTrashCan1Target = trashCan2Layer.x; 
				}; break;
				case THIRD: {
					returningTrashCan1Target = trashCan3Layer.x; 
				}; break;
				case FOURTH: {
					returningTrashCan1Target = trashCan4Layer.x;
				}; break;
				default: {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}; break;
				}

				if (junkWorldEngines.getBackXPos() == 0){
					trashCan1AbilityPos = 1;
					updateReturningMechanics(1, 4, returningTrashCan1Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 128){
					trashCan1AbilityPos = 2;
					updateReturningMechanics(1, 4, returningTrashCan1Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 256){
					trashCan1AbilityPos = 3;
					updateReturningMechanics(1, 4, returningTrashCan1Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 384){
					trashCan1AbilityPos = 4;
					updateReturningMechanics(1, 4, returningTrashCan1Target, returningX);
				}
				else {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}
			}
			else if (trashCan2Layer.x == 384 &&
					!trashCan2Used){
				noTrashCan  = false;
				trashCan2Used = true;
				returningX = trashCan2Layer.x;
				returningTrashCan = RETURNINGTRASHCAN.SECOND;
				switch (trashCanSelected){
				case FIRST: {
					returningTrashCan2Target = trashCan1Layer.x; 
				}; break;
				case SECOND: {
					returningTrashCan2Target = trashCan2Layer.x; 
				}; break;
				case THIRD: {
					returningTrashCan2Target = trashCan3Layer.x; 
				}; break;
				case FOURTH: {
					returningTrashCan2Target = trashCan4Layer.x;
				}; break;
				default: {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}; break;
				}

				if (junkWorldEngines.getBackXPos() == 0){
					trashCan2AbilityPos = 1;
					updateReturningMechanics(2, 4, returningTrashCan2Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 128){
					trashCan2AbilityPos = 2;
					updateReturningMechanics(2, 4, returningTrashCan2Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 256){
					trashCan2AbilityPos = 3;
					updateReturningMechanics(2, 4, returningTrashCan2Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 384){
					trashCan2AbilityPos = 4;
					updateReturningMechanics(2, 4, returningTrashCan2Target, returningX);
				}
				else {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}
			}
			else if (trashCan3Layer.x == 384 &&
					!trashCan3Used){
				noTrashCan  = false;
				trashCan3Used = true;
				returningX = trashCan3Layer.x;
				returningTrashCan = RETURNINGTRASHCAN.THIRD;
				switch (trashCanSelected){
				case FIRST: {
					returningTrashCan3Target = trashCan1Layer.x; 
				}; break;
				case SECOND: {
					returningTrashCan3Target = trashCan2Layer.x; 
				}; break;
				case THIRD: {
					returningTrashCan3Target = trashCan3Layer.x; 
				}; break;
				case FOURTH: {
					returningTrashCan3Target = trashCan4Layer.x;
				}; break;
				default: {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}; break;
				}

				if (junkWorldEngines.getBackXPos() == 0){
					trashCan3AbilityPos = 1;
					updateReturningMechanics(3, 4, returningTrashCan3Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 128){
					trashCan3AbilityPos = 2;
					updateReturningMechanics(3, 4, returningTrashCan3Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 256){
					trashCan3AbilityPos = 3;
					updateReturningMechanics(3, 4, returningTrashCan3Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 384){
					trashCan3AbilityPos = 4;
					updateReturningMechanics(3, 4, returningTrashCan3Target, returningX);
				}
				else {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}
			}
			else if (trashCan4Layer.x == 384 &&
					!trashCan4Used){
				noTrashCan  = false;
				trashCan4Used = true;
				returningX = trashCan4Layer.x;
				returningTrashCan = RETURNINGTRASHCAN.FOURTH;
				switch (trashCanSelected){
				case FIRST: {
					returningTrashCan4Target = trashCan1Layer.x; 
				}; break;
				case SECOND: {
					returningTrashCan4Target = trashCan2Layer.x; 
				}; break;
				case THIRD: {
					returningTrashCan4Target = trashCan3Layer.x; 
				}; break;
				case FOURTH: {
					returningTrashCan4Target = trashCan4Layer.x;
				}; break;
				default: {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}; break;
				}

				if (junkWorldEngines.getBackXPos() == 0){
					trashCan4AbilityPos = 1;
					updateReturningMechanics(4, 4, returningTrashCan4Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 128){
					trashCan4AbilityPos = 2;
					updateReturningMechanics(4, 4, returningTrashCan4Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 256){
					trashCan4AbilityPos = 3;
					updateReturningMechanics(4, 4, returningTrashCan4Target, returningX);
				}
				else if (junkWorldEngines.getBackXPos() == 384){
					trashCan4AbilityPos = 4;
					updateReturningMechanics(4, 4, returningTrashCan4Target, returningX);
				}
				else {
					noTrashCan  = true;
					junkWorldEngines.setGreaterThanReturningXPos(false);
					junkWorldEngines.setLessThanReturningXPos(false);
				}
			}
			else {
				noTrashCan  = true;
				junkWorldEngines.setGreaterThanReturningXPos(false);
				junkWorldEngines.setLessThanReturningXPos(false);
			}
		}
		else {
			noTrashCan = true;
			junkWorldEngines.setGreaterThanReturningXPos(false);
			junkWorldEngines.setLessThanReturningXPos(false);
		}
	}

	private void moveTrashCan(int yPos){
		currentYPos = yPos;
		float selectedX = 0;
		switch (trashCanSelected){
		case FIRST: selectedX = trashCan1Layer.x; break;
		case SECOND: selectedX = trashCan2Layer.x; break;
		case THIRD: selectedX = trashCan3Layer.x; break;
		case FOURTH: selectedX = trashCan4Layer.x; break;
		default: break;
		}
		if (currentYPos < secondDivRow &&
				currentYPos >= firstDivRow){
			switch (trashCanSelected){
			case FIRST: {
				if ((trashCan1Properties.getTrashCan() == 6 && delaySwiftCan1Energy != 0)){
					selectedX = junkWorldEngines.getXPos();
				}
			}; break;
			case SECOND: {
				if ((trashCan2Properties.getTrashCan() == 6 && delaySwiftCan2Energy != 0)){
					selectedX = junkWorldEngines.getXPos();
				}
			}; break;
			case THIRD: {
				if ((trashCan3Properties.getTrashCan() == 6 && delaySwiftCan3Energy != 0)){
					selectedX = junkWorldEngines.getXPos();
				}
			}; break;
			case FOURTH: {
				if ((trashCan4Properties.getTrashCan() == 6 && delaySwiftCan4Energy != 0)){
					selectedX = junkWorldEngines.getXPos();
				}
			}; break;
			default: break;
			}

			switch (returningTrashCan){
			case FIRST: {
				if ((trashCan1Properties.getTrashCan() == 6 && delaySwiftCan1Energy != 0)){
					selectedX = junkWorldEngines.getXPos();
				}
			}; break;
			case SECOND: {
				if ((trashCan2Properties.getTrashCan() == 6 && delaySwiftCan2Energy != 0)){
					selectedX = junkWorldEngines.getXPos();
				}
			}; break;
			case THIRD: {
				if ((trashCan3Properties.getTrashCan() == 6 && delaySwiftCan3Energy != 0)){
					selectedX = junkWorldEngines.getXPos();
				}
			}; break;
			case FOURTH: {
				if ((trashCan4Properties.getTrashCan() == 6 && delaySwiftCan4Energy != 0)){
					selectedX = junkWorldEngines.getXPos();
				}
			}; break;
			default: break;
			}
			if (selectedX != junkWorldEngines.getXPos()){
				disallow = false;
				updateEngines2();
				updateMechanics2();	
				setMovingTrashCans();
			}
			else {
				if (!(((touchPos.x >= selection1Layer.x) &&
						(touchPos.x < selection1Layer.x + selection1Layer.width) &&
						(touchPos.y >= selection1Layer.y) &&
						(touchPos.y < selection1Layer.y + selection1Layer.height)) &&
						((touchPos.x >= selection2Layer.x) &&
								(touchPos.x < selection2Layer.x + selection2Layer.width) &&
								(touchPos.y >= selection2Layer.y) &&
								(touchPos.y < selection2Layer.y + selection2Layer.height)) &&
								((touchPos.x >= selection3Layer.x) &&
										(touchPos.x < selection3Layer.x + selection3Layer.width) &&
										(touchPos.y >= selection3Layer.y) &&
										(touchPos.y < selection3Layer.y + selection3Layer.height)) &&
										((touchPos.x >= selection4Layer.x) &&
												(touchPos.x < selection4Layer.x + selection4Layer.width) &&
												(touchPos.y >= selection4Layer.y) &&
												(touchPos.y < selection4Layer.y + selection4Layer.height)))){
					disallow = false;
					switch (trashCanSelected){
					case FIRST: reUpdateStates(1); break;
					case SECOND: reUpdateStates(2); break;
					case THIRD: reUpdateStates(3); break;
					case FOURTH: reUpdateStates(4); break;
					default: break;
					}
					switch (returningTrashCan){
					case FIRST: reUpdateStates2(1, 1); break;
					case SECOND: reUpdateStates2(2, 2); break;
					case THIRD: reUpdateStates2(3, 3); break;
					case FOURTH: reUpdateStates2(4, 4); break;
					default: break;
					}
					delayReUpdateStates();
				}
				else {
					disallow = false;
				}
			}
		}
		else {
			if (!(((touchPos.x >= selection1Layer.x) &&
					(touchPos.x < selection1Layer.x + selection1Layer.width) &&
					(touchPos.y >= selection1Layer.y) &&
					(touchPos.y < selection1Layer.y + selection1Layer.height)) &&
					((touchPos.x >= selection2Layer.x) &&
							(touchPos.x < selection2Layer.x + selection2Layer.width) &&
							(touchPos.y >= selection2Layer.y) &&
							(touchPos.y < selection2Layer.y + selection2Layer.height)) &&
							((touchPos.x >= selection3Layer.x) &&
									(touchPos.x < selection3Layer.x + selection3Layer.width) &&
									(touchPos.y >= selection3Layer.y) &&
									(touchPos.y < selection3Layer.y + selection3Layer.height)) &&
									((touchPos.x >= selection4Layer.x) &&
											(touchPos.x < selection4Layer.x + selection4Layer.width) &&
											(touchPos.y >= selection4Layer.y) &&
											(touchPos.y < selection4Layer.y + selection4Layer.height)))){
				disallow = false;
				switch (trashCanSelected){
				case FIRST: reUpdateStates(1); break;
				case SECOND: reUpdateStates(2); break;
				case THIRD: reUpdateStates(3); break;
				case FOURTH: reUpdateStates(4); break;
				default: break;
				}
				switch (returningTrashCan){
				case FIRST: reUpdateStates2(1, 1); break;
				case SECOND: reUpdateStates2(2, 2); break;
				case THIRD: reUpdateStates2(3, 3); break;
				case FOURTH: reUpdateStates2(4, 4); break;
				default: break;
				}
				delayReUpdateStates();
			}
			else {
				disallow = false;
			}
		}
	}
	//	TODO

	public void updateEngines2() {
		if (!noTrashCan){
			if (junkWorldEngines.isGreaterThanXPos() &&
					!junkWorldEngines.isLessThanXPos()){
				switch (trashCanSelected){
				case FIRST: {
					if (burstModeButton != BurstModeButton.CLICKED &&
							!augmentCan1){
						if (!(trashCan1Properties.getTrashCan() == 6 && currentAbilityState1 == CURRENTABILITYSTATE1.ON)){
							if (delaySpeedRush.get(0) == 0){
								trashCan1Speed = -Math.abs(speedOfCan1);
							}
							else {
								if (swiftCanPerfectDump.get(0)){
									trashCan1Speed = -Math.abs(speedOfCan1) * 1.15;
								}
								else {
									trashCan1Speed = -Math.abs(speedOfCan1) * 1.10;
								}
							}
						}
						else {
							trashCan1Speed = (-Math.abs(speedOfCan1)) * 2;
						}
					}
					else {
						trashCan1Speed = -512;
					}
				}; break;
				case SECOND: {
					if (burstModeButton != BurstModeButton.CLICKED &&
							!augmentCan2){
						if (!(trashCan2Properties.getTrashCan() == 6 && currentAbilityState2 == CURRENTABILITYSTATE2.ON)){
							if (delaySpeedRush.get(1) == 0){
								trashCan2Speed = -Math.abs(speedOfCan2);
							}
							else {
								if (swiftCanPerfectDump.get(1)){
									trashCan2Speed = -Math.abs(speedOfCan2) * 1.15;
								}
								else {
									trashCan2Speed = -Math.abs(speedOfCan2) * 1.10;
								}
							}
						}
						else {
							trashCan2Speed = (-Math.abs(speedOfCan2)) * 2;
						}
					}
					else {
						trashCan2Speed = -512;
					}
				}; break;
				case THIRD: {
					if (burstModeButton != BurstModeButton.CLICKED &&
							!augmentCan3){
						if (!(trashCan3Properties.getTrashCan() == 6 && currentAbilityState3 == CURRENTABILITYSTATE3.ON)){
							if (delaySpeedRush.get(2) == 0){
								trashCan3Speed = -Math.abs(speedOfCan3);
							}
							else {
								if (swiftCanPerfectDump.get(2)){
									trashCan3Speed = -Math.abs(speedOfCan3) * 1.15;
								}
								else {
									trashCan3Speed = -Math.abs(speedOfCan3) * 1.10;
								}
							}
						}
						else {
							trashCan3Speed = (-Math.abs(speedOfCan3)) * 2;
						}
					}
					else {
						trashCan3Speed = -512;
					}
				}; break;
				case FOURTH: {
					if (burstModeButton != BurstModeButton.CLICKED &&
							!augmentCan4){
						if (!(trashCan4Properties.getTrashCan() == 6 && currentAbilityState4 == CURRENTABILITYSTATE4.ON)){
							if (delaySpeedRush.get(3) == 0){
								trashCan4Speed = -Math.abs(speedOfCan4);
							}
							else {
								if (swiftCanPerfectDump.get(3)){
									trashCan4Speed = -Math.abs(speedOfCan4) * 1.15;
								}
								else {
									trashCan4Speed = -Math.abs(speedOfCan4) * 1.10;
								}
							}
						}
						else {
							trashCan4Speed = (-Math.abs(speedOfCan4)) * 2;
						}
					}
					else {
						trashCan4Speed = -512;
					}
				}; break;
				default: break;
				}
				junkWorldEngines.setGreaterThanXPos(false);
			}
			else if (!junkWorldEngines.isGreaterThanXPos() &&
					junkWorldEngines.isLessThanXPos()) {
				switch (trashCanSelected){
				case FIRST: {
					if (burstModeButton != BurstModeButton.CLICKED &&
							!augmentCan1){
						if (!(trashCan1Properties.getTrashCan() == 6 && currentAbilityState1 == CURRENTABILITYSTATE1.ON)){
							if (delaySpeedRush.get(0) == 0){
								trashCan1Speed = Math.abs(speedOfCan1);
							}
							else {
								if (swiftCanPerfectDump.get(0)){
									trashCan1Speed = Math.abs(speedOfCan1) * 1.15;
								}
								else {
									trashCan1Speed = Math.abs(speedOfCan1) * 1.10;
								}
							}
						}
						else {
							trashCan1Speed = (Math.abs(speedOfCan1)) * 2;
						}
					}
					else {
						trashCan1Speed = 512;
					}
				}; break;
				case SECOND: {
					if (burstModeButton != BurstModeButton.CLICKED &&
							!augmentCan2){
						if (!(trashCan2Properties.getTrashCan() == 6 && currentAbilityState2 == CURRENTABILITYSTATE2.ON)){
							if (delaySpeedRush.get(1) == 0){
								trashCan2Speed = Math.abs(speedOfCan2);
							}
							else {
								if (swiftCanPerfectDump.get(1)){
									trashCan2Speed = Math.abs(speedOfCan2) * 1.15;
								}
								else {
									trashCan2Speed = Math.abs(speedOfCan2) * 1.10;
								}
							}
						}
						else {
							trashCan2Speed = (Math.abs(speedOfCan2)) * 2;
						}
					}
					else {
						trashCan2Speed = 512;
					}
				}; break;
				case THIRD: {
					if (burstModeButton != BurstModeButton.CLICKED &&
							!augmentCan3){
						if (!(trashCan3Properties.getTrashCan() == 6 && currentAbilityState3 == CURRENTABILITYSTATE3.ON)){
							if (delaySpeedRush.get(2) == 0){
								trashCan3Speed = Math.abs(speedOfCan3);
							}
							else {
								if (swiftCanPerfectDump.get(2)){
									trashCan3Speed = Math.abs(speedOfCan3) * 1.15;
								}
								else {
									trashCan3Speed = Math.abs(speedOfCan3) * 1.10;
								}
							}
						}
						else {
							trashCan3Speed = (Math.abs(speedOfCan3)) * 2;
						}
					}
					else {
						trashCan3Speed = 512;
					}
				}; break;
				case FOURTH: {
					if (burstModeButton != BurstModeButton.CLICKED &&
							!augmentCan4){
						if (!(trashCan4Properties.getTrashCan() == 6 && currentAbilityState4 == CURRENTABILITYSTATE4.ON)){
							if (delaySpeedRush.get(3) == 0){
								trashCan4Speed = Math.abs(speedOfCan4);
							}
							else {
								if (swiftCanPerfectDump.get(3)){
									trashCan4Speed = Math.abs(speedOfCan4) * 1.15;
								}
								else {
									trashCan4Speed = Math.abs(speedOfCan4) * 1.10;
								}
							}
						}
						else {
							trashCan4Speed = (Math.abs(speedOfCan4)) * 2;
						}
					}
					else {
						trashCan4Speed = 512;
					}
				}; break;
				default: break;
				}
				junkWorldEngines.setLessThanXPos(false);
			}
			else {
				switch (trashCanSelected){
				case FIRST: {
					trashCan1Speed = 0;
				}; break;
				case SECOND: {
					trashCan2Speed = 0;
				}; break;
				case THIRD: {
					trashCan3Speed = 0;
				}; break;
				case FOURTH: {
					trashCan4Speed = 0;
				}; break;
				default: break;
				}
				junkWorldEngines.setGreaterThanXPos(false);
				junkWorldEngines.setLessThanXPos(false);
				noTrashCan = true;
			}
		}
	}

	public void updateMechanics2() {
		if (!noTrashCan){
			if (junkWorldEngines.isGreaterThanReturningXPos() == true && junkWorldEngines.isLessThanReturningXPos() == false){
				switch (returningTrashCan){
				case FIRST: {
					if (isTrashCan1){
						if (burstModeButton != BurstModeButton.CLICKED &&
								!augmentCan1){
							if (delaySpeedRush.get(0) == 0){
								returningTrashCan1Speed = Math.abs(speedOfCan1);
							}
							else {
								if (swiftCanPerfectDump.get(0)){
									returningTrashCan1Speed = Math.abs(speedOfCan1) * 1.15;
								}
								else {
									returningTrashCan1Speed = Math.abs(speedOfCan1) * 1.10;
								}
							}
						}
						else {
							returningTrashCan1Speed = 512;
						}
					}
					else {
						switch (trashCanSelected){
						case FIRST: returningTrashCan1Speed = 512; break;
						case SECOND: returningTrashCan2Speed = 512; break;
						case THIRD: returningTrashCan3Speed = 512; break;
						case FOURTH: returningTrashCan4Speed = 512; break;
						default: break;
						}
					}
				}; break;
				case SECOND: {
					if (isTrashCan2){
						if (burstModeButton != BurstModeButton.CLICKED &&
								!augmentCan2){
							if (delaySpeedRush.get(1) == 0){
								returningTrashCan2Speed = Math.abs(speedOfCan2);
							}
							else {
								if (swiftCanPerfectDump.get(1)){
									returningTrashCan2Speed = Math.abs(speedOfCan2) * 1.15;
								}
								else {
									returningTrashCan2Speed = Math.abs(speedOfCan2) * 1.10;
								}
							}
						}
						else {
							returningTrashCan2Speed = 512;
						}
					}
					else {
						switch (trashCanSelected){
						case FIRST: returningTrashCan1Speed = 512; break;
						case SECOND: returningTrashCan2Speed = 512; break;
						case THIRD: returningTrashCan3Speed = 512; break;
						case FOURTH: returningTrashCan4Speed = 512; break;
						default: break;
						}
					}
				}; break;
				case THIRD: {
					if (isTrashCan3){
						if (burstModeButton != BurstModeButton.CLICKED &&
								!augmentCan3){
							if (delaySpeedRush.get(2) == 0){
								returningTrashCan3Speed = Math.abs(speedOfCan3);
							}
							else {
								if (swiftCanPerfectDump.get(2)){
									returningTrashCan3Speed = Math.abs(speedOfCan3) * 1.15;
								}
								else {
									returningTrashCan3Speed = Math.abs(speedOfCan3) * 1.10;
								}
							}
						}
						else {
							returningTrashCan3Speed = 512;
						}
					}
					else {
						switch (trashCanSelected){
						case FIRST: returningTrashCan1Speed = 512; break;
						case SECOND: returningTrashCan2Speed = 512; break;
						case THIRD: returningTrashCan3Speed = 512; break;
						case FOURTH: returningTrashCan4Speed = 512; break;
						default: break;
						}
					}
				}; break;
				case FOURTH: {
					if (isTrashCan4){
						if (burstModeButton != BurstModeButton.CLICKED &&
								!augmentCan4){
							if (delaySpeedRush.get(3) == 0){
								returningTrashCan4Speed = Math.abs(speedOfCan4);
							}
							else {
								if (swiftCanPerfectDump.get(3)){
									returningTrashCan4Speed = Math.abs(speedOfCan4) * 1.15;
								}
								else {
									returningTrashCan4Speed = Math.abs(speedOfCan4) * 1.10;
								}
							}
						}
						else {
							returningTrashCan4Speed = 512;
						}
					}
					else {
						switch (trashCanSelected){
						case FIRST: returningTrashCan1Speed = 512; break;
						case SECOND: returningTrashCan2Speed = 512; break;
						case THIRD: returningTrashCan3Speed = 512; break;
						case FOURTH: returningTrashCan4Speed = 512; break;
						default: break;
						}
					}
				}; break;
				default: break;
				}
			}
			else if (junkWorldEngines.isGreaterThanReturningXPos() == false && junkWorldEngines.isLessThanReturningXPos() == true) {
				switch (returningTrashCan){
				case FIRST: {
					if (isTrashCan1){
						if (burstModeButton != BurstModeButton.CLICKED &&
								!augmentCan1){
							if (delaySpeedRush.get(0) == 0){
								returningTrashCan1Speed = -Math.abs(speedOfCan1);
							}
							else {
								if (swiftCanPerfectDump.get(0)){
									returningTrashCan1Speed = -Math.abs(speedOfCan1) * 1.15;
								}
								else {
									returningTrashCan1Speed = -Math.abs(speedOfCan1) * 1.10;
								}
							}
						}
						else {
							returningTrashCan1Speed = -512;
						}
					}
					else {
						switch (trashCanSelected){
						case FIRST: returningTrashCan1Speed = -512; break;
						case SECOND: returningTrashCan2Speed = -512; break;
						case THIRD: returningTrashCan3Speed = -512; break;
						case FOURTH: returningTrashCan4Speed = -512; break;
						default: break;
						}
					}
				}; break;
				case SECOND: {
					if (isTrashCan2){
						if (burstModeButton != BurstModeButton.CLICKED &&
								!augmentCan2){
							if (delaySpeedRush.get(1) == 0){
								returningTrashCan2Speed = -Math.abs(speedOfCan2);
							}
							else {
								if (swiftCanPerfectDump.get(1)){
									returningTrashCan2Speed = -Math.abs(speedOfCan2) * 1.15;
								}
								else {
									returningTrashCan2Speed = -Math.abs(speedOfCan2) * 1.10;
								}
							}
						}
						else {
							returningTrashCan2Speed = -512;
						}
					}
					else {
						switch (trashCanSelected){
						case FIRST: returningTrashCan1Speed = -512; break;
						case SECOND: returningTrashCan2Speed = -512; break;
						case THIRD: returningTrashCan3Speed = -512; break;
						case FOURTH: returningTrashCan4Speed = -512; break;
						default: break;
						}
					}
				}; break;
				case THIRD: {
					if (isTrashCan3){
						if (burstModeButton != BurstModeButton.CLICKED &&
								!augmentCan3){
							if (delaySpeedRush.get(2) == 0){
								returningTrashCan3Speed = -Math.abs(speedOfCan3);
							}
							else {
								if (swiftCanPerfectDump.get(2)){
									returningTrashCan3Speed = -Math.abs(speedOfCan3) * 1.15;
								}
								else {
									returningTrashCan3Speed = -Math.abs(speedOfCan3) * 1.10;
								}
							}
						}
						else {
							returningTrashCan3Speed = -512;
						}
					}
					else {
						switch (trashCanSelected){
						case FIRST: returningTrashCan1Speed = -512; break;
						case SECOND: returningTrashCan2Speed = -512; break;
						case THIRD: returningTrashCan3Speed = -512; break;
						case FOURTH: returningTrashCan4Speed = -512; break;
						default: break;
						}
					}
				}; break;
				case FOURTH: {
					if (isTrashCan4){
						if (burstModeButton != BurstModeButton.CLICKED &&
								!augmentCan4){
							if (delaySpeedRush.get(3) == 0){
								returningTrashCan4Speed = -Math.abs(speedOfCan4);
							}
							else {
								if (swiftCanPerfectDump.get(3)){
									returningTrashCan4Speed = -Math.abs(speedOfCan4) * 1.15;
								}
								else {
									returningTrashCan4Speed = -Math.abs(speedOfCan4) * 1.10;
								}
							}
						}
						else {
							returningTrashCan4Speed = -512;
						}
					}
					else {
						switch (trashCanSelected){
						case FIRST: returningTrashCan1Speed = -512; break;
						case SECOND: returningTrashCan2Speed = -512; break;
						case THIRD: returningTrashCan3Speed = -512; break;
						case FOURTH: returningTrashCan4Speed = -512; break;
						default: break;
						}
					}
				}; break;
				default: break;
				}
			}
			else {
				if (!(((touchPos.x >= selection1Layer.x) &&
						(touchPos.x < selection1Layer.x + selection1Layer.width) &&
						(touchPos.y >= selection1Layer.y) &&
						(touchPos.y < selection1Layer.y + selection1Layer.height)) &&
						((touchPos.x >= selection2Layer.x) &&
								(touchPos.x < selection2Layer.x + selection2Layer.width) &&
								(touchPos.y >= selection2Layer.y) &&
								(touchPos.y < selection2Layer.y + selection2Layer.height)) &&
								((touchPos.x >= selection3Layer.x) &&
										(touchPos.x < selection3Layer.x + selection3Layer.width) &&
										(touchPos.y >= selection3Layer.y) &&
										(touchPos.y < selection3Layer.y + selection3Layer.height)) &&
										((touchPos.x >= selection4Layer.x) &&
												(touchPos.x < selection4Layer.x + selection4Layer.width) &&
												(touchPos.y >= selection4Layer.y) &&
												(touchPos.y < selection4Layer.y + selection4Layer.height)))){
					switch (trashCanSelected){
					case FIRST: reUpdateStates(1); break;
					case SECOND: reUpdateStates(2); break;
					case THIRD: reUpdateStates(3); break;
					case FOURTH: reUpdateStates(4); break;
					default: break;
					}
					switch (returningTrashCan){
					case FIRST: reUpdateStates2(1, 1); break;
					case SECOND: reUpdateStates2(2, 2); break;
					case THIRD: reUpdateStates2(3, 3); break;
					case FOURTH: reUpdateStates2(4, 4); break;
					default: break;
					}
					delayReUpdateStates();
				}
			}
		}
		else {
			if (!(((touchPos.x >= selection1Layer.x) &&
					(touchPos.x < selection1Layer.x + selection1Layer.width) &&
					(touchPos.y >= selection1Layer.y) &&
					(touchPos.y < selection1Layer.y + selection1Layer.height)) &&
					((touchPos.x >= selection2Layer.x) &&
							(touchPos.x < selection2Layer.x + selection2Layer.width) &&
							(touchPos.y >= selection2Layer.y) &&
							(touchPos.y < selection2Layer.y + selection2Layer.height)) &&
							((touchPos.x >= selection3Layer.x) &&
									(touchPos.x < selection3Layer.x + selection3Layer.width) &&
									(touchPos.y >= selection3Layer.y) &&
									(touchPos.y < selection3Layer.y + selection3Layer.height)) &&
									((touchPos.x >= selection4Layer.x) &&
											(touchPos.x < selection4Layer.x + selection4Layer.width) &&
											(touchPos.y >= selection4Layer.y) &&
											(touchPos.y < selection4Layer.y + selection4Layer.height)))){
				switch (trashCanSelected){
				case FIRST: reUpdateStates(1); break;
				case SECOND: reUpdateStates(2); break;
				case THIRD: reUpdateStates(3); break;
				case FOURTH: reUpdateStates(4); break;
				default: break;
				}
				switch (returningTrashCan){
				case FIRST: reUpdateStates2(1, 1); break;
				case SECOND: reUpdateStates2(2, 2); break;
				case THIRD: reUpdateStates2(3, 3); break;
				case FOURTH: reUpdateStates2(4, 4); break;
				default: break;
				}
				delayReUpdateStates();
			}
		}
	}

	private void setMovingTrashCans() {
		if (!noTrashCan){
			switch (trashCanSelected){
			case FIRST: {
				switch (returningTrashCan){
				case FIRST: returnTrashCanOf1 = true; break;
				case SECOND: returnTrashCanOf2 = true; break;
				case THIRD: returnTrashCanOf3 = true; break;
				case FOURTH: returnTrashCanOf4 = true; break;
				default:
					break;
				}
				moveTrashCan1 = true;
			}; break;
			case SECOND: {
				switch (returningTrashCan){
				case FIRST: returnTrashCanOf1 = true; break;
				case SECOND: returnTrashCanOf2 = true; break;
				case THIRD: returnTrashCanOf3 = true; break;
				case FOURTH: returnTrashCanOf4 = true; break;
				default:
					break;
				}
				moveTrashCan2 = true;
			}; break;
			case THIRD: {
				switch (returningTrashCan){
				case FIRST: returnTrashCanOf1 = true; break;
				case SECOND: returnTrashCanOf2 = true; break;
				case THIRD: returnTrashCanOf3 = true; break;
				case FOURTH: returnTrashCanOf4 = true; break;
				default:
					break;
				}
				moveTrashCan3 = true;
			}; break;
			case FOURTH: {
				switch (returningTrashCan){
				case FIRST: returnTrashCanOf1 = true; break;
				case SECOND: returnTrashCanOf2 = true; break;
				case THIRD: returnTrashCanOf3 = true; break;
				case FOURTH: returnTrashCanOf4 = true; break;
				default:
					break;
				}
				moveTrashCan4 = true;
			}; break;
			default: break;
			}

			if (!(((touchPos.x >= selection1Layer.x) &&
					(touchPos.x < selection1Layer.x + selection1Layer.width) &&
					(touchPos.y >= selection1Layer.y) &&
					(touchPos.y < selection1Layer.y + selection1Layer.height)) &&
					((touchPos.x >= selection2Layer.x) &&
							(touchPos.x < selection2Layer.x + selection2Layer.width) &&
							(touchPos.y >= selection2Layer.y) &&
							(touchPos.y < selection2Layer.y + selection2Layer.height)) &&
							((touchPos.x >= selection3Layer.x) &&
									(touchPos.x < selection3Layer.x + selection3Layer.width) &&
									(touchPos.y >= selection3Layer.y) &&
									(touchPos.y < selection3Layer.y + selection3Layer.height)) &&
									((touchPos.x >= selection4Layer.x) &&
											(touchPos.x < selection4Layer.x + selection4Layer.width) &&
											(touchPos.y >= selection4Layer.y) &&
											(touchPos.y < selection4Layer.y + selection4Layer.height)))){
				delayReUpdateStates();
			}
		}
	}


	private void reUpdateStates(int trashCanMoved) {
		if (trashCanMoved == 1){
			trashCan1Speed = 0;
			moveTrashCan1 = false;
			trashCan1Used = false;
		}
		else if (trashCanMoved == 2){
			trashCan2Speed = 0;
			moveTrashCan2 = false;
			trashCan2Used = false;
		}
		else if (trashCanMoved == 3){
			trashCan3Speed = 0;
			moveTrashCan3 = false;
			trashCan3Used = false;
		}
		else if (trashCanMoved == 4){
			trashCan4Speed = 0;
			moveTrashCan4 = false;
			trashCan4Used = false;
		}
	}

	private void reUpdateStates2(int returningTrashCanOf, int returningTrashCan) {
		switch (returningTrashCanOf){
		case 1: {
			trashCan1Speed = 0;
			returnTrashCanOf1 = false;
			trashCan1Used = false;
		}; break;
		case 2: {
			trashCan2Speed = 0;
			returnTrashCanOf2 = false;
			trashCan2Used = false;
		}; break;
		case 3: {
			trashCan3Speed = 0;
			returnTrashCanOf3 = false;
			trashCan3Used = false;
		}; break;
		case 4: {
			trashCan4Speed = 0;
			returnTrashCanOf4 = false;
			trashCan4Used = false;
		}; break;
		default: break;
		}
	}

	private void delayReUpdateStates() {
		delayReUpdateStates = TimeUtils.nanoTime();
	}

	private void checkHUDStates() {

		switch (currentBottomHUDState){
		case ABILITY_SELECTION: {
			abilitySelectionRegion = abilitySelectionOn;
			if (currentTypeColorSelection == colorSelectionRegion){
				typeOrColorSelectionRegion = colorSelectionRegion;
			}
			else {
				typeOrColorSelectionRegion = typeSelectionRegion;
			}
		}; break;
		case COLOR_SELECTION: {
			currentTypeColorSelection = typeSelectionRegion;
			typeOrColorSelectionRegion = typeSelectionRegion;
			abilitySelectionRegion = abilitySelectionOff;
		}; break;
		case TYPE_SELECTION: {
			currentTypeColorSelection = colorSelectionRegion;
			typeOrColorSelectionRegion = colorSelectionRegion;
			abilitySelectionRegion = abilitySelectionOff;
		}; break;
		default: break;
		}

		switch (burstModeButton){
		case UNCLICKABLE: burstRegion = unclickableBurstModeRegion;
		case CLICKABLE: {
			burstRegion = burstModeRegion;
			burst2Region = clickableBurstModeRegion;
		}; break;
		case CLICKED: {
			burstRegion = burstModeRegion;
			burst2Region = clickedBurstModeRegion.get(currentClickedBurstMode);
		}; break;
		case COOLDOWN: {
			burstRegion = burstModeRegion;
			burst2Region = burstModeCDRegion.get(currentCDBurstMode);
		}; break;
		default: break;
		}

		switch (currentBottomHUDState){
		case ABILITY_SELECTION: {
			if (trashCan1AbilityPos != 1 &&
					trashCan2AbilityPos != 1 &&
					trashCan3AbilityPos != 1 &&
					trashCan4AbilityPos != 1){
				selection1Region = blankRegion;
			}
			if (trashCan1AbilityPos != 2 &&
					trashCan2AbilityPos != 2 &&
					trashCan3AbilityPos != 2 &&
					trashCan4AbilityPos != 2){
				selection2Region = blankRegion;
			}
			if (trashCan1AbilityPos != 3 &&
					trashCan2AbilityPos != 3 &&
					trashCan3AbilityPos != 3 &&
					trashCan4AbilityPos != 3){
				selection3Region = blankRegion;
			}
			if (trashCan1AbilityPos != 4 &&
					trashCan2AbilityPos != 4 &&
					trashCan3AbilityPos != 4 &&
					trashCan4AbilityPos != 4){
				selection4Region = blankRegion;
			}

			switch (trashCan1AbilityPos){
			case 1: {
				switch (trashCan1Properties.getTrashCan()){
				case 1: {
					switch (currentAbilityState1){
					case COOLDOWN:
						selection1Region = averageCanAbility;
						break;
					case OFF:
						selection1Region = averageCanAbility;
						break;
					case ON:
						selection1Region = averageCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = averageCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 2: {
					switch (currentAbilityState1){
					case COOLDOWN:
						selection1Region = scorchingCanAbilityCD;
						break;
					case OFF:
						selection1Region = scorchingCanAbility;
						break;
					case ON:
						selection1Region = scorchingCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = scorchingCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 3: {
					switch (currentAbilityState1){
					case COOLDOWN:
						selection1Region = vacuumCanAbilityCD;
						break;
					case OFF:
						selection1Region = vacuumCanAbility;
						break;
					case ON:
						selection1Region = vacuumCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = vacuumCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 4: {
					switch (currentAbilityState1){
					case COOLDOWN:
						selection1Region = trashBlowerAbilityCD;
						break;
					case OFF:
						selection1Region = trashBlowerAbility;
						break;
					case ON:
						selection1Region = trashBlowerAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = trashBlowerAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 5: {
					switch (currentAbilityState1){
					case COOLDOWN: selection1Region = blankRegion;
					break;
					case OFF:
						selection1Region = dullCanAbility;
						break;
					case ON:
						selection1Region = dullCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = dullCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 6: {
					switch (currentAbilityState1){
					case COOLDOWN: selection1Region = blankRegion;
					break;
					case OFF:
						selection1Region = swiftCanAbility;
						break;
					case ON:
						selection1Region = swiftCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = swiftCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				default: selection1Region = blankRegion; break;
				}
			}; break;
			case 2: {
				switch (trashCan1Properties.getTrashCan()){
				case 1: {
					switch (currentAbilityState1){
					case COOLDOWN:
						selection2Region = averageCanAbility;
						break;
					case OFF:
						selection2Region = averageCanAbility;
						break;
					case ON:
						selection2Region = averageCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = averageCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 2: {
					switch (currentAbilityState1){
					case COOLDOWN:
						selection2Region = scorchingCanAbilityCD;
						break;
					case OFF:
						selection2Region = scorchingCanAbility;
						break;
					case ON:
						selection2Region = scorchingCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = scorchingCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 3: {
					switch (currentAbilityState1){
					case COOLDOWN:
						selection2Region = vacuumCanAbilityCD;
						break;
					case OFF:
						selection2Region = vacuumCanAbility;
						break;
					case ON:
						selection2Region = vacuumCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = vacuumCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 4: {
					switch (currentAbilityState1){
					case COOLDOWN:
						selection2Region = trashBlowerAbilityCD;
						break;
					case OFF:
						selection2Region = trashBlowerAbility;
						break;
					case ON:
						selection2Region = trashBlowerAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = trashBlowerAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 5: {
					switch (currentAbilityState1){
					case COOLDOWN: selection2Region = blankRegion;
					break;
					case OFF:
						selection2Region = dullCanAbility;
						break;
					case ON:
						selection2Region = dullCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = dullCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 6: {
					switch (currentAbilityState1){
					case COOLDOWN: selection2Region = blankRegion;
					break;
					case OFF:
						selection2Region = swiftCanAbility;
						break;
					case ON:
						selection2Region = swiftCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = swiftCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				default: selection2Region = blankRegion; break;
				}
			}; break;
			case 3: {
				switch (trashCan1Properties.getTrashCan()){
				case 1: {
					switch (currentAbilityState1){
					case COOLDOWN:
						selection3Region = averageCanAbility;
						break;
					case OFF:
						selection3Region = averageCanAbility;
						break;
					case ON:
						selection3Region = averageCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = averageCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 2: {
					switch (currentAbilityState1){
					case COOLDOWN:
						selection3Region = scorchingCanAbilityCD;
						break;
					case OFF:
						selection3Region = scorchingCanAbility;
						break;
					case ON:
						selection3Region = scorchingCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = scorchingCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 3: {
					switch (currentAbilityState1){
					case COOLDOWN:
						selection3Region = vacuumCanAbilityCD;
						break;
					case OFF:
						selection3Region = vacuumCanAbility;
						break;
					case ON:
						selection3Region = vacuumCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = vacuumCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 4: {
					switch (currentAbilityState1){
					case COOLDOWN:
						selection3Region = trashBlowerAbilityCD;
						break;
					case OFF:
						selection3Region = trashBlowerAbility;
						break;
					case ON:
						selection3Region = trashBlowerAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = trashBlowerAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 5: {
					switch (currentAbilityState1){
					case COOLDOWN: selection3Region = blankRegion;
					break;
					case OFF:
						selection3Region = dullCanAbility;
						break;
					case ON:
						selection3Region = dullCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = dullCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 6: {
					switch (currentAbilityState1){
					case COOLDOWN: selection3Region = blankRegion;
					break;
					case OFF:
						selection3Region = swiftCanAbility;
						break;
					case ON:
						selection3Region = swiftCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = swiftCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				default: selection3Region = blankRegion; break;
				}
			}; break;
			case 4: {
				switch (trashCan1Properties.getTrashCan()){
				case 1: {
					switch (currentAbilityState1){
					case COOLDOWN:
						selection4Region = averageCanAbility;
						break;
					case OFF:
						selection4Region = averageCanAbility;
						break;
					case ON:
						selection4Region = averageCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = averageCanAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion;
					break;
					}
				}; break;
				case 2: {
					switch (currentAbilityState1){
					case COOLDOWN:
						selection4Region = scorchingCanAbilityCD;
						break;
					case OFF:
						selection4Region = scorchingCanAbility;
						break;
					case ON:
						selection4Region = scorchingCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = scorchingCanAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion;
					break;
					}
				}; break;
				case 3: {
					switch (currentAbilityState1){
					case COOLDOWN:
						selection4Region = vacuumCanAbilityCD;
						break;
					case OFF:
						selection4Region = vacuumCanAbility;
						break;
					case ON:
						selection4Region = vacuumCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = vacuumCanAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion;
					break;
					}
				}; break;
				case 4: {
					switch (currentAbilityState1){
					case COOLDOWN:
						selection4Region = trashBlowerAbilityCD;
						break;
					case OFF:
						selection4Region = trashBlowerAbility;
						break;
					case ON:
						selection4Region = trashBlowerAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = trashBlowerAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion;
					break;
					}
				}; break;
				case 5: {
					switch (currentAbilityState1){
					case COOLDOWN: selection4Region = blankRegion;
					break;
					case OFF:
						selection4Region = dullCanAbility;
						break;
					case ON:
						selection4Region = dullCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = dullCanAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion;
					break;
					}
				}; break;
				case 6: {
					switch (currentAbilityState1){
					case COOLDOWN: selection4Region = blankRegion;
					break;
					case OFF:
						selection4Region = swiftCanAbility;
						break;
					case ON:
						selection4Region = swiftCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = swiftCanAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion;
					break;
					}
				}; break;
				default: selection4Region = blankRegion; break;
				}
			}; break;
			default: break;
			}

			switch (trashCan2AbilityPos){
			case 1: {
				switch (trashCan2Properties.getTrashCan()){
				case 1: {
					switch (currentAbilityState2){
					case COOLDOWN:
						selection1Region = averageCanAbility;
						break;
					case OFF:
						selection1Region = averageCanAbility;
						break;
					case ON:
						selection1Region = averageCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = averageCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 2: {
					switch (currentAbilityState2){
					case COOLDOWN:
						selection1Region = scorchingCanAbilityCD;
						break;
					case OFF:
						selection1Region = scorchingCanAbility;
						break;
					case ON:
						selection1Region = scorchingCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = scorchingCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 3: {
					switch (currentAbilityState2){
					case COOLDOWN:
						selection1Region = vacuumCanAbilityCD;
						break;
					case OFF:
						selection1Region = vacuumCanAbility;
						break;
					case ON:
						selection1Region = vacuumCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = vacuumCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 4: {
					switch (currentAbilityState2){
					case COOLDOWN:
						selection1Region = trashBlowerAbilityCD;
						break;
					case OFF:
						selection1Region = trashBlowerAbility;
						break;
					case ON:
						selection1Region = trashBlowerAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = trashBlowerAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 5: {
					switch (currentAbilityState2){
					case COOLDOWN: selection1Region = blankRegion;
					break;
					case OFF:
						selection1Region = dullCanAbility;
						break;
					case ON:
						selection1Region = dullCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = dullCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 6: {
					switch (currentAbilityState2){
					case COOLDOWN: selection1Region = blankRegion;
					break;
					case OFF:
						selection1Region = swiftCanAbility;
						break;
					case ON:
						selection1Region = swiftCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = swiftCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				default: selection1Region = blankRegion; break;
				}
			}; break;
			case 2: {
				switch (trashCan2Properties.getTrashCan()){
				case 1: {
					switch (currentAbilityState2){
					case COOLDOWN:
						selection2Region = averageCanAbility;
						break;
					case OFF:
						selection2Region = averageCanAbility;
						break;
					case ON:
						selection2Region = averageCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = averageCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 2: {
					switch (currentAbilityState2){
					case COOLDOWN:
						selection2Region = scorchingCanAbilityCD;
						break;
					case OFF:
						selection2Region = scorchingCanAbility;
						break;
					case ON:
						selection2Region = scorchingCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = scorchingCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 3: {
					switch (currentAbilityState2){
					case COOLDOWN:
						selection2Region = vacuumCanAbilityCD;
						break;
					case OFF:
						selection2Region = vacuumCanAbility;
						break;
					case ON:
						selection2Region = vacuumCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = vacuumCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 4: {
					switch (currentAbilityState2){
					case COOLDOWN:
						selection2Region = trashBlowerAbilityCD;
						break;
					case OFF:
						selection2Region = trashBlowerAbility;
						break;
					case ON:
						selection2Region = trashBlowerAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = trashBlowerAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 5: {
					switch (currentAbilityState2){
					case COOLDOWN: selection2Region = blankRegion;
					break;
					case OFF:
						selection2Region = dullCanAbility;
						break;
					case ON:
						selection2Region = dullCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = dullCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 6: {
					switch (currentAbilityState2){
					case COOLDOWN: selection2Region = blankRegion;
					break;
					case OFF:
						selection2Region = swiftCanAbility;
						break;
					case ON:
						selection2Region = swiftCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = swiftCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				};
				default: selection2Region = blankRegion;
				break;
				}
			}; break;
			case 3: {
				switch (trashCan2Properties.getTrashCan()){
				case 1: {
					switch (currentAbilityState2){
					case COOLDOWN:
						selection3Region = averageCanAbility;
						break;
					case OFF:
						selection3Region = averageCanAbility;
						break;
					case ON:
						selection3Region = averageCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = averageCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 2: {
					switch (currentAbilityState2){
					case COOLDOWN:
						selection3Region = scorchingCanAbilityCD;
						break;
					case OFF:
						selection3Region = scorchingCanAbility;
						break;
					case ON:
						selection3Region = scorchingCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = scorchingCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 3: {
					switch (currentAbilityState2){
					case COOLDOWN:
						selection3Region = vacuumCanAbilityCD;
						break;
					case OFF:
						selection3Region = vacuumCanAbility;
						break;
					case ON:
						selection3Region = vacuumCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = vacuumCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 4: {
					switch (currentAbilityState2){
					case COOLDOWN:
						selection3Region = trashBlowerAbilityCD;
						break;
					case OFF:
						selection3Region = trashBlowerAbility;
						break;
					case ON:
						selection3Region = trashBlowerAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = trashBlowerAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 5: {
					switch (currentAbilityState2){
					case COOLDOWN: selection3Region = blankRegion;
					break;
					case OFF:
						selection3Region = dullCanAbility;
						break;
					case ON:
						selection3Region = dullCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = dullCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 6: {
					switch (currentAbilityState2){
					case COOLDOWN: selection3Region = blankRegion;
					break;
					case OFF:
						selection3Region = swiftCanAbility;
						break;
					case ON:
						selection3Region = swiftCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = swiftCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				default: selection3Region = blankRegion; break;
				}
			}; break;
			case 4: {
				switch (trashCan2Properties.getTrashCan()){
				case 1: {
					switch (currentAbilityState2){
					case COOLDOWN:
						selection4Region = averageCanAbility;
						break;
					case OFF:
						selection4Region = averageCanAbility;
						break;
					case ON:
						selection4Region = averageCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = averageCanAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion;
					break;
					}
				}; break;
				case 2: {
					switch (currentAbilityState2){
					case COOLDOWN:
						selection4Region = scorchingCanAbilityCD;
						break;
					case OFF:
						selection4Region = scorchingCanAbility;
						break;
					case ON:
						selection4Region = scorchingCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = scorchingCanAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion;
					break;
					}
				}; break;
				case 3: {
					switch (currentAbilityState2){
					case COOLDOWN:
						selection4Region = vacuumCanAbilityCD;
						break;
					case OFF:
						selection4Region = vacuumCanAbility;
						break;
					case ON:
						selection4Region = vacuumCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = vacuumCanAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion;
					break;
					}
				}; break;
				case 4: {
					switch (currentAbilityState2){
					case COOLDOWN:
						selection4Region = trashBlowerAbilityCD;
						break;
					case OFF:
						selection4Region = trashBlowerAbility;
						break;
					case ON:
						selection4Region = trashBlowerAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = trashBlowerAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion;
					break;
					}
				}; break;
				case 5: {
					switch (currentAbilityState2){
					case COOLDOWN: selection4Region = blankRegion;
					break;
					case OFF:
						selection4Region = dullCanAbility;
						break;
					case ON:
						selection4Region = dullCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = dullCanAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion;
					break;
					}
				}; break;
				case 6: {
					switch (currentAbilityState2){
					case COOLDOWN: selection4Region = blankRegion;
					break;
					case OFF:
						selection4Region = swiftCanAbility;
						break;
					case ON:
						selection4Region = swiftCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = swiftCanAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion;
					break;
					}
				}; break;
				default: selection4Region = blankRegion; break;
				}
			}; break;
			default: break;
			}

			switch (trashCan3AbilityPos){
			case 1: {
				switch (trashCan3Properties.getTrashCan()){
				case 1: {
					switch (currentAbilityState3){
					case COOLDOWN:
						selection1Region = averageCanAbility;
						break;
					case OFF:
						selection1Region = averageCanAbility;
						break;
					case ON:
						selection1Region = averageCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = averageCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 2: {
					switch (currentAbilityState3){
					case COOLDOWN:
						selection1Region = scorchingCanAbilityCD;
						break;
					case OFF:
						selection1Region = scorchingCanAbility;
						break;
					case ON:
						selection1Region = scorchingCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = scorchingCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 3: {
					switch (currentAbilityState3){
					case COOLDOWN:
						selection1Region = vacuumCanAbilityCD;
						break;
					case OFF:
						selection1Region = vacuumCanAbility;
						break;
					case ON:
						selection1Region = vacuumCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = vacuumCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 4: {
					switch (currentAbilityState3){
					case COOLDOWN:
						selection1Region = trashBlowerAbilityCD;
						break;
					case OFF:
						selection1Region = trashBlowerAbility;
						break;
					case ON:
						selection1Region = trashBlowerAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = trashBlowerAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				};
				case 5: {
					switch (currentAbilityState3){
					case COOLDOWN: selection1Region = blankRegion;
					break;
					case OFF:
						selection1Region = dullCanAbility;
						break;
					case ON:
						selection1Region = dullCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = dullCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 6: {
					switch (currentAbilityState3){
					case COOLDOWN: selection1Region = blankRegion;
					break;
					case OFF:
						selection1Region = swiftCanAbility;
						break;
					case ON:
						selection1Region = swiftCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = swiftCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				default: selection1Region = blankRegion; break;
				}
			}; break;
			case 2: {
				switch (trashCan3Properties.getTrashCan()){
				case 1: {
					switch (currentAbilityState3){
					case COOLDOWN:
						selection2Region = averageCanAbility;
						break;
					case OFF:
						selection2Region = averageCanAbility;
						break;
					case ON:
						selection2Region = averageCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = averageCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 2: {
					switch (currentAbilityState3){
					case COOLDOWN:
						selection2Region = scorchingCanAbilityCD;
						break;
					case OFF:
						selection2Region = scorchingCanAbility;
						break;
					case ON:
						selection2Region = scorchingCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = scorchingCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 3: {
					switch (currentAbilityState3){
					case COOLDOWN:
						selection2Region = vacuumCanAbilityCD;
						break;
					case OFF:
						selection2Region = vacuumCanAbility;
						break;
					case ON:
						selection2Region = vacuumCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = vacuumCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 4: {
					switch (currentAbilityState3){
					case COOLDOWN:
						selection2Region = trashBlowerAbilityCD;
						break;
					case OFF:
						selection2Region = trashBlowerAbility;
						break;
					case ON:
						selection2Region = trashBlowerAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = trashBlowerAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 5: {
					switch (currentAbilityState3){
					case COOLDOWN: selection2Region = blankRegion;
					break;
					case OFF:
						selection2Region = dullCanAbility;
						break;
					case ON:
						selection2Region = dullCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = dullCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 6: {
					switch (currentAbilityState3){
					case COOLDOWN: selection2Region = blankRegion;
					break;
					case OFF:
						selection2Region = swiftCanAbility;
						break;
					case ON:
						selection2Region = swiftCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = swiftCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				default: selection2Region = blankRegion; break;
				}
			}; break;
			case 3: {
				switch (trashCan3Properties.getTrashCan()){
				case 1: {
					switch (currentAbilityState3){
					case COOLDOWN:
						selection3Region = averageCanAbility;
						break;
					case OFF:
						selection3Region = averageCanAbility;
						break;
					case ON:
						selection3Region = averageCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = averageCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 2: {
					switch (currentAbilityState3){
					case COOLDOWN:
						selection3Region = scorchingCanAbilityCD;
						break;
					case OFF:
						selection3Region = scorchingCanAbility;
						break;
					case ON:
						selection3Region = scorchingCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = scorchingCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 3: {
					switch (currentAbilityState3){
					case COOLDOWN:
						selection3Region = vacuumCanAbilityCD;
						break;
					case OFF:
						selection3Region = vacuumCanAbility;
						break;
					case ON:
						selection3Region = vacuumCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = vacuumCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 4: {
					switch (currentAbilityState3){
					case COOLDOWN:
						selection3Region = trashBlowerAbilityCD;
						break;
					case OFF:
						selection3Region = trashBlowerAbility;
						break;
					case ON:
						selection3Region = trashBlowerAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = trashBlowerAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 5: {
					switch (currentAbilityState3){
					case COOLDOWN: selection3Region = blankRegion;
					break;
					case OFF:
						selection3Region = dullCanAbility;
						break;
					case ON:
						selection3Region = dullCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = dullCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 6: {
					switch (currentAbilityState3){
					case COOLDOWN: selection3Region = blankRegion;
					break;
					case OFF:
						selection3Region = swiftCanAbility;
						break;
					case ON:
						selection3Region = swiftCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = swiftCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				default: selection3Region = blankRegion; break;
				}
			}; break;
			case 4: {
				switch (trashCan3Properties.getTrashCan()){
				case 1: {
					switch (currentAbilityState3){
					case COOLDOWN:
						selection4Region = averageCanAbility;
						break;
					case OFF:
						selection4Region = averageCanAbility;
						break;
					case ON:
						selection4Region = averageCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = averageCanAbilityUnclickable;
						break; 
					default:selection4Region = blankRegion;
					break;
					}
				}; break;
				case 2: {
					switch (currentAbilityState3){
					case COOLDOWN:
						selection4Region = scorchingCanAbilityCD;
						break;
					case OFF:
						selection4Region = scorchingCanAbility;
						break;
					case ON:
						selection4Region = scorchingCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = scorchingCanAbilityUnclickable;
						break; 
					default:selection4Region = blankRegion;
					break;
					}
				}; break;
				case 3: {
					switch (currentAbilityState3){
					case COOLDOWN:
						selection4Region = vacuumCanAbilityCD;
						break;
					case OFF:
						selection4Region = vacuumCanAbility;
						break;
					case ON:
						selection4Region = vacuumCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = vacuumCanAbilityUnclickable;
						break; 
					default:selection4Region = blankRegion;
					break;
					}
				}; break;
				case 4: {
					switch (currentAbilityState3){
					case COOLDOWN:
						selection4Region = trashBlowerAbilityCD;
						break;
					case OFF:
						selection4Region = trashBlowerAbility;
						break;
					case ON:
						selection4Region = trashBlowerAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = trashBlowerAbilityUnclickable;
						break; 
					default:selection4Region = blankRegion;
					break;
					}
				}; break;
				case 5: {
					switch (currentAbilityState3){
					case COOLDOWN:selection4Region = blankRegion;
					break;
					case OFF:
						selection4Region = dullCanAbility;
						break;
					case ON:
						selection4Region = dullCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = dullCanAbilityUnclickable;
						break; 
					default:selection4Region = blankRegion;
					break;
					}
				}; break;
				case 6: {
					switch (currentAbilityState3){
					case COOLDOWN:selection4Region = blankRegion;
					break;
					case OFF:
						selection4Region = swiftCanAbility;
						break;
					case ON:
						selection4Region = swiftCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = swiftCanAbilityUnclickable;
						break; 
					default:selection4Region = blankRegion;
					break;
					}
				}; break;
				default: selection4Region = blankRegion; break;
				}
			}; break;
			default: break;
			}

			switch (trashCan4AbilityPos){
			case 1: {
				switch (trashCan4Properties.getTrashCan()){
				case 1: {
					switch (currentAbilityState4){
					case COOLDOWN:
						selection1Region = averageCanAbility;
						break;
					case OFF:
						selection1Region = averageCanAbility;
						break;
					case ON:
						selection1Region = averageCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = averageCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 2: {
					switch (currentAbilityState4){
					case COOLDOWN:
						selection1Region = scorchingCanAbilityCD;
						break;
					case OFF:
						selection1Region = scorchingCanAbility;
						break;
					case ON:
						selection1Region = scorchingCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = scorchingCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 3: {
					switch (currentAbilityState4){
					case COOLDOWN:
						selection1Region = vacuumCanAbilityCD;
						break;
					case OFF:
						selection1Region = vacuumCanAbility;
						break;
					case ON:
						selection1Region = vacuumCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = vacuumCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 4: {
					switch (currentAbilityState4){
					case COOLDOWN:
						selection1Region = trashBlowerAbilityCD;
						break;
					case OFF:
						selection1Region = trashBlowerAbility;
						break;
					case ON:
						selection1Region = trashBlowerAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = trashBlowerAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 5: {
					switch (currentAbilityState4){
					case COOLDOWN: selection1Region = blankRegion;
					break;
					case OFF:
						selection1Region = dullCanAbility;
						break;
					case ON:
						selection1Region = dullCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = dullCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				case 6: {
					switch (currentAbilityState4){
					case COOLDOWN: selection1Region = blankRegion;
					break;
					case OFF:
						selection1Region = swiftCanAbility;
						break;
					case ON:
						selection1Region = swiftCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection1Region = swiftCanAbilityUnclickable;
						break; 
					default: selection1Region = blankRegion;
					break;
					}
				}; break;
				default: selection1Region = blankRegion;
				}
			}; break;
			case 2: {
				switch (trashCan4Properties.getTrashCan()){
				case 1: {
					switch (currentAbilityState4){
					case COOLDOWN:
						selection2Region = averageCanAbility;
						break;
					case OFF:
						selection2Region = averageCanAbility;
						break;
					case ON:
						selection2Region = averageCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = averageCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 2: {
					switch (currentAbilityState4){
					case COOLDOWN:
						selection2Region = scorchingCanAbilityCD;
						break;
					case OFF:
						selection2Region = scorchingCanAbility;
						break;
					case ON:
						selection2Region = scorchingCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = scorchingCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 3: {
					switch (currentAbilityState4){
					case COOLDOWN:
						selection2Region = vacuumCanAbilityCD;
						break;
					case OFF:
						selection2Region = vacuumCanAbility;
						break;
					case ON:
						selection2Region = vacuumCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = vacuumCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 4: {
					switch (currentAbilityState4){
					case COOLDOWN:
						selection2Region = trashBlowerAbilityCD;
						break;
					case OFF:
						selection2Region = trashBlowerAbility;
						break;
					case ON:
						selection2Region = trashBlowerAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = trashBlowerAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 5: {
					switch (currentAbilityState4){
					case COOLDOWN: selection2Region = blankRegion;
					break;
					case OFF:
						selection2Region = dullCanAbility;
						break;
					case ON:
						selection2Region = dullCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = dullCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				case 6: {
					switch (currentAbilityState4){
					case COOLDOWN: selection2Region = blankRegion;
					break;
					case OFF:
						selection2Region = swiftCanAbility;
						break;
					case ON:
						selection2Region = swiftCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection2Region = swiftCanAbilityUnclickable;
						break; 
					default: selection2Region = blankRegion;
					break;
					}
				}; break;
				default: selection2Region = blankRegion;
				}
			}; break;
			case 3: {
				switch (trashCan4Properties.getTrashCan()){
				case 1: {
					switch (currentAbilityState4){
					case COOLDOWN:
						selection3Region = averageCanAbility;
						break;
					case OFF:
						selection3Region = averageCanAbility;
						break;
					case ON:
						selection3Region = averageCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = averageCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 2: {
					switch (currentAbilityState4){
					case COOLDOWN:
						selection3Region = scorchingCanAbilityCD;
						break;
					case OFF:
						selection3Region = scorchingCanAbility;
						break;
					case ON:
						selection3Region = scorchingCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = scorchingCanAbilityUnclickable;
						break; 
					default:
						break;
					}
				}; break;
				case 3: {
					switch (currentAbilityState4){
					case COOLDOWN:
						selection3Region = vacuumCanAbilityCD;
						break;
					case OFF:
						selection3Region = vacuumCanAbility;
						break;
					case ON:
						selection3Region = vacuumCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = vacuumCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 4: {
					switch (currentAbilityState4){
					case COOLDOWN:
						selection3Region = trashBlowerAbilityCD;
						break;
					case OFF:
						selection3Region = trashBlowerAbility;
						break;
					case ON:
						selection3Region = trashBlowerAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = trashBlowerAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 5: {
					switch (currentAbilityState4){
					case COOLDOWN: selection3Region = blankRegion;
					break;
					case OFF:
						selection3Region = dullCanAbility;
						break;
					case ON:
						selection3Region = dullCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = dullCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				case 6: {
					switch (currentAbilityState4){
					case COOLDOWN: selection3Region = blankRegion;
					break;
					case OFF:
						selection3Region = swiftCanAbility;
						break;
					case ON:
						selection3Region = swiftCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection3Region = swiftCanAbilityUnclickable;
						break; 
					default: selection3Region = blankRegion;
					break;
					}
				}; break;
				default: selection3Region = blankRegion;
				}
			}; break;
			case 4: {
				switch (trashCan4Properties.getTrashCan()){
				case 1: {
					switch (currentAbilityState4){
					case COOLDOWN:
						selection4Region = averageCanAbility;
						break;
					case OFF:
						selection4Region = averageCanAbility;
						break;
					case ON:
						selection4Region = averageCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = averageCanAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion;
					break;
					}
				}; break;
				case 2: {
					switch (currentAbilityState4){
					case COOLDOWN:
						selection4Region = scorchingCanAbilityCD;
						break;
					case OFF:
						selection4Region = scorchingCanAbility;
						break;
					case ON:
						selection4Region = scorchingCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = scorchingCanAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion;
					break;
					}
				}; break;
				case 3: {
					switch (currentAbilityState4){
					case COOLDOWN:
						selection4Region = vacuumCanAbilityCD;
						break;
					case OFF:
						selection4Region = vacuumCanAbility;
						break;
					case ON:
						selection4Region = vacuumCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = vacuumCanAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion;
					break;
					}
				}; break;
				case 4: {
					switch (currentAbilityState4){
					case COOLDOWN:
						selection4Region = trashBlowerAbilityCD;
						break;
					case OFF:
						selection4Region = trashBlowerAbility;
						break;
					case ON:
						selection4Region = trashBlowerAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = trashBlowerAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion;
					break;
					}
				}; break;
				case 5: {
					switch (currentAbilityState4){
					case COOLDOWN: selection4Region = blankRegion;
					break;
					case OFF:
						selection4Region = dullCanAbility;
						break;
					case ON:
						selection4Region = dullCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = dullCanAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion;
					break;
					}
				}; break;
				case 6: {
					switch (currentAbilityState4){
					case COOLDOWN: selection4Region = blankRegion;
					break;
					case OFF:
						selection4Region = swiftCanAbility;
						break;
					case ON:
						selection4Region = swiftCanAbilityClicked;
						break;
					case UNCLICKABLE:
						selection4Region = swiftCanAbilityUnclickable;
						break; 
					default: selection4Region = blankRegion; break;
					}
				}; break;
				default: selection4Region = blankRegion; break;
				}
			}; break;
			default: break;
			}
		}; break;
		case COLOR_SELECTION: {
			switch (gamePalette.getFirstPalette()){
			case 1: {
				if (currentSelectedPalette != CurrentSelectedPalette.FIRST){
					selection1Region = paletteColors.get(0);
				}
				else {
					selection1Region = paletteColors.get(1);
				}

			}; break;
			case 2: {
				if (currentSelectedPalette != CurrentSelectedPalette.FIRST){
					selection1Region = paletteColors.get(2); 
				}
				else {
					selection1Region = paletteColors.get(3);
				}

			}; break;
			case 3: {
				if (currentSelectedPalette != CurrentSelectedPalette.FIRST){
					selection1Region = paletteColors.get(4); 
				}
				else {
					selection1Region = paletteColors.get(5);
				}

			}; break;
			case 4: {
				if (currentSelectedPalette != CurrentSelectedPalette.FIRST){
					selection1Region = paletteColors.get(6); 
				}
				else {
					selection1Region = paletteColors.get(7);
				}

			}; break;
			case 5: {
				if (currentSelectedPalette != CurrentSelectedPalette.FIRST){
					selection1Region = paletteColors.get(8); 
				}
				else {
					selection1Region = paletteColors.get(9);
				}

			}; break;
			case 6: {
				if (currentSelectedPalette != CurrentSelectedPalette.FIRST){
					selection1Region = paletteColors.get(10); 
				}
				else {
					selection1Region = paletteColors.get(11);
				}

			}; break;
			default: selection1Region = blankRegion; break;
			}

			switch (gamePalette.getSecondPalette()){
			case 1: {
				if (currentSelectedPalette != CurrentSelectedPalette.SECOND){
					selection2Region = paletteColors.get(0);
				}
				else {
					selection2Region = paletteColors.get(1);
				}

			}; break;
			case 2: {
				if (currentSelectedPalette != CurrentSelectedPalette.SECOND){
					selection2Region = paletteColors.get(2); 
				}
				else {
					selection2Region = paletteColors.get(3);
				}

			}; break;
			case 3: {
				if (currentSelectedPalette != CurrentSelectedPalette.SECOND){
					selection2Region = paletteColors.get(4); 
				}
				else {
					selection2Region = paletteColors.get(5);
				}

			}; break;
			case 4: {
				if (currentSelectedPalette != CurrentSelectedPalette.SECOND){
					selection2Region = paletteColors.get(6); 
				}
				else {
					selection2Region = paletteColors.get(7);
				}

			}; break;
			case 5: {
				if (currentSelectedPalette != CurrentSelectedPalette.SECOND){
					selection2Region = paletteColors.get(8); 
				}
				else {
					selection2Region = paletteColors.get(9);
				}

			}; break;
			case 6: {
				if (currentSelectedPalette != CurrentSelectedPalette.SECOND){
					selection2Region = paletteColors.get(10); 
				}
				else {
					selection2Region = paletteColors.get(11);
				}

			}; break;
			default: selection2Region = blankRegion; break;
			}

			switch (gamePalette.getThirdPalette()){
			case 1: {
				if (currentSelectedPalette != CurrentSelectedPalette.THIRD){
					selection3Region = paletteColors.get(0);
				}
				else {
					selection3Region = paletteColors.get(1);
				}

			}; break;
			case 2: {
				if (currentSelectedPalette != CurrentSelectedPalette.THIRD){
					selection3Region = paletteColors.get(2); 
				}
				else {
					selection3Region = paletteColors.get(3);
				}
			}; break;
			case 3: {
				if (currentSelectedPalette != CurrentSelectedPalette.THIRD){
					selection3Region = paletteColors.get(4); 
				}
				else {
					selection3Region = paletteColors.get(5);
				}

			}; break;
			case 4: {
				if (currentSelectedPalette != CurrentSelectedPalette.THIRD){
					selection3Region = paletteColors.get(6); 
				}
				else {
					selection3Region = paletteColors.get(7);
				}
			}; break;
			case 5: {
				if (currentSelectedPalette != CurrentSelectedPalette.THIRD){
					selection3Region = paletteColors.get(8); 
				}
				else {
					selection3Region = paletteColors.get(9);
				}

			}; break;
			case 6: {
				if (currentSelectedPalette != CurrentSelectedPalette.THIRD){
					selection3Region = paletteColors.get(10); 
				}
				else {
					selection3Region = paletteColors.get(11);
				}
			}; break;
			default: selection3Region = blankRegion; break;
			}

			switch (gamePalette.getFourthPalette()){
			case 1: {
				if (currentSelectedPalette != CurrentSelectedPalette.FOURTH){
					selection4Region = paletteColors.get(0);
				}
				else {
					selection4Region = paletteColors.get(1);
				}
			}; break;
			case 2: {
				if (currentSelectedPalette != CurrentSelectedPalette.FOURTH){
					selection4Region = paletteColors.get(2); 
				}
				else {
					selection4Region = paletteColors.get(3);
				}

			}; break;
			case 3: {
				if (currentSelectedPalette != CurrentSelectedPalette.FOURTH){
					selection4Region = paletteColors.get(4); 
				}
				else {
					selection4Region = paletteColors.get(5);
				}

			}; break;
			case 4: {
				if (currentSelectedPalette != CurrentSelectedPalette.FOURTH){
					selection4Region = paletteColors.get(6); 
				}
				else {
					selection4Region = paletteColors.get(7);
				}

			}; break;
			case 5: {
				if (currentSelectedPalette != CurrentSelectedPalette.FOURTH){
					selection4Region = paletteColors.get(8); 
				}
				else {
					selection4Region = paletteColors.get(9);
				}

			}; break;
			case 6: {
				if (currentSelectedPalette != CurrentSelectedPalette.FOURTH){
					selection4Region = paletteColors.get(10); 
				}
				else {
					selection4Region = paletteColors.get(11);
				}

			}; break;
			default: selection4Region = blankRegion; break;
			}
		}; break;
		case TYPE_SELECTION: {
			if (currentSelectedType != CurrentSelectedType.BIODEGRADABLE){
				selection1Region = biodegradableRegion;
			}
			else {
				selection1Region = biodegradableClickedRegion;
			}
			if (currentSelectedType != CurrentSelectedType.RECYCLABLE){
				selection2Region = recyclableRegion;
			}
			else {
				selection2Region = recyclableClickedRegion;
			}
			if (currentSelectedType != CurrentSelectedType.NONRECYCLABLE){
				selection3Region = nonRecyclableRegion;
			}
			else {
				selection3Region = nonRecyclableClickedRegion;
			}
			selection4Region = blankRegion;
		}; break;
		default: break;
		}
	}

	private void screenConfigs() {
		deviceWidth = Gdx.graphics.getWidth();
		deviceHeight = Gdx.graphics.getHeight();
		touchPos.set(Gdx.input.getX(), Gdx.input.getY(), 0);
		camera.unproject(touchPos);
		stageCoordinates.set(touchPos.x, touchPos.y);

		trashCan1Input.stageToLocalCoordinates(stageCoordinates);
		trashCan2Input.stageToLocalCoordinates(stageCoordinates);
		trashCan3Input.stageToLocalCoordinates(stageCoordinates);
		trashCan4Input.stageToLocalCoordinates(stageCoordinates);
		burstMode.stageToLocalCoordinates(stageCoordinates);
		toAbilitySelection.stageToLocalCoordinates(stageCoordinates);
		toColorOrTypeSelection.stageToLocalCoordinates(stageCoordinates);
		selection1.stageToLocalCoordinates(stageCoordinates);
		selection2.stageToLocalCoordinates(stageCoordinates);
		selection3.stageToLocalCoordinates(stageCoordinates);
		selection4.stageToLocalCoordinates(stageCoordinates);
		mainMenu.stageToLocalCoordinates(stageCoordinates);
		trashCanUI.screenToStageCoordinates(stageCoordinates);

//		firstDivCol = deviceWidth - ((deviceWidth / 4) * 4);
//		secondDivCol = deviceWidth - ((deviceWidth / 4) * 3);
//		thirdDivCol = deviceWidth - ((deviceWidth / 4) * 2);
//		fourthDivCol = deviceWidth - ((deviceWidth / 4) * 1);
//		fifthDivCol = deviceWidth - ((deviceWidth / 4) * 0);
		firstDivCol = 0;
		secondDivCol = 128;
		thirdDivCol = 256;
		fourthDivCol = 384;
		fifthDivCol = 512;
//		firstDivRow = (int) (deviceHeight / 12 + deviceHeight / 53.33);
//		secondDivRow = (int) (deviceHeight / 12 + deviceHeight / 53.33 + deviceHeight / 6.25);
		firstDivRow = (int) (81.667);
		secondDivRow = (int) (209.6676);
	}


	private void updateTrashCanPics() {
		if (isTrashCan1){

			switch (trashCan1Properties.getTrashCan()){
			case 1: {
				switch (trashCan1Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 1: {
						trashCan1Region = redAverageBCan;
						trashCan1RegionFull = redAverageBCanClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeAverageBCan;
						trashCan1RegionFull = orangeAverageBCanClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowAverageBCan;
						trashCan1RegionFull = yellowAverageBCanClicked;
					}; break;
					case 4: {
						trashCan1Region = greenAverageBCan;
						trashCan1RegionFull = greenAverageBCanClicked;
					}; break;
					case 5: {
						trashCan1Region = blueAverageBCan;
						trashCan1RegionFull = blueAverageBCanClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleAverageBCan;
						trashCan1RegionFull = purpleAverageBCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 1: {
						trashCan1Region = redAverageRCan;
						trashCan1RegionFull = redAverageRCanClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeAverageRCan;
						trashCan1RegionFull = orangeAverageRCanClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowAverageRCan;
						trashCan1RegionFull = yellowAverageRCanClicked;
					}; break;
					case 4: {
						trashCan1Region = greenAverageRCan;
						trashCan1RegionFull = greenAverageRCanClicked;
					}; break;
					case 5: {
						trashCan1Region = blueAverageRCan;
						trashCan1RegionFull = blueAverageRCanClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleAverageRCan;
						trashCan1RegionFull = purpleAverageRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 1: {
						trashCan1Region = redAverageNRCan;
						trashCan1RegionFull = redAverageNRCanClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeAverageNRCan;
						trashCan1RegionFull = orangeAverageNRCanClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowAverageNRCan;
						trashCan1RegionFull = yellowAverageNRCanClicked;
					}; break;
					case 4: {
						trashCan1Region = greenAverageNRCan;
						trashCan1RegionFull = greenAverageNRCanClicked;
					}; break;
					case 5: {
						trashCan1Region = blueAverageNRCan;
						trashCan1RegionFull = blueAverageNRCanClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleAverageNRCan;
						trashCan1RegionFull = purpleAverageNRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 2: {
				switch (trashCan1Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 1: {
						trashCan1Region = redScorchingBCan;
						trashCan1RegionFull = redScorchingBCanClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeScorchingBCan;
						trashCan1RegionFull = orangeScorchingBCanClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowScorchingBCan;
						trashCan1RegionFull = yellowScorchingBCanClicked;
					}; break;
					case 4: {
						trashCan1Region = greenScorchingBCan;
						trashCan1RegionFull = greenScorchingBCanClicked;
					}; break;
					case 5: {
						trashCan1Region = blueScorchingBCan;
						trashCan1RegionFull = blueScorchingBCanClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleScorchingBCan;
						trashCan1RegionFull = purpleScorchingBCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 1: {
						trashCan1Region = redScorchingRCan;
						trashCan1RegionFull = redScorchingRCanClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeScorchingRCan;
						trashCan1RegionFull = orangeScorchingRCanClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowScorchingRCan;
						trashCan1RegionFull = yellowScorchingRCanClicked;
					}; break;
					case 4: {
						trashCan1Region = greenScorchingRCan;
						trashCan1RegionFull = greenScorchingRCanClicked;
					}; break;
					case 5: {
						trashCan1Region = blueScorchingRCan;
						trashCan1RegionFull = blueScorchingRCanClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleScorchingRCan;
						trashCan1RegionFull = purpleScorchingRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 1: {
						trashCan1Region = redScorchingNRCan;
						trashCan1RegionFull = redScorchingNRCanClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeScorchingNRCan;
						trashCan1RegionFull = orangeScorchingNRCanClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowScorchingNRCan;
						trashCan1RegionFull = yellowScorchingNRCanClicked;
					}; break;
					case 4: {
						trashCan1Region = greenScorchingNRCan;
						trashCan1RegionFull = greenScorchingNRCanClicked;
					}; break;
					case 5: {
						trashCan1Region = blueScorchingNRCan;
						trashCan1RegionFull = blueScorchingNRCanClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleScorchingNRCan;
						trashCan1RegionFull = purpleScorchingNRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 3: {
				switch (trashCan1Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 1: {
						trashCan1Region = redVacuumBCan;
						trashCan1RegionFull = redVacuumBCanClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeVacuumBCan;
						trashCan1RegionFull = orangeVacuumBCanClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowVacuumBCan;
						trashCan1RegionFull = yellowVacuumBCanClicked;
					}; break;
					case 4: {
						trashCan1Region = greenVacuumBCan;
						trashCan1RegionFull = greenVacuumBCanClicked;
					}; break;
					case 5: {
						trashCan1Region = blueVacuumBCan;
						trashCan1RegionFull = blueVacuumBCanClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleVacuumBCan;
						trashCan1RegionFull = purpleVacuumBCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 1: {
						trashCan1Region = redVacuumRCan;
						trashCan1RegionFull = redVacuumRCanClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeVacuumRCan;
						trashCan1RegionFull = orangeVacuumRCanClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowVacuumRCan;
						trashCan1RegionFull = yellowVacuumRCanClicked;
					}; break;
					case 4: {
						trashCan1Region = greenVacuumRCan;
						trashCan1RegionFull = greenVacuumRCanClicked;
					}; break;
					case 5: {
						trashCan1Region = blueVacuumRCan;
						trashCan1RegionFull = blueVacuumRCanClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleVacuumRCan;
						trashCan1RegionFull = purpleVacuumRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 1: {
						trashCan1Region = redVacuumNRCan;
						trashCan1RegionFull = redVacuumNRCanClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeVacuumNRCan;
						trashCan1RegionFull = orangeVacuumNRCanClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowVacuumNRCan;
						trashCan1RegionFull = yellowVacuumNRCanClicked;
					}; break;
					case 4: {
						trashCan1Region = greenVacuumNRCan;
						trashCan1RegionFull = greenVacuumNRCanClicked;
					}; break;
					case 5: {
						trashCan1Region = blueVacuumNRCan;
						trashCan1RegionFull = blueVacuumNRCanClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleVacuumNRCan;
						trashCan1RegionFull = purpleVacuumNRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 4: {
				switch (trashCan1Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 1: {
						trashCan1Region = redTrashBBlower;
						trashCan1RegionFull = redTrashBBlowerClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeTrashBBlower;
						trashCan1RegionFull = orangeTrashBBlowerClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowTrashBBlower;
						trashCan1RegionFull = yellowTrashBBlowerClicked;
					}; break;
					case 4: {
						trashCan1Region = greenTrashBBlower;
						trashCan1RegionFull = greenTrashBBlowerClicked;
					}; break;
					case 5: {
						trashCan1Region = blueTrashBBlower;
						trashCan1RegionFull = blueTrashBBlowerClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleTrashBBlower;
						trashCan1RegionFull = purpleTrashBBlowerClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 1: {
						trashCan1Region = redTrashRBlower;
						trashCan1RegionFull = redTrashRBlowerClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeTrashRBlower;
						trashCan1RegionFull = orangeTrashRBlowerClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowTrashRBlower;
						trashCan1RegionFull = yellowTrashRBlowerClicked;
					}; break;
					case 4: {
						trashCan1Region = greenTrashRBlower;
						trashCan1RegionFull = greenTrashRBlowerClicked;
					}; break;
					case 5: {
						trashCan1Region = blueTrashRBlower;
						trashCan1RegionFull = blueTrashRBlowerClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleTrashRBlower;
						trashCan1RegionFull = purpleTrashRBlowerClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 1: {
						trashCan1Region = redTrashNRBlower;
						trashCan1RegionFull = redTrashNRBlowerClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeTrashNRBlower;
						trashCan1RegionFull = orangeTrashNRBlowerClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowTrashNRBlower;
						trashCan1RegionFull = yellowTrashNRBlowerClicked;
					}; break;
					case 4: {
						trashCan1Region = greenTrashNRBlower;
						trashCan1RegionFull = greenTrashNRBlowerClicked;
					}; break;
					case 5: {
						trashCan1Region = blueTrashNRBlower;
						trashCan1RegionFull = blueTrashNRBlowerClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleTrashNRBlower;
						trashCan1RegionFull = purpleTrashNRBlowerClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 5: {
				switch (trashCan1Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 0: {
						trashCan1Region = noneDullBCan;
						trashCan1RegionFull = noneDullBCanClicked;
					}; break;
					case 1: {
						trashCan1Region = redDullBCan;
						trashCan1RegionFull = redDullBCanClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeDullBCan;
						trashCan1RegionFull = orangeDullBCanClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowDullBCan;
						trashCan1RegionFull = yellowDullBCanClicked;
					}; break;
					case 4: {
						trashCan1Region = greenDullBCan;
						trashCan1RegionFull = greenDullBCanClicked;
					}; break;
					case 5: {
						trashCan1Region = blueDullBCan;
						trashCan1RegionFull = blueDullBCanClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleDullBCan;
						trashCan1RegionFull = purpleDullBCanClicked;
					}; break;
					case 7: {
						trashCan1Region = dullCanBAll;
						trashCan1RegionFull = dullCanBAllClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 0: {
						trashCan1Region = noneDullRCan;
						trashCan1RegionFull = noneDullRCanClicked;
					}; break;
					case 1: {
						trashCan1Region = redDullRCan;
						trashCan1RegionFull = redDullRCanClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeDullRCan;
						trashCan1RegionFull = orangeDullRCanClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowDullRCan;
						trashCan1RegionFull = yellowDullRCanClicked;
					}; break;
					case 4: {
						trashCan1Region = greenDullRCan;
						trashCan1RegionFull = greenDullRCanClicked;
					}; break;
					case 5: {
						trashCan1Region = blueDullRCan;
						trashCan1RegionFull = blueDullRCanClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleDullRCan;
						trashCan1RegionFull = purpleDullRCanClicked;
					}; break;
					case 7: {
						trashCan1Region = dullCanRAll;
						trashCan1RegionFull = dullCanRAllClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 0: {
						trashCan1Region = noneDullNRCan;
						trashCan1RegionFull = noneDullNRCanClicked;
					}; break;
					case 1: {
						trashCan1Region = redDullNRCan;
						trashCan1RegionFull = redDullNRCanClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeDullNRCan;
						trashCan1RegionFull = orangeDullNRCanClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowDullNRCan;
						trashCan1RegionFull = yellowDullNRCanClicked;
					}; break;
					case 4: {
						trashCan1Region = greenDullNRCan;
						trashCan1RegionFull = greenDullNRCanClicked;
					}; break;
					case 5: {
						trashCan1Region = blueDullNRCan;
						trashCan1RegionFull = blueDullNRCanClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleDullNRCan;
						trashCan1RegionFull = purpleDullNRCanClicked;
					}; break;
					case 7: {
						trashCan1Region = dullCanNRAll;
						trashCan1RegionFull = dullCanNRAllClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 6: {
				switch (trashCan1Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 1: {
						trashCan1Region = redSwiftBCan;
						trashCan1RegionFull = redSwiftBCanClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeSwiftBCan;
						trashCan1RegionFull = orangeSwiftBCanClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowSwiftBCan;
						trashCan1RegionFull = yellowSwiftBCanClicked;
					}; break;
					case 4: {
						trashCan1Region = greenSwiftBCan;
						trashCan1RegionFull = greenSwiftBCanClicked;
					}; break;
					case 5: {
						trashCan1Region = blueSwiftBCan;
						trashCan1RegionFull = blueSwiftBCanClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleSwiftBCan;
						trashCan1RegionFull = purpleSwiftBCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 1: {
						trashCan1Region = redSwiftRCan;
						trashCan1RegionFull = redSwiftRCanClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeSwiftRCan;
						trashCan1RegionFull = orangeSwiftRCanClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowSwiftRCan;
						trashCan1RegionFull = yellowSwiftRCanClicked;
					}; break;
					case 4: {
						trashCan1Region = greenSwiftRCan;
						trashCan1RegionFull = greenSwiftRCanClicked;
					}; break;
					case 5: {
						trashCan1Region = blueSwiftRCan;
						trashCan1RegionFull = blueSwiftRCanClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleSwiftRCan;
						trashCan1RegionFull = purpleSwiftRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan1Properties.getTrashCanColor()){
					case 1: {
						trashCan1Region = redSwiftNRCan;
						trashCan1RegionFull = redSwiftNRCanClicked;
					}; break;
					case 2: {
						trashCan1Region = orangeSwiftNRCan;
						trashCan1RegionFull = orangeSwiftNRCanClicked;
					}; break;
					case 3: {
						trashCan1Region = yellowSwiftNRCan;
						trashCan1RegionFull = yellowSwiftNRCanClicked;
					}; break;
					case 4: {
						trashCan1Region = greenSwiftNRCan;
						trashCan1RegionFull = greenSwiftNRCanClicked;
					}; break;
					case 5: {
						trashCan1Region = blueSwiftNRCan;
						trashCan1RegionFull = blueSwiftNRCanClicked;
					}; break;
					case 6: {
						trashCan1Region = purpleSwiftNRCan;
						trashCan1RegionFull = purpleSwiftNRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		} else {
			trashCan1Region = blankRegion;
			trashCan1RegionFull = blankRegion;
			unclickableCan1 = true;
		}

		if (isTrashCan2){

			switch (trashCan2Properties.getTrashCan()){
			case 1: {
				switch (trashCan2Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 1: {
						trashCan2Region = redAverageBCan;
						trashCan2RegionFull = redAverageBCanClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeAverageBCan;
						trashCan2RegionFull = orangeAverageBCanClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowAverageBCan;
						trashCan2RegionFull = yellowAverageBCanClicked;
					}; break;
					case 4: {
						trashCan2Region = greenAverageBCan;
						trashCan2RegionFull = greenAverageBCanClicked;
					}; break;
					case 5: {
						trashCan2Region = blueAverageBCan;
						trashCan2RegionFull = blueAverageBCanClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleAverageBCan;
						trashCan2RegionFull = purpleAverageBCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 1: {
						trashCan2Region = redAverageRCan;
						trashCan2RegionFull = redAverageRCanClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeAverageRCan;
						trashCan2RegionFull = orangeAverageRCanClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowAverageRCan;
						trashCan2RegionFull = yellowAverageRCanClicked;
					}; break;
					case 4: {
						trashCan2Region = greenAverageRCan;
						trashCan2RegionFull = greenAverageRCanClicked;
					}; break;
					case 5: {
						trashCan2Region = blueAverageRCan;
						trashCan2RegionFull = blueAverageRCanClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleAverageRCan;
						trashCan2RegionFull = purpleAverageRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 1: {
						trashCan2Region = redAverageNRCan;
						trashCan2RegionFull = redAverageNRCanClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeAverageNRCan;
						trashCan2RegionFull = orangeAverageNRCanClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowAverageNRCan;
						trashCan2RegionFull = yellowAverageNRCanClicked;
					}; break;
					case 4: {
						trashCan2Region = greenAverageNRCan;
						trashCan2RegionFull = greenAverageNRCanClicked;
					}; break;
					case 5: {
						trashCan2Region = blueAverageNRCan;
						trashCan2RegionFull = blueAverageNRCanClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleAverageNRCan;
						trashCan2RegionFull = purpleAverageNRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 2: {
				switch (trashCan2Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 1: {
						trashCan2Region = redScorchingBCan;
						trashCan2RegionFull = redScorchingBCanClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeScorchingBCan;
						trashCan2RegionFull = orangeScorchingBCanClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowScorchingBCan;
						trashCan2RegionFull = yellowScorchingBCanClicked;
					}; break;
					case 4: {
						trashCan2Region = greenScorchingBCan;
						trashCan2RegionFull = greenScorchingBCanClicked;
					}; break;
					case 5: {
						trashCan2Region = blueScorchingBCan;
						trashCan2RegionFull = blueScorchingBCanClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleScorchingBCan;
						trashCan2RegionFull = purpleScorchingBCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 1: {
						trashCan2Region = redScorchingRCan;
						trashCan2RegionFull = redScorchingRCanClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeScorchingRCan;
						trashCan2RegionFull = orangeScorchingRCanClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowScorchingRCan;
						trashCan2RegionFull = yellowScorchingRCanClicked;
					}; break;
					case 4: {
						trashCan2Region = greenScorchingRCan;
						trashCan2RegionFull = greenScorchingRCanClicked;
					}; break;
					case 5: {
						trashCan2Region = blueScorchingRCan;
						trashCan2RegionFull = blueScorchingRCanClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleScorchingRCan;
						trashCan2RegionFull = purpleScorchingRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 1: {
						trashCan2Region = redScorchingNRCan;
						trashCan2RegionFull = redScorchingNRCanClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeScorchingNRCan;
						trashCan2RegionFull = orangeScorchingNRCanClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowScorchingNRCan;
						trashCan2RegionFull = yellowScorchingNRCanClicked;
					}; break;
					case 4: {
						trashCan2Region = greenScorchingNRCan;
						trashCan2RegionFull = greenScorchingNRCanClicked;
					}; break;
					case 5: {
						trashCan2Region = blueScorchingNRCan;
						trashCan2RegionFull = blueScorchingNRCanClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleScorchingNRCan;
						trashCan2RegionFull = purpleScorchingNRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 3: {
				switch (trashCan2Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 1: {
						trashCan2Region = redVacuumBCan;
						trashCan2RegionFull = redVacuumBCanClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeVacuumBCan;
						trashCan2RegionFull = orangeVacuumBCanClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowVacuumBCan;
						trashCan2RegionFull = yellowVacuumBCanClicked;
					}; break;
					case 4: {
						trashCan2Region = greenVacuumBCan;
						trashCan2RegionFull = greenVacuumBCanClicked;
					}; break;
					case 5: {
						trashCan2Region = blueVacuumBCan;
						trashCan2RegionFull = blueVacuumBCanClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleVacuumBCan;
						trashCan2RegionFull = purpleVacuumBCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 1: {
						trashCan2Region = redVacuumRCan;
						trashCan2RegionFull = redVacuumRCanClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeVacuumRCan;
						trashCan2RegionFull = orangeVacuumRCanClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowVacuumRCan;
						trashCan2RegionFull = yellowVacuumRCanClicked;
					}; break;
					case 4: {
						trashCan2Region = greenVacuumRCan;
						trashCan2RegionFull = greenVacuumRCanClicked;
					}; break;
					case 5: {
						trashCan2Region = blueVacuumRCan;
						trashCan2RegionFull = blueVacuumRCanClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleVacuumRCan;
						trashCan2RegionFull = purpleVacuumRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 1: {
						trashCan2Region = redVacuumNRCan;
						trashCan2RegionFull = redVacuumNRCanClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeVacuumNRCan;
						trashCan2RegionFull = orangeVacuumNRCanClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowVacuumNRCan;
						trashCan2RegionFull = yellowVacuumNRCanClicked;
					}; break;
					case 4: {
						trashCan2Region = greenVacuumNRCan;
						trashCan2RegionFull = greenVacuumNRCanClicked;
					}; break;
					case 5: {
						trashCan2Region = blueVacuumNRCan;
						trashCan2RegionFull = blueVacuumNRCanClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleVacuumNRCan;
						trashCan2RegionFull = purpleVacuumNRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 4: {
				switch (trashCan2Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 1: {
						trashCan2Region = redTrashBBlower;
						trashCan2RegionFull = redTrashBBlowerClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeTrashBBlower;
						trashCan2RegionFull = orangeTrashBBlowerClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowTrashBBlower;
						trashCan2RegionFull = yellowTrashBBlowerClicked;
					}; break;
					case 4: {
						trashCan2Region = greenTrashBBlower;
						trashCan2RegionFull = greenTrashBBlowerClicked;
					}; break;
					case 5: {
						trashCan2Region = blueTrashBBlower;
						trashCan2RegionFull = blueTrashBBlowerClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleTrashBBlower;
						trashCan2RegionFull = purpleTrashBBlowerClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 1: {
						trashCan2Region = redTrashRBlower;
						trashCan2RegionFull = redTrashRBlowerClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeTrashRBlower;
						trashCan2RegionFull = orangeTrashRBlowerClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowTrashRBlower;
						trashCan2RegionFull = yellowTrashRBlowerClicked;
					}; break;
					case 4: {
						trashCan2Region = greenTrashRBlower;
						trashCan2RegionFull = greenTrashRBlowerClicked;
					}; break;
					case 5: {
						trashCan2Region = blueTrashRBlower;
						trashCan2RegionFull = blueTrashRBlowerClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleTrashRBlower;
						trashCan2RegionFull = purpleTrashRBlowerClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 1: {
						trashCan2Region = redTrashNRBlower;
						trashCan2RegionFull = redTrashNRBlowerClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeTrashNRBlower;
						trashCan2RegionFull = orangeTrashNRBlowerClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowTrashNRBlower;
						trashCan2RegionFull = yellowTrashNRBlowerClicked;
					}; break;
					case 4: {
						trashCan2Region = greenTrashNRBlower;
						trashCan2RegionFull = greenTrashNRBlowerClicked;
					}; break;
					case 5: {
						trashCan2Region = blueTrashNRBlower;
						trashCan2RegionFull = blueTrashNRBlowerClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleTrashNRBlower;
						trashCan2RegionFull = purpleTrashNRBlowerClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 5: {
				switch (trashCan2Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 0: {
						trashCan2Region = noneDullBCan;
						trashCan2RegionFull = noneDullBCanClicked;
					}; break;
					case 1: {
						trashCan2Region = redDullBCan;
						trashCan2RegionFull = redDullBCanClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeDullBCan;
						trashCan2RegionFull = orangeDullBCanClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowDullBCan;
						trashCan2RegionFull = yellowDullBCanClicked;
					}; break;
					case 4: {
						trashCan2Region = greenDullBCan;
						trashCan2RegionFull = greenDullBCanClicked;
					}; break;
					case 5: {
						trashCan2Region = blueDullBCan;
						trashCan2RegionFull = blueDullBCanClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleDullBCan;
						trashCan2RegionFull = purpleDullBCanClicked;
					}; break;
					case 7: {
						trashCan2Region = dullCanBAll;
						trashCan2RegionFull = dullCanBAllClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 0: {
						trashCan2Region = noneDullRCan;
						trashCan2RegionFull = noneDullRCanClicked;
					}; break;
					case 1: {
						trashCan2Region = redDullRCan;
						trashCan2RegionFull = redDullRCanClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeDullRCan;
						trashCan2RegionFull = orangeDullRCanClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowDullRCan;
						trashCan2RegionFull = yellowDullRCanClicked;
					}; break;
					case 4: {
						trashCan2Region = greenDullRCan;
						trashCan2RegionFull = greenDullRCanClicked;
					}; break;
					case 5: {
						trashCan2Region = blueDullRCan;
						trashCan2RegionFull = blueDullRCanClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleDullRCan;
						trashCan2RegionFull = purpleDullRCanClicked;
					}; break;
					case 7: {
						trashCan2Region = dullCanRAll;
						trashCan2RegionFull = dullCanRAllClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 0: {
						trashCan2Region = noneDullNRCan;
						trashCan2RegionFull = noneDullNRCanClicked;
					}; break;
					case 1: {
						trashCan2Region = redDullNRCan;
						trashCan2RegionFull = redDullNRCanClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeDullNRCan;
						trashCan2RegionFull = orangeDullNRCanClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowDullNRCan;
						trashCan2RegionFull = yellowDullNRCanClicked;
					}; break;
					case 4: {
						trashCan2Region = greenDullNRCan;
						trashCan2RegionFull = greenDullNRCanClicked;
					}; break;
					case 5: {
						trashCan2Region = blueDullNRCan;
						trashCan2RegionFull = blueDullNRCanClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleDullNRCan;
						trashCan2RegionFull = purpleDullNRCanClicked;
					}; break;
					case 7: {
						trashCan2Region = dullCanNRAll;
						trashCan2RegionFull = dullCanNRAllClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 6: {
				switch (trashCan2Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 1: {
						trashCan2Region = redSwiftBCan;
						trashCan2RegionFull = redSwiftBCanClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeSwiftBCan;
						trashCan2RegionFull = orangeSwiftBCanClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowSwiftBCan;
						trashCan2RegionFull = yellowSwiftBCanClicked;
					}; break;
					case 4: {
						trashCan2Region = greenSwiftBCan;
						trashCan2RegionFull = greenSwiftBCanClicked;
					}; break;
					case 5: {
						trashCan2Region = blueSwiftBCan;
						trashCan2RegionFull = blueSwiftBCanClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleSwiftBCan;
						trashCan2RegionFull = purpleSwiftBCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 1: {
						trashCan2Region = redSwiftRCan;
						trashCan2RegionFull = redSwiftRCanClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeSwiftRCan;
						trashCan2RegionFull = orangeSwiftRCanClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowSwiftRCan;
						trashCan2RegionFull = yellowSwiftRCanClicked;
					}; break;
					case 4: {
						trashCan2Region = greenSwiftRCan;
						trashCan2RegionFull = greenSwiftRCanClicked;
					}; break;
					case 5: {
						trashCan2Region = blueSwiftRCan;
						trashCan2RegionFull = blueSwiftRCanClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleSwiftRCan;
						trashCan2RegionFull = purpleSwiftRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan2Properties.getTrashCanColor()){
					case 1: {
						trashCan2Region = redSwiftNRCan;
						trashCan2RegionFull = redSwiftNRCanClicked;
					}; break;
					case 2: {
						trashCan2Region = orangeSwiftNRCan;
						trashCan2RegionFull = orangeSwiftNRCanClicked;
					}; break;
					case 3: {
						trashCan2Region = yellowSwiftNRCan;
						trashCan2RegionFull = yellowSwiftNRCanClicked;
					}; break;
					case 4: {
						trashCan2Region = greenSwiftNRCan;
						trashCan2RegionFull = greenSwiftNRCanClicked;
					}; break;
					case 5: {
						trashCan2Region = blueSwiftNRCan;
						trashCan2RegionFull = blueSwiftNRCanClicked;
					}; break;
					case 6: {
						trashCan2Region = purpleSwiftNRCan;
						trashCan2RegionFull = purpleSwiftNRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		} else {
			trashCan2Region = blankRegion;
			trashCan2RegionFull = blankRegion;
			unclickableCan2 = true;
		}

		if (isTrashCan3){

			switch (trashCan3Properties.getTrashCan()){
			case 1: {
				switch (trashCan3Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 1: {
						trashCan3Region = redAverageBCan;
						trashCan3RegionFull = redAverageBCanClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeAverageBCan;
						trashCan3RegionFull = orangeAverageBCanClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowAverageBCan;
						trashCan3RegionFull = yellowAverageBCanClicked;
					}; break;
					case 4: {
						trashCan3Region = greenAverageBCan;
						trashCan3RegionFull = greenAverageBCanClicked;
					}; break;
					case 5: {
						trashCan3Region = blueAverageBCan;
						trashCan3RegionFull = blueAverageBCanClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleAverageBCan;
						trashCan3RegionFull = purpleAverageBCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 1: {
						trashCan3Region = redAverageRCan;
						trashCan3RegionFull = redAverageRCanClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeAverageRCan;
						trashCan3RegionFull = orangeAverageRCanClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowAverageRCan;
						trashCan3RegionFull = yellowAverageRCanClicked;
					}; break;
					case 4: {
						trashCan3Region = greenAverageRCan;
						trashCan3RegionFull = greenAverageRCanClicked;
					}; break;
					case 5: {
						trashCan3Region = blueAverageRCan;
						trashCan3RegionFull = blueAverageRCanClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleAverageRCan;
						trashCan3RegionFull = purpleAverageRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 1: {
						trashCan3Region = redAverageNRCan;
						trashCan3RegionFull = redAverageNRCanClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeAverageNRCan;
						trashCan3RegionFull = orangeAverageNRCanClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowAverageNRCan;
						trashCan3RegionFull = yellowAverageNRCanClicked;
					}; break;
					case 4: {
						trashCan3Region = greenAverageNRCan;
						trashCan3RegionFull = greenAverageNRCanClicked;
					}; break;
					case 5: {
						trashCan3Region = blueAverageNRCan;
						trashCan3RegionFull = blueAverageNRCanClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleAverageNRCan;
						trashCan3RegionFull = purpleAverageNRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 2: {
				switch (trashCan3Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 1: {
						trashCan3Region = redScorchingBCan;
						trashCan3RegionFull = redScorchingBCanClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeScorchingBCan;
						trashCan3RegionFull = orangeScorchingBCanClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowScorchingBCan;
						trashCan3RegionFull = yellowScorchingBCanClicked;
					}; break;
					case 4: {
						trashCan3Region = greenScorchingBCan;
						trashCan3RegionFull = greenScorchingBCanClicked;
					}; break;
					case 5: {
						trashCan3Region = blueScorchingBCan;
						trashCan3RegionFull = blueScorchingBCanClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleScorchingBCan;
						trashCan3RegionFull = purpleScorchingBCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 1: {
						trashCan3Region = redScorchingRCan;
						trashCan3RegionFull = redScorchingRCanClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeScorchingRCan;
						trashCan3RegionFull = orangeScorchingRCanClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowScorchingRCan;
						trashCan3RegionFull = yellowScorchingRCanClicked;
					}; break;
					case 4: {
						trashCan3Region = greenScorchingRCan;
						trashCan3RegionFull = greenScorchingRCanClicked;
					}; break;
					case 5: {
						trashCan3Region = blueScorchingRCan;
						trashCan3RegionFull = blueScorchingRCanClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleScorchingRCan;
						trashCan3RegionFull = purpleScorchingRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 1: {
						trashCan3Region = redScorchingNRCan;
						trashCan3RegionFull = redScorchingNRCanClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeScorchingNRCan;
						trashCan3RegionFull = orangeScorchingNRCanClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowScorchingNRCan;
						trashCan3RegionFull = yellowScorchingNRCanClicked;
					}; break;
					case 4: {
						trashCan3Region = greenScorchingNRCan;
						trashCan3RegionFull = greenScorchingNRCanClicked;
					}; break;
					case 5: {
						trashCan3Region = blueScorchingNRCan;
						trashCan3RegionFull = blueScorchingNRCanClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleScorchingNRCan;
						trashCan3RegionFull = purpleScorchingNRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 3: {
				switch (trashCan3Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 1: {
						trashCan3Region = redVacuumBCan;
						trashCan3RegionFull = redVacuumBCanClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeVacuumBCan;
						trashCan3RegionFull = orangeVacuumBCanClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowVacuumBCan;
						trashCan3RegionFull = yellowVacuumBCanClicked;
					}; break;
					case 4: {
						trashCan3Region = greenVacuumBCan;
						trashCan3RegionFull = greenVacuumBCanClicked;
					}; break;
					case 5: {
						trashCan3Region = blueVacuumBCan;
						trashCan3RegionFull = blueVacuumBCanClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleVacuumBCan;
						trashCan3RegionFull = purpleVacuumBCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 1: {
						trashCan3Region = redVacuumRCan;
						trashCan3RegionFull = redVacuumRCanClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeVacuumRCan;
						trashCan3RegionFull = orangeVacuumRCanClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowVacuumRCan;
						trashCan3RegionFull = yellowVacuumRCanClicked;
					}; break;
					case 4: {
						trashCan3Region = greenVacuumRCan;
						trashCan3RegionFull = greenVacuumRCanClicked;
					}; break;
					case 5: {
						trashCan3Region = blueVacuumRCan;
						trashCan3RegionFull = blueVacuumRCanClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleVacuumRCan;
						trashCan3RegionFull = purpleVacuumRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 1: {
						trashCan3Region = redVacuumNRCan;
						trashCan3RegionFull = redVacuumNRCanClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeVacuumNRCan;
						trashCan3RegionFull = orangeVacuumNRCanClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowVacuumNRCan;
						trashCan3RegionFull = yellowVacuumNRCanClicked;
					}; break;
					case 4: {
						trashCan3Region = greenVacuumNRCan;
						trashCan3RegionFull = greenVacuumNRCanClicked;
					}; break;
					case 5: {
						trashCan3Region = blueVacuumNRCan;
						trashCan3RegionFull = blueVacuumNRCanClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleVacuumNRCan;
						trashCan3RegionFull = purpleVacuumNRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 4: {
				switch (trashCan3Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 1: {
						trashCan3Region = redTrashBBlower;
						trashCan3RegionFull = redTrashBBlowerClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeTrashBBlower;
						trashCan3RegionFull = orangeTrashBBlowerClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowTrashBBlower;
						trashCan3RegionFull = yellowTrashBBlowerClicked;
					}; break;
					case 4: {
						trashCan3Region = greenTrashBBlower;
						trashCan3RegionFull = greenTrashBBlowerClicked;
					}; break;
					case 5: {
						trashCan3Region = blueTrashBBlower;
						trashCan3RegionFull = blueTrashBBlowerClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleTrashBBlower;
						trashCan3RegionFull = purpleTrashBBlowerClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 1: {
						trashCan3Region = redTrashRBlower;
						trashCan3RegionFull = redTrashRBlowerClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeTrashRBlower;
						trashCan3RegionFull = orangeTrashRBlowerClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowTrashRBlower;
						trashCan3RegionFull = yellowTrashRBlowerClicked;
					}; break;
					case 4: {
						trashCan3Region = greenTrashRBlower;
						trashCan3RegionFull = greenTrashRBlowerClicked;
					}; break;
					case 5: {
						trashCan3Region = blueTrashRBlower;
						trashCan3RegionFull = blueTrashRBlowerClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleTrashRBlower;
						trashCan3RegionFull = purpleTrashRBlowerClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 1: {
						trashCan3Region = redTrashNRBlower;
						trashCan3RegionFull = redTrashNRBlowerClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeTrashNRBlower;
						trashCan3RegionFull = orangeTrashNRBlowerClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowTrashNRBlower;
						trashCan3RegionFull = yellowTrashNRBlowerClicked;
					}; break;
					case 4: {
						trashCan3Region = greenTrashNRBlower;
						trashCan3RegionFull = greenTrashNRBlowerClicked;
					}; break;
					case 5: {
						trashCan3Region = blueTrashNRBlower;
						trashCan3RegionFull = blueTrashNRBlowerClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleTrashNRBlower;
						trashCan3RegionFull = purpleTrashNRBlowerClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 5: {
				switch (trashCan3Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 0: {
						trashCan3Region = noneDullBCan;
						trashCan3RegionFull = noneDullBCanClicked;
					}; break;
					case 1: {
						trashCan3Region = redDullBCan;
						trashCan3RegionFull = redDullBCanClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeDullBCan;
						trashCan3RegionFull = orangeDullBCanClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowDullBCan;
						trashCan3RegionFull = yellowDullBCanClicked;
					}; break;
					case 4: {
						trashCan3Region = greenDullBCan;
						trashCan3RegionFull = greenDullBCanClicked;
					}; break;
					case 5: {
						trashCan3Region = blueDullBCan;
						trashCan3RegionFull = blueDullBCanClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleDullBCan;
						trashCan3RegionFull = purpleDullBCanClicked;
					}; break;
					case 7: {
						trashCan3Region = dullCanBAll;
						trashCan3RegionFull = dullCanBAllClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 0: {
						trashCan3Region = noneDullRCan;
						trashCan3RegionFull = noneDullRCanClicked;
					}; break;
					case 1: {
						trashCan3Region = redDullRCan;
						trashCan3RegionFull = redDullRCanClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeDullRCan;
						trashCan3RegionFull = orangeDullRCanClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowDullRCan;
						trashCan3RegionFull = yellowDullRCanClicked;
					}; break;
					case 4: {
						trashCan3Region = greenDullRCan;
						trashCan3RegionFull = greenDullRCanClicked;
					}; break;
					case 5: {
						trashCan3Region = blueDullRCan;
						trashCan3RegionFull = blueDullRCanClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleDullRCan;
						trashCan3RegionFull = purpleDullRCanClicked;
					}; break;
					case 7: {
						trashCan3Region = dullCanRAll;
						trashCan3RegionFull = dullCanRAllClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 0: {
						trashCan3Region = noneDullNRCan;
						trashCan3RegionFull = noneDullNRCanClicked;
					}; break;
					case 1: {
						trashCan3Region = redDullNRCan;
						trashCan3RegionFull = redDullNRCanClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeDullNRCan;
						trashCan3RegionFull = orangeDullNRCanClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowDullNRCan;
						trashCan3RegionFull = yellowDullNRCanClicked;
					}; break;
					case 4: {
						trashCan3Region = greenDullNRCan;
						trashCan3RegionFull = greenDullNRCanClicked;
					}; break;
					case 5: {
						trashCan3Region = blueDullNRCan;
						trashCan3RegionFull = blueDullNRCanClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleDullNRCan;
						trashCan3RegionFull = purpleDullNRCanClicked;
					}; break;
					case 7: {
						trashCan3Region = dullCanNRAll;
						trashCan3RegionFull = dullCanNRAllClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 6: {
				switch (trashCan3Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 1: {
						trashCan3Region = redSwiftBCan;
						trashCan3RegionFull = redSwiftBCanClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeSwiftBCan;
						trashCan3RegionFull = orangeSwiftBCanClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowSwiftBCan;
						trashCan3RegionFull = yellowSwiftBCanClicked;
					}; break;
					case 4: {
						trashCan3Region = greenSwiftBCan;
						trashCan3RegionFull = greenSwiftBCanClicked;
					}; break;
					case 5: {
						trashCan3Region = blueSwiftBCan;
						trashCan3RegionFull = blueSwiftBCanClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleSwiftBCan;
						trashCan3RegionFull = purpleSwiftBCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 1: {
						trashCan3Region = redSwiftRCan;
						trashCan3RegionFull = redSwiftRCanClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeSwiftRCan;
						trashCan3RegionFull = orangeSwiftRCanClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowSwiftRCan;
						trashCan3RegionFull = yellowSwiftRCanClicked;
					}; break;
					case 4: {
						trashCan3Region = greenSwiftRCan;
						trashCan3RegionFull = greenSwiftRCanClicked;
					}; break;
					case 5: {
						trashCan3Region = blueSwiftRCan;
						trashCan3RegionFull = blueSwiftRCanClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleSwiftRCan;
						trashCan3RegionFull = purpleSwiftRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan3Properties.getTrashCanColor()){
					case 1: {
						trashCan3Region = redSwiftNRCan;
						trashCan3RegionFull = redSwiftNRCanClicked;
					}; break;
					case 2: {
						trashCan3Region = orangeSwiftNRCan;
						trashCan3RegionFull = orangeSwiftNRCanClicked;
					}; break;
					case 3: {
						trashCan3Region = yellowSwiftNRCan;
						trashCan3RegionFull = yellowSwiftNRCanClicked;
					}; break;
					case 4: {
						trashCan3Region = greenSwiftNRCan;
						trashCan3RegionFull = greenSwiftNRCanClicked;
					}; break;
					case 5: {
						trashCan3Region = blueSwiftNRCan;
						trashCan3RegionFull = blueSwiftNRCanClicked;
					}; break;
					case 6: {
						trashCan3Region = purpleSwiftNRCan;
						trashCan3RegionFull = purpleSwiftNRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		} else {
			trashCan3Region = blankRegion;
			trashCan3RegionFull = blankRegion;
			unclickableCan3 = true;
		}

		if (isTrashCan4){

			switch (trashCan4Properties.getTrashCan()){
			case 1: {
				switch (trashCan4Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 1: {
						trashCan4Region = redAverageBCan;
						trashCan4RegionFull = redAverageBCanClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeAverageBCan;
						trashCan4RegionFull = orangeAverageBCanClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowAverageBCan;
						trashCan4RegionFull = yellowAverageBCanClicked;
					}; break;
					case 4: {
						trashCan4Region = greenAverageBCan;
						trashCan4RegionFull = greenAverageBCanClicked;
					}; break;
					case 5: {
						trashCan4Region = blueAverageBCan;
						trashCan4RegionFull = blueAverageBCanClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleAverageBCan;
						trashCan4RegionFull = purpleAverageBCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 1: {
						trashCan4Region = redAverageRCan;
						trashCan4RegionFull = redAverageRCanClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeAverageRCan;
						trashCan4RegionFull = orangeAverageRCanClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowAverageRCan;
						trashCan4RegionFull = yellowAverageRCanClicked;
					}; break;
					case 4: {
						trashCan4Region = greenAverageRCan;
						trashCan4RegionFull = greenAverageRCanClicked;
					}; break;
					case 5: {
						trashCan4Region = blueAverageRCan;
						trashCan4RegionFull = blueAverageRCanClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleAverageRCan;
						trashCan4RegionFull = purpleAverageRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 1: {
						trashCan4Region = redAverageNRCan;
						trashCan4RegionFull = redAverageNRCanClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeAverageNRCan;
						trashCan4RegionFull = orangeAverageNRCanClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowAverageNRCan;
						trashCan4RegionFull = yellowAverageNRCanClicked;
					}; break;
					case 4: {
						trashCan4Region = greenAverageNRCan;
						trashCan4RegionFull = greenAverageNRCanClicked;
					}; break;
					case 5: {
						trashCan4Region = blueAverageNRCan;
						trashCan4RegionFull = blueAverageNRCanClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleAverageNRCan;
						trashCan4RegionFull = purpleAverageNRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 2: {
				switch (trashCan4Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 1: {
						trashCan4Region = redScorchingBCan;
						trashCan4RegionFull = redScorchingBCanClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeScorchingBCan;
						trashCan4RegionFull = orangeScorchingBCanClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowScorchingBCan;
						trashCan4RegionFull = yellowScorchingBCanClicked;
					}; break;
					case 4: {
						trashCan4Region = greenScorchingBCan;
						trashCan4RegionFull = greenScorchingBCanClicked;
					}; break;
					case 5: {
						trashCan4Region = blueScorchingBCan;
						trashCan4RegionFull = blueScorchingBCanClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleScorchingBCan;
						trashCan4RegionFull = purpleScorchingBCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 1: {
						trashCan4Region = redScorchingRCan;
						trashCan4RegionFull = redScorchingRCanClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeScorchingRCan;
						trashCan4RegionFull = orangeScorchingRCanClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowScorchingRCan;
						trashCan4RegionFull = yellowScorchingRCanClicked;
					}; break;
					case 4: {
						trashCan4Region = greenScorchingRCan;
						trashCan4RegionFull = greenScorchingRCanClicked;
					}; break;
					case 5: {
						trashCan4Region = blueScorchingRCan;
						trashCan4RegionFull = blueScorchingRCanClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleScorchingRCan;
						trashCan4RegionFull = purpleScorchingRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 1: {
						trashCan4Region = redScorchingNRCan;
						trashCan4RegionFull = redScorchingNRCanClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeScorchingNRCan;
						trashCan4RegionFull = orangeScorchingNRCanClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowScorchingNRCan;
						trashCan4RegionFull = yellowScorchingNRCanClicked;
					}; break;
					case 4: {
						trashCan4Region = greenScorchingNRCan;
						trashCan4RegionFull = greenScorchingNRCanClicked;
					}; break;
					case 5: {
						trashCan4Region = blueScorchingNRCan;
						trashCan4RegionFull = blueScorchingNRCanClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleScorchingNRCan;
						trashCan4RegionFull = purpleScorchingNRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 3: {
				switch (trashCan4Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 1: {
						trashCan4Region = redVacuumBCan;
						trashCan4RegionFull = redVacuumBCanClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeVacuumBCan;
						trashCan4RegionFull = orangeVacuumBCanClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowVacuumBCan;
						trashCan4RegionFull = yellowVacuumBCanClicked;
					}; break;
					case 4: {
						trashCan4Region = greenVacuumBCan;
						trashCan4RegionFull = greenVacuumBCanClicked;
					}; break;
					case 5: {
						trashCan4Region = blueVacuumBCan;
						trashCan4RegionFull = blueVacuumBCanClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleVacuumBCan;
						trashCan4RegionFull = purpleVacuumBCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 1: {
						trashCan4Region = redVacuumRCan;
						trashCan4RegionFull = redVacuumRCanClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeVacuumRCan;
						trashCan4RegionFull = orangeVacuumRCanClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowVacuumRCan;
						trashCan4RegionFull = yellowVacuumRCanClicked;
					}; break;
					case 4: {
						trashCan4Region = greenVacuumRCan;
						trashCan4RegionFull = greenVacuumRCanClicked;
					}; break;
					case 5: {
						trashCan4Region = blueVacuumRCan;
						trashCan4RegionFull = blueVacuumRCanClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleVacuumRCan;
						trashCan4RegionFull = purpleVacuumRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 1: {
						trashCan4Region = redVacuumNRCan;
						trashCan4RegionFull = redVacuumNRCanClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeVacuumNRCan;
						trashCan4RegionFull = orangeVacuumNRCanClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowVacuumNRCan;
						trashCan4RegionFull = yellowVacuumNRCanClicked;
					}; break;
					case 4: {
						trashCan4Region = greenVacuumNRCan;
						trashCan4RegionFull = greenVacuumNRCanClicked;
					}; break;
					case 5: {
						trashCan4Region = blueVacuumNRCan;
						trashCan4RegionFull = blueVacuumNRCanClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleVacuumNRCan;
						trashCan4RegionFull = purpleVacuumNRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 4: {
				switch (trashCan4Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 1: {
						trashCan4Region = redTrashBBlower;
						trashCan4RegionFull = redTrashBBlowerClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeTrashBBlower;
						trashCan4RegionFull = orangeTrashBBlowerClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowTrashBBlower;
						trashCan4RegionFull = yellowTrashBBlowerClicked;
					}; break;
					case 4: {
						trashCan4Region = greenTrashBBlower;
						trashCan4RegionFull = greenTrashBBlowerClicked;
					}; break;
					case 5: {
						trashCan4Region = blueTrashBBlower;
						trashCan4RegionFull = blueTrashBBlowerClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleTrashBBlower;
						trashCan4RegionFull = purpleTrashBBlowerClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 1: {
						trashCan4Region = redTrashRBlower;
						trashCan4RegionFull = redTrashRBlowerClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeTrashRBlower;
						trashCan4RegionFull = orangeTrashRBlowerClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowTrashRBlower;
						trashCan4RegionFull = yellowTrashRBlowerClicked;
					}; break;
					case 4: {
						trashCan4Region = greenTrashRBlower;
						trashCan4RegionFull = greenTrashRBlowerClicked;
					}; break;
					case 5: {
						trashCan4Region = blueTrashRBlower;
						trashCan4RegionFull = blueTrashRBlowerClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleTrashRBlower;
						trashCan4RegionFull = purpleTrashRBlowerClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 1: {
						trashCan4Region = redTrashNRBlower;
						trashCan4RegionFull = redTrashNRBlowerClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeTrashNRBlower;
						trashCan4RegionFull = orangeTrashNRBlowerClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowTrashNRBlower;
						trashCan4RegionFull = yellowTrashNRBlowerClicked;
					}; break;
					case 4: {
						trashCan4Region = greenTrashNRBlower;
						trashCan4RegionFull = greenTrashNRBlowerClicked;
					}; break;
					case 5: {
						trashCan4Region = blueTrashNRBlower;
						trashCan4RegionFull = blueTrashNRBlowerClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleTrashNRBlower;
						trashCan4RegionFull = purpleTrashNRBlowerClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 5: {
				switch (trashCan4Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 0: {
						trashCan4Region = noneDullBCan;
						trashCan4RegionFull = noneDullBCanClicked;
					}; break;
					case 1: {
						trashCan4Region = redDullBCan;
						trashCan4RegionFull = redDullBCanClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeDullBCan;
						trashCan4RegionFull = orangeDullBCanClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowDullBCan;
						trashCan4RegionFull = yellowDullBCanClicked;
					}; break;
					case 4: {
						trashCan4Region = greenDullBCan;
						trashCan4RegionFull = greenDullBCanClicked;
					}; break;
					case 5: {
						trashCan4Region = blueDullBCan;
						trashCan4RegionFull = blueDullBCanClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleDullBCan;
						trashCan4RegionFull = purpleDullBCanClicked;
					}; break;
					case 7: {
						trashCan4Region = dullCanBAll;
						trashCan4RegionFull = dullCanBAllClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 0: {
						trashCan4Region = noneDullRCan;
						trashCan4RegionFull = noneDullRCanClicked;
					}; break;
					case 1: {
						trashCan4Region = redDullRCan;
						trashCan4RegionFull = redDullRCanClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeDullRCan;
						trashCan4RegionFull = orangeDullRCanClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowDullRCan;
						trashCan4RegionFull = yellowDullRCanClicked;
					}; break;
					case 4: {
						trashCan4Region = greenDullRCan;
						trashCan4RegionFull = greenDullRCanClicked;
					}; break;
					case 5: {
						trashCan4Region = blueDullRCan;
						trashCan4RegionFull = blueDullRCanClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleDullRCan;
						trashCan4RegionFull = purpleDullRCanClicked;
					}; break;
					case 7: {
						trashCan4Region = dullCanRAll;
						trashCan4RegionFull = dullCanRAllClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 0: {
						trashCan4Region = noneDullNRCan;
						trashCan4RegionFull = noneDullNRCanClicked;
					}; break;
					case 1: {
						trashCan4Region = redDullNRCan;
						trashCan4RegionFull = redDullNRCanClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeDullNRCan;
						trashCan4RegionFull = orangeDullNRCanClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowDullNRCan;
						trashCan4RegionFull = yellowDullNRCanClicked;
					}; break;
					case 4: {
						trashCan4Region = greenDullNRCan;
						trashCan4RegionFull = greenDullNRCanClicked;
					}; break;
					case 5: {
						trashCan4Region = blueDullNRCan;
						trashCan4RegionFull = blueDullNRCanClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleDullNRCan;
						trashCan4RegionFull = purpleDullNRCanClicked;
					}; break;
					case 7: {
						trashCan4Region = dullCanNRAll;
						trashCan4RegionFull = dullCanNRAllClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			case 6: {
				switch (trashCan4Properties.getTrashCanType()) {
				case 1: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 1: {
						trashCan4Region = redSwiftBCan;
						trashCan4RegionFull = redSwiftBCanClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeSwiftBCan;
						trashCan4RegionFull = orangeSwiftBCanClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowSwiftBCan;
						trashCan4RegionFull = yellowSwiftBCanClicked;
					}; break;
					case 4: {
						trashCan4Region = greenSwiftBCan;
						trashCan4RegionFull = greenSwiftBCanClicked;
					}; break;
					case 5: {
						trashCan4Region = blueSwiftBCan;
						trashCan4RegionFull = blueSwiftBCanClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleSwiftBCan;
						trashCan4RegionFull = purpleSwiftBCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 2: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 1: {
						trashCan4Region = redSwiftRCan;
						trashCan4RegionFull = redSwiftRCanClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeSwiftRCan;
						trashCan4RegionFull = orangeSwiftRCanClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowSwiftRCan;
						trashCan4RegionFull = yellowSwiftRCanClicked;
					}; break;
					case 4: {
						trashCan4Region = greenSwiftRCan;
						trashCan4RegionFull = greenSwiftRCanClicked;
					}; break;
					case 5: {
						trashCan4Region = blueSwiftRCan;
						trashCan4RegionFull = blueSwiftRCanClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleSwiftRCan;
						trashCan4RegionFull = purpleSwiftRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				case 3: {
					switch (trashCan4Properties.getTrashCanColor()){
					case 1: {
						trashCan4Region = redSwiftNRCan;
						trashCan4RegionFull = redSwiftNRCanClicked;
					}; break;
					case 2: {
						trashCan4Region = orangeSwiftNRCan;
						trashCan4RegionFull = orangeSwiftNRCanClicked;
					}; break;
					case 3: {
						trashCan4Region = yellowSwiftNRCan;
						trashCan4RegionFull = yellowSwiftNRCanClicked;
					}; break;
					case 4: {
						trashCan4Region = greenSwiftNRCan;
						trashCan4RegionFull = greenSwiftNRCanClicked;
					}; break;
					case 5: {
						trashCan4Region = blueSwiftNRCan;
						trashCan4RegionFull = blueSwiftNRCanClicked;
					}; break;
					case 6: {
						trashCan4Region = purpleSwiftNRCan;
						trashCan4RegionFull = purpleSwiftNRCanClicked;
					}; break;
					default: break;
					}
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		} else {
			trashCan4Region = blankRegion;
			trashCan4RegionFull = blankRegion;
			unclickableCan4 = true;
		}
	}

	private void drawItemConfigs() {
		switch (currentItem1){
		case 1: {
			switch (currentItemOfSlot1){
			case NONE: {
				batch.draw(blankRegion, firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 2: {
			switch (currentItemOfSlot2){
			case NONE: {
				batch.draw(blankRegion, firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 3: {
			switch (currentItemOfSlot3){
			case NONE: {
				batch.draw(blankRegion, firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 4: {
			switch (currentItemOfSlot4){
			case NONE: {
				batch.draw(blankRegion, firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 5: {
			switch (currentItemOfSlot5){
			case NONE: {
				batch.draw(blankRegion, firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 6: {
			switch (currentItemOfSlot6){
			case NONE: {
				batch.draw(blankRegion, firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), firstItemLayer.x, firstItemLayer.y, firstItemLayer.width, firstItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		default: break;
		}

		switch (currentItem2){
		case 1: {
			switch (currentItemOfSlot1){
			case NONE: {
				batch.draw(blankRegion, secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 2: {
			switch (currentItemOfSlot2){
			case NONE: {
				batch.draw(blankRegion, secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 3: {
			switch (currentItemOfSlot3){
			case NONE: {
				batch.draw(blankRegion, secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 4: {
			switch (currentItemOfSlot4){
			case NONE: {
				batch.draw(blankRegion, secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 5: {
			switch (currentItemOfSlot5){
			case NONE: {
				batch.draw(blankRegion, secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 6: {
			switch (currentItemOfSlot6){
			case NONE: {
				batch.draw(blankRegion, secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), secondItemLayer.x, secondItemLayer.y, secondItemLayer.width, secondItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		default: break;
		}

		switch (currentItem3){
		case 1: {
			switch (currentItemOfSlot1){
			case NONE: {
				batch.draw(blankRegion, thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 2: {
			switch (currentItemOfSlot2){
			case NONE: {
				batch.draw(blankRegion, thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 3: {
			switch (currentItemOfSlot3){
			case NONE: {
				batch.draw(blankRegion, thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 4: {
			switch (currentItemOfSlot4){
			case NONE: {
				batch.draw(blankRegion, thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 5: {
			switch (currentItemOfSlot5){
			case NONE: {
				batch.draw(blankRegion, thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 6: {
			switch (currentItemOfSlot6){
			case NONE: {
				batch.draw(blankRegion, thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), thirdItemLayer.x, thirdItemLayer.y, thirdItemLayer.width, thirdItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		default: break;
		}

		switch (currentItem4){
		case 1: {
			switch (currentItemOfSlot1){
			case NONE: {
				batch.draw(blankRegion, fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem1State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 2: {
			switch (currentItemOfSlot2){
			case NONE: {
				batch.draw(blankRegion, fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem2State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 3: {
			switch (currentItemOfSlot3){
			case NONE: {
				batch.draw(blankRegion, fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem3State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 4: {
			switch (currentItemOfSlot4){
			case NONE: {
				batch.draw(blankRegion, fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem4State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 5: {
			switch (currentItemOfSlot5){
			case NONE: {
				batch.draw(blankRegion, fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem5State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		case 6: {
			switch (currentItemOfSlot6){
			case NONE: {
				batch.draw(blankRegion, fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
			}; break;
			case BOMB: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(0), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case FLYSWATTER: {

			}; break;
			case ICEFLAKE: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(2), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ELECTRIC_ZAPPER: {

			}; break;
			case ACCELERATOR: {

			}; break;
			case ACCELERATOR_X: {

			}; break;
			case STEEL_FLYSWATTER: {

			}; break;
			case GLUE: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(1), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case ITEM_RESTORE: {

			}; break;
			case SUPER_GLUE: {

			}; break;
			case WIND_VANE: {

			}; break;
			case SWITCH_MACHINE: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(3), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case AUGMENTED_BURST: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(4), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			case STICKER: {
				switch (currentItem6State){
				case CLICKABLE: {
					batch.draw(itemsRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case CLICKED: {
					batch.draw(itemsClickedRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case UNCLICKABLE: {
					batch.draw(itemsUnclickableRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				case COOLDOWN: {
					batch.draw(itemsCDRegion.get(5), fourthItemLayer.x, fourthItemLayer.y, fourthItemLayer.width, fourthItemLayer.height);
				}; break;
				default: break;
				}
			}; break;
			default: break;
			}
		}; break;
		default: break;
		}

		batch.draw(itemOutlineRegion, 170, 683, 64, 64);
		batch.draw(itemOutlineRegion, 246, 683, 64, 64);
		batch.draw(itemOutlineRegion, 322, 683, 64, 64);
		batch.draw(itemOutlineRegion, 398, 683, 64, 64);
		//		Draw Items TODO
	}

	private void updateGameEngine() {
		//		Put all game mechanics, details, calculations, and statistics here!!!
		switch (currentAbilityState1){
		case OFF: {
			previousAbility1State = PreviousAbility1State.OFF;
			if (moveTrashCan1 ||
					returnTrashCanOf1){
				if (trashCan1Properties.getTrashCan() != 1){
					currentAbilityState1 = CURRENTABILITYSTATE1.UNCLICKABLE;
				}
			}
			else {
				switch (previousAbility1State){
				case OFF: {
					currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
				}; break;
				case ON: {
					currentAbilityState1 = CURRENTABILITYSTATE1.ON;
				}; break;
				case COOLDOWN: {
					currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
				}; break;
				case UNCLICKABLE: {
				}; break;
				default: break;
				}
			}
		}; break;
		case ON: {
			previousAbility1State = PreviousAbility1State.ON;
			if (moveTrashCan1 ||
					returnTrashCanOf1){
				if (trashCan1Properties.getTrashCan() != 1){
					currentAbilityState1 = CURRENTABILITYSTATE1.UNCLICKABLE;
				}
			}
			else {
				switch (previousAbility1State){
				case OFF: {
					currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
				}; break;
				case ON: {
					currentAbilityState1 = CURRENTABILITYSTATE1.ON;
				}; break;
				case COOLDOWN: {
					currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
				}; break;
				case UNCLICKABLE: {
				}; break;
				default: break;
				}
			}
		}; break;
		case COOLDOWN: {
			previousAbility1State = PreviousAbility1State.COOLDOWN;
			if (moveTrashCan1 ||
					returnTrashCanOf1){
				if (trashCan1Properties.getTrashCan() != 1){
					currentAbilityState1 = CURRENTABILITYSTATE1.UNCLICKABLE;
				}
			}
			else {
				switch (previousAbility1State){
				case OFF: {
					currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
				}; break;
				case ON: {
					currentAbilityState1 = CURRENTABILITYSTATE1.ON;
				}; break;
				case COOLDOWN: {
					currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
				}; break;
				case UNCLICKABLE: {
				}; break;
				default: break;
				}
			}
		}; break;
		case UNCLICKABLE: {
			if (!moveTrashCan1 &&
					!returnTrashCanOf1 &&
					delaySwiftCan1Energy == 0){
				switch (previousAbility1State){
				case OFF: {
					currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
				}; break;
				case ON: {
					currentAbilityState1 = CURRENTABILITYSTATE1.ON;
				}; break;
				case COOLDOWN: {
					currentAbilityState1 = CURRENTABILITYSTATE1.COOLDOWN;
				}; break;
				default: break;
				}
			}
		}; break;
		default: break;
		}

		switch (currentAbilityState2){
		case OFF: {
			previousAbility2State = PreviousAbility2State.OFF;
			if (moveTrashCan2 ||
					returnTrashCanOf2){
				if (trashCan2Properties.getTrashCan() != 1){
					currentAbilityState2 = CURRENTABILITYSTATE2.UNCLICKABLE;
				}
			}
			else {
				switch (previousAbility2State){
				case OFF: {
					currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
				}; break;
				case ON: {
					currentAbilityState2 = CURRENTABILITYSTATE2.ON;
				}; break;
				case COOLDOWN: {
					currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
				}; break;
				case UNCLICKABLE: {
				}; break;
				default: break;
				}
			}
		}; break;
		case ON: {
			previousAbility2State = PreviousAbility2State.ON;
			if (moveTrashCan2 ||
					returnTrashCanOf2){
				if (trashCan2Properties.getTrashCan() != 1){
					currentAbilityState2 = CURRENTABILITYSTATE2.UNCLICKABLE;
				}
			}
			else {
				switch (previousAbility2State){
				case OFF: {
					currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
				}; break;
				case ON: {
					currentAbilityState2 = CURRENTABILITYSTATE2.ON;
				}; break;
				case COOLDOWN: {
					currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
				}; break;
				case UNCLICKABLE: {
				}; break;
				default: break;
				}
			}
		}; break;
		case COOLDOWN: {
			previousAbility2State = PreviousAbility2State.COOLDOWN;
			if (moveTrashCan2 ||
					returnTrashCanOf2){
				if (trashCan2Properties.getTrashCan() != 1){
					currentAbilityState2 = CURRENTABILITYSTATE2.UNCLICKABLE;
				}
			}
			else {
				switch (previousAbility2State){
				case OFF: {
					currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
				}; break;
				case ON: {
					currentAbilityState2 = CURRENTABILITYSTATE2.ON;
				}; break;
				case COOLDOWN: {
					currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
				}; break;
				case UNCLICKABLE: {
				}; break;
				default: break;
				}
			}
		}; break;
		case UNCLICKABLE: {
			if (!moveTrashCan2 &&
					!returnTrashCanOf2 &&
					delaySwiftCan2Energy == 0){
				switch (previousAbility2State){
				case OFF: {
					currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
				}; break;
				case ON: {
					currentAbilityState2 = CURRENTABILITYSTATE2.ON;
				}; break;
				case COOLDOWN: {
					currentAbilityState2 = CURRENTABILITYSTATE2.COOLDOWN;
				}; break;
				default: break;
				}
			}
		}; break;
		default: break;
		}

		switch (currentAbilityState3){
		case OFF: {
			previousAbility3State = PreviousAbility3State.OFF;
			if (moveTrashCan3 ||
					returnTrashCanOf3){
				if (trashCan3Properties.getTrashCan() != 1){
					currentAbilityState3 = CURRENTABILITYSTATE3.UNCLICKABLE;
				}
			}
			else {
				switch (previousAbility3State){
				case OFF: {
					currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
				}; break;
				case ON: {
					currentAbilityState3 = CURRENTABILITYSTATE3.ON;
				}; break;
				case COOLDOWN: {
					currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
				}; break;
				case UNCLICKABLE: {
				}; break;
				default: break;
				}
			}
		}; break;
		case ON: {
			previousAbility3State = PreviousAbility3State.ON;
			if (moveTrashCan3 ||
					returnTrashCanOf3){
				if (trashCan3Properties.getTrashCan() != 1){
					currentAbilityState3 = CURRENTABILITYSTATE3.UNCLICKABLE;
				}
			}
			else {
				switch (previousAbility3State){
				case OFF: {
					currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
				}; break;
				case ON: {
					currentAbilityState3 = CURRENTABILITYSTATE3.ON;
				}; break;
				case COOLDOWN: {
					currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
				}; break;
				case UNCLICKABLE: {
				}; break;
				default: break;
				}
			}
		}; break;
		case COOLDOWN: {
			previousAbility3State = PreviousAbility3State.COOLDOWN;
			if (moveTrashCan3 ||
					returnTrashCanOf3){
				if (trashCan3Properties.getTrashCan() != 1){
					currentAbilityState3 = CURRENTABILITYSTATE3.UNCLICKABLE;
				}
			}
			else {
				switch (previousAbility3State){
				case OFF: {
					currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
				}; break;
				case ON: {
					currentAbilityState3 = CURRENTABILITYSTATE3.ON;
				}; break;
				case COOLDOWN: {
					currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
				}; break;
				case UNCLICKABLE: {
				}; break;
				default: break;
				}
			}
		}; break;
		case UNCLICKABLE: {
			if (!moveTrashCan3 &&
					!returnTrashCanOf3 &&
					delaySwiftCan3Energy == 0){
				switch (previousAbility3State){
				case OFF: {
					currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
				}; break;
				case ON: {
					currentAbilityState3 = CURRENTABILITYSTATE3.ON;
				}; break;
				case COOLDOWN: {
					currentAbilityState3 = CURRENTABILITYSTATE3.COOLDOWN;
				}; break;
				default: break;
				}
			}
		}; break;
		default: break;
		}

		switch (currentAbilityState4){
		case OFF: {
			previousAbility4State = PreviousAbility4State.OFF;
			if (moveTrashCan4 ||
					returnTrashCanOf4){
				if (trashCan4Properties.getTrashCan() != 1){
					currentAbilityState4 = CURRENTABILITYSTATE4.UNCLICKABLE;
				}
			}
			else {
				switch (previousAbility4State){
				case OFF: {
					currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
				}; break;
				case ON: {
					currentAbilityState4 = CURRENTABILITYSTATE4.ON;
				}; break;
				case COOLDOWN: {
					currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
				}; break;
				case UNCLICKABLE: {
				}; break;
				default: break;
				}
			}
		}; break;
		case ON: {
			previousAbility4State = PreviousAbility4State.ON;
			if (moveTrashCan4 ||
					returnTrashCanOf4){
				if (trashCan4Properties.getTrashCan() != 1){
					currentAbilityState4 = CURRENTABILITYSTATE4.UNCLICKABLE;
				}
			}
			else {
				switch (previousAbility4State){
				case OFF: {
					currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
				}; break;
				case ON: {
					currentAbilityState4 = CURRENTABILITYSTATE4.ON;
				}; break;
				case COOLDOWN: {
					currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
				}; break;
				case UNCLICKABLE: {
				}; break;
				default: break;
				}
			}
		}; break;
		case COOLDOWN: {
			previousAbility4State = PreviousAbility4State.COOLDOWN;
			if (moveTrashCan4 ||
					returnTrashCanOf4){
				if (trashCan4Properties.getTrashCan() != 1){
					currentAbilityState4 = CURRENTABILITYSTATE4.UNCLICKABLE;
				}
			}
			else {
				switch (previousAbility4State){
				case OFF: {
					currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
				}; break;
				case ON: {
					currentAbilityState4 = CURRENTABILITYSTATE4.ON;
				}; break;
				case COOLDOWN: {
					currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
				}; break;
				case UNCLICKABLE: {
				}; break;
				default: break;
				}
			}
		}; break;
		case UNCLICKABLE: {
			if (!moveTrashCan4 &&
					!returnTrashCanOf4 &&
					delaySwiftCan4Energy == 0){
				switch (previousAbility4State){
				case OFF: {
					currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
				}; break;
				case ON: {
					currentAbilityState4 = CURRENTABILITYSTATE4.ON;
				}; break;
				case COOLDOWN: {
					currentAbilityState4 = CURRENTABILITYSTATE4.COOLDOWN;
				}; break;
				default: break;
				}
			}
		}; break;
		default: break;
		}

		//		Item Gauge
		switch (currentItemOfSlot1){
		case NONE: {

		}; break;
		case BOMB: {
			item1CD = 10000;
		}; break;
		case FLYSWATTER: {
			item1CD = 0;
		}; break;
		case ICEFLAKE: {
			item1CD = 10000;
		}; break;
		case ELECTRIC_ZAPPER: {

		}; break;
		case ACCELERATOR: {

		}; break;
		case ACCELERATOR_X: {

		}; break;
		case STEEL_FLYSWATTER: {

		}; break;
		case GLUE: {
			item1CD = 6000;
		}; break;
		case ITEM_RESTORE: {

		}; break;
		case SUPER_GLUE: {

		}; break;
		case WIND_VANE: {

		}; break;
		case SWITCH_MACHINE: {
			item1CD = 9000;
		}; break;
		case AUGMENTED_BURST: {
			item1CD = 12000;
		}; break;
		case STICKER: {
			item1CD = 14000;
		}; break;
		default: break;
		}

		switch (currentItemOfSlot2){
		case NONE: {

		}; break;
		case BOMB: {
			item2CD = 10000;
		}; break;
		case FLYSWATTER: {
			item2CD = 0;
		}; break;
		case ICEFLAKE: {
			item2CD = 10000;
		}; break;
		case ELECTRIC_ZAPPER: {

		}; break;
		case ACCELERATOR: {

		}; break;
		case ACCELERATOR_X: {

		}; break;
		case STEEL_FLYSWATTER: {

		}; break;
		case GLUE: {
			item2CD = 6000;
		}; break;
		case ITEM_RESTORE: {

		}; break;
		case SUPER_GLUE: {

		}; break;
		case WIND_VANE: {

		}; break;
		case SWITCH_MACHINE: {
			item2CD = 9000;
		}; break;
		case AUGMENTED_BURST: {
			item2CD = 12000;
		}; break;
		case STICKER: {
			item2CD = 14000;
		}; break;
		default: break;
		}

		switch (currentItemOfSlot3){
		case NONE: {

		}; break;
		case BOMB: {
			item3CD = 10000;
		}; break;
		case FLYSWATTER: {
			item3CD = 0;
		}; break;
		case ICEFLAKE: {
			item3CD = 10000;
		}; break;
		case ELECTRIC_ZAPPER: {

		}; break;
		case ACCELERATOR: {

		}; break;
		case ACCELERATOR_X: {

		}; break;
		case STEEL_FLYSWATTER: {

		}; break;
		case GLUE: {
			item3CD = 6000;
		}; break;
		case ITEM_RESTORE: {

		}; break;
		case SUPER_GLUE: {

		}; break;
		case WIND_VANE: {

		}; break;
		case SWITCH_MACHINE: {
			item3CD = 9000;
		}; break;
		case AUGMENTED_BURST: {
			item3CD = 12000;
		}; break;
		case STICKER: {
			item3CD = 14000;
		}; break;
		default: break;
		}

		switch (currentItemOfSlot4){
		case NONE: {

		}; break;
		case BOMB: {
			item4CD = 10000;
		}; break;
		case FLYSWATTER: {
			item4CD = 0;
		}; break;
		case ICEFLAKE: {
			item4CD = 10000;
		}; break;
		case ELECTRIC_ZAPPER: {

		}; break;
		case ACCELERATOR: {

		}; break;
		case ACCELERATOR_X: {

		}; break;
		case STEEL_FLYSWATTER: {

		}; break;
		case GLUE: {
			item4CD = 6000;
		}; break;
		case ITEM_RESTORE: {

		}; break;
		case SUPER_GLUE: {

		}; break;
		case WIND_VANE: {

		}; break;
		case SWITCH_MACHINE: {
			item4CD = 9000;
		}; break;
		case AUGMENTED_BURST: {
			item4CD = 12000;
		}; break;
		case STICKER: {
			item4CD = 14000;
		}; break;
		default: break;
		}

		switch (currentItemOfSlot5){
		case NONE: {

		}; break;
		case BOMB: {
			item5CD = 10000;
		}; break;
		case FLYSWATTER: {
			item5CD = 0;
		}; break;
		case ICEFLAKE: {
			item5CD = 10000;
		}; break;
		case ELECTRIC_ZAPPER: {

		}; break;
		case ACCELERATOR: {

		}; break;
		case ACCELERATOR_X: {

		}; break;
		case STEEL_FLYSWATTER: {

		}; break;
		case GLUE: {
			item5CD = 6000;
		}; break;
		case ITEM_RESTORE: {

		}; break;
		case SUPER_GLUE: {

		}; break;
		case WIND_VANE: {

		}; break;
		case SWITCH_MACHINE: {
			item5CD = 9000;
		}; break;
		case AUGMENTED_BURST: {
			item5CD = 12000;
		}; break;
		case STICKER: {
			item5CD = 14000;
		}; break;
		default: break;
		}

		switch (currentItemOfSlot6){
		case NONE: {

		}; break;
		case BOMB: {
			item6CD = 10000;
		}; break;
		case FLYSWATTER: {
			item6CD = 0;
		}; break;
		case ICEFLAKE: {
			item6CD = 10000;
		}; break;
		case ELECTRIC_ZAPPER: {

		}; break;
		case ACCELERATOR: {

		}; break;
		case ACCELERATOR_X: {

		}; break;
		case STEEL_FLYSWATTER: {

		}; break;
		case GLUE: {
			item6CD = 6000;
		}; break;
		case ITEM_RESTORE: {

		}; break;
		case SUPER_GLUE: {

		}; break;
		case WIND_VANE: {

		}; break;
		case SWITCH_MACHINE: {
			item6CD = 9000;
		}; break;
		case AUGMENTED_BURST: {
			item6CD = 12000;
		}; break;
		case STICKER: {
			item6CD = 14000;
		}; break;
		default: break;
		}


		switch (currentAbility1){
		case 0: burnAbilityLayer1.set(trashCan1Layer.x + 32, trashCan1Layer.y + 128, 64, 30); break;
		case 1: burnAbilityLayer1.set(trashCan1Layer.x + 32, trashCan1Layer.y + 128, 64, 60); break;
		case 2: burnAbilityLayer1.set(trashCan1Layer.x + 32, trashCan1Layer.y + 128, 64, 90); break;
		case 3: burnAbilityLayer1.set(trashCan1Layer.x + 32, trashCan1Layer.y + 128, 64, 120); break;
		case 4: burnAbilityLayer1.set(trashCan1Layer.x + 32, trashCan1Layer.y + 128, 64, 150); break;
		case 5: burnAbilityLayer1.set(trashCan1Layer.x + 32, trashCan1Layer.y + 128, 64, 180); break;
		default: burnAbilityLayer1.set(trashCan1Layer.x + 32, trashCan1Layer.y + 128, 64, 224); break;
		}
		switch (currentAbility2){
		case 0: burnAbilityLayer2.set(trashCan2Layer.x + 32, trashCan2Layer.y + 128, 64, 30); break;
		case 1: burnAbilityLayer2.set(trashCan2Layer.x + 32, trashCan2Layer.y + 128, 64, 60); break;
		case 2: burnAbilityLayer2.set(trashCan2Layer.x + 32, trashCan2Layer.y + 128, 64, 90); break;
		case 3: burnAbilityLayer2.set(trashCan2Layer.x + 32, trashCan2Layer.y + 128, 64, 120); break;
		case 4: burnAbilityLayer2.set(trashCan2Layer.x + 32, trashCan2Layer.y + 128, 64, 150); break;
		case 5: burnAbilityLayer2.set(trashCan2Layer.x + 32, trashCan2Layer.y + 128, 64, 180); break;
		default: burnAbilityLayer2.set(trashCan2Layer.x + 32, trashCan2Layer.y + 128, 64, 224); break;
		}
		switch (currentAbility3){
		case 0: burnAbilityLayer3.set(trashCan3Layer.x + 32, trashCan3Layer.y + 128, 64, 30); break;
		case 1: burnAbilityLayer3.set(trashCan3Layer.x + 32, trashCan3Layer.y + 128, 64, 60); break;
		case 2: burnAbilityLayer3.set(trashCan3Layer.x + 32, trashCan3Layer.y + 128, 64, 90); break;
		case 3: burnAbilityLayer3.set(trashCan3Layer.x + 32, trashCan3Layer.y + 128, 64, 120); break;
		case 4: burnAbilityLayer3.set(trashCan3Layer.x + 32, trashCan3Layer.y + 128, 64, 150); break;
		case 5: burnAbilityLayer3.set(trashCan3Layer.x + 32, trashCan3Layer.y + 128, 64, 180); break;
		default: burnAbilityLayer3.set(trashCan3Layer.x + 32, trashCan3Layer.y + 128, 64, 224); break;
		}
		switch (currentAbility4){
		case 0: burnAbilityLayer4.set(trashCan4Layer.x + 32, trashCan4Layer.y + 128, 64, 30); break;
		case 1: burnAbilityLayer4.set(trashCan4Layer.x + 32, trashCan4Layer.y + 128, 64, 60); break;
		case 2: burnAbilityLayer4.set(trashCan4Layer.x + 32, trashCan4Layer.y + 128, 64, 90); break;
		case 3: burnAbilityLayer4.set(trashCan4Layer.x + 32, trashCan4Layer.y + 128, 64, 120); break;
		case 4: burnAbilityLayer4.set(trashCan4Layer.x + 32, trashCan4Layer.y + 128, 64, 150); break;
		case 5: burnAbilityLayer4.set(trashCan4Layer.x + 32, trashCan4Layer.y + 128, 64, 180); break;
		default: burnAbilityLayer4.set(trashCan4Layer.x + 32, trashCan4Layer.y + 128, 64, 224); break;
		}
		
		averageCount1 = trashLayer.size;
		averageCount2 = trashLayer.size;
		averageCount3 = trashLayer.size;
		averageCount4 = trashLayer.size;
		
		for (Rectangle trash : trashLayer){
		
		if (!(trash.overlaps(averageCan1Indicator))){
			averageCount1 -= 1;
		}
		if (!(trash.overlaps(averageCan2Indicator))){
			averageCount2 -= 1;
		}
		if (!(trash.overlaps(averageCan3Indicator))){
			averageCount3 -= 1;
		}
		if (!(trash.overlaps(averageCan4Indicator))){
			averageCount4 -= 1;
		}
		}

		if (dumpsterAmount > 0){
			if (dumpTrash){
				dumpTrash = false;
				delayDumpingSpeed = TimeUtils.millis();
			}
		} 

		if (delayDumpingSpeed != 0){
			if (TimeUtils.millis() - delayDumpingSpeed >= 1000){
				if (gameState != GAMESTATE.GAMEOVER){
					if (!(dumpsterAmount - junkWorldEngines.getDumpingSpeed() <= 0)){
						dumpsterAmount -= junkWorldEngines.getDumpingSpeed();
						delayDumpingSpeed = TimeUtils.millis();
					}
					else {
						delayDumpingSpeed = 0;
						dumpTrash = true;
						dumpsterAmount = 0;
					}
				}
			}
		}

		switch (junkWorldEngines.getGameSelection()){
		case 1:  {
			switch (junkWorldEngines.getGameMode()){
			case 1: {
				if (dumpStarter){
					if (TimeUtils.millis() - delayTimeCountdown >= 1000){
						if (gameState != GAMESTATE.GAMEOVER){
							if (currentGameTimer - 1 >= 0){
								currentGameTimer -= 1;
							}
							else {
								currentGameTimer = 0;
							}
							delayTimeCountdown = TimeUtils.millis();
						}
					}
				}

				if (garbageVolumeY >= 0){
					highestPerfectDumpCombo.sort();
					singlePlayerFailed();
					stopMusic();
					delayAds = TimeUtils.millis();
					gameState = GAMESTATE.GAMEOVER;
					manager.get("audioAssets/sound/gameover.ogg", Sound.class).play();
				}

				if (gameState != GAMESTATE.GAMEOVER){
					if (currentGameTimer <= 0){
						highestPerfectDumpCombo.sort();
						singlePlayerSuccess();
						stopMusic();
						delayAds = TimeUtils.millis();
						gameState = GAMESTATE.TIMES_UP;
						manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
					}
				}
			}; break;
			case 2: {
				if (garbageVolumeY >= 0){
					highestPerfectDumpCombo.sort();
					singlePlayerFailed();
					stopMusic();
					delayAds = TimeUtils.millis();
					gameState = GAMESTATE.GAMEOVER;
					manager.get("audioAssets/sound/gameover.ogg", Sound.class).play();
				}
				if (gameState != GAMESTATE.ROUND_FAILED){
					if (perfectDump == junkWorldEngines.getGarbageGoal()){
						highestPerfectDumpCombo.sort();
						singlePlayerSuccess();
						stopMusic();
						delayAds = TimeUtils.millis();
						gameState = GAMESTATE.GOAL_SUCCESS;
						manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
					}
				}
			}; break;
			case 3: {
				if (dumpStarter){
					if (TimeUtils.millis() - delayTimeCountdown >= 1000){
						if (gameState != GAMESTATE.GAMEOVER){
							currentGameTimer += 1;
							delayTimeCountdown = TimeUtils.millis();
						}
					}
				}

				survivalLevel = 1 + (currentGameTimer / 18);
				junkWorldEngines.setTrashAccerleration(0.05f + (((jsonValue.getInt("level") + 24) / 25) * 0.02f * survivalLevel));

				if (addLayer2 && currentGameTimer >= 45){
					addLayer2 = false;
					yTrashSpawn.add(552);
				}
				if (addLayer3 && currentGameTimer >= (45 * 2)){
					addLayer3 = false;
					yTrashSpawn.add(488);
				}
				if (addLayer4 && currentGameTimer >= (45 * 3)){
					addLayer4 = false;
					yTrashSpawn.add(424);
				}

				if (garbageVolumeY >= 0){
					highestPerfectDumpCombo.sort();
					singlePlayerFailed();
					stopMusic();
					delayAds = TimeUtils.millis();
					gameState = GAMESTATE.GAMEOVER;
					manager.get("audioAssets/sound/gameover.ogg", Sound.class).play();
				}
			}; break;
			default: break;
			}
		}; break;
		case 2:  {
			switch (junkWorldEngines.getGameMode()){
			case 1: {
				if (dumpStarter){
					if (TimeUtils.millis() - delayTimeCountdown >= 1000){
						if (gameState != GAMESTATE.ROUND_FAILED || gameState != GAMESTATE.JOB_FAILED){
							if (currentGameTimer - 1 >= 0){
								currentGameTimer -= 1;
							}
							else {
								currentGameTimer = 0;
							}
							delayTimeCountdown = TimeUtils.millis();
						}
					}
				}

				if (garbageVolumeY >= 0){
					garbageReachedLimit();
				}

				if (gameState != GAMESTATE.ROUND_FAILED || gameState != GAMESTATE.JOB_FAILED){
					if (currentGameTimer <= 0){
						taskDone();
					}
				}
			}; break;
			case 2: {
				if (garbageVolumeY >= 0){
					garbageReachedLimit();
				}
				if (gameState != GAMESTATE.ROUND_FAILED){
					if (perfectDump == junkWorldEngines.getGarbageGoal()){
						taskDone();
					}
				}
			}; break;
			default: break;
			}
		}; break;
		default: break;
		}

		//		TODO

		if (toggleTimer){
			toggleTimer = false;
			delayTimer = TimeUtils.millis();
		}

		if (currentGameTimer <= 10){
			if (TimeUtils.millis() - delayTimer >= 300){
				delayTimer = TimeUtils.millis();
				if (displayTimerRegions){
					displayTimerRegions = false;
				}
				else {
					displayTimerRegions = true;
				}
			}
		}

		if (toggleTimer){
			toggleTimer = false;
		}

		if (!displayTimerRegions){
			font.setColor(0, 0, 1, 1);
		}
		else {
			font.setColor(.9f, .9f, 1, 1);
		}

		minutes = currentGameTimer / 60;
		seconds = currentGameTimer % 60;
		if (garbageVolumeY < 0){
			garbageVolumeY = ((notDumped * 800) / junkWorldEngines.getMaxTrashNotDumped()) - 800;
		}
		else {
			garbageVolumeY = 0;
		}


		if (garbageVolumeY + 800 >= 600){
			if (!warningActive){
				warningActive = true;
				delayCurrentWarning = TimeUtils.millis();
				manager.get("audioAssets/sound/warning.ogg", Sound.class).play();
			}
		}

		averageCan1Indicator.set(trashCan1Layer.x + 32, trashCan1Layer.y + trashCan1Layer.height, 64, 65);
		averageCan2Indicator.set(trashCan2Layer.x + 32, trashCan2Layer.y + trashCan2Layer.height, 64, 65);
		averageCan3Indicator.set(trashCan3Layer.x + 32, trashCan3Layer.y + trashCan3Layer.height, 64, 65);
		averageCan4Indicator.set(trashCan4Layer.x + 32, trashCan4Layer.y + trashCan4Layer.height, 64, 65);

		if (currentAbilityState1 != CURRENTABILITYSTATE1.ON && trashCan1Properties.getTrashCan() == 6){
			if ((swiftCan1Energy + ((junkWorldEngines.getSwiftCanDegen() * 0.5) * Gdx.graphics.getDeltaTime()) < junkWorldEngines.getSwiftCanEnergyTot())){
				swiftCan1Energy += junkWorldEngines.getSwiftCanDegen() * 0.5 * Gdx.graphics.getDeltaTime();
			}
		}
		if (currentAbilityState2 != CURRENTABILITYSTATE2.ON && trashCan2Properties.getTrashCan() == 6){
			if ((swiftCan2Energy + ((junkWorldEngines.getSwiftCanDegen() * 0.5) * Gdx.graphics.getDeltaTime()) < junkWorldEngines.getSwiftCanEnergyTot())){
				swiftCan2Energy += junkWorldEngines.getSwiftCanDegen() * 0.5 * Gdx.graphics.getDeltaTime();
			}
		}
		if (currentAbilityState3 != CURRENTABILITYSTATE3.ON && trashCan3Properties.getTrashCan() == 6){
			if ((swiftCan3Energy + ((junkWorldEngines.getSwiftCanDegen() * 0.5) * Gdx.graphics.getDeltaTime()) < junkWorldEngines.getSwiftCanEnergyTot())){
				swiftCan3Energy += junkWorldEngines.getSwiftCanDegen() * 0.5 * Gdx.graphics.getDeltaTime();
			}
		}
		if (currentAbilityState4 != CURRENTABILITYSTATE4.ON && trashCan4Properties.getTrashCan() == 6){
			if ((swiftCan4Energy + ((junkWorldEngines.getSwiftCanDegen() * 0.5) * Gdx.graphics.getDeltaTime()) < junkWorldEngines.getSwiftCanEnergyTot())){
				swiftCan4Energy += junkWorldEngines.getSwiftCanDegen() * 0.5 * Gdx.graphics.getDeltaTime();
			}
		}

		switch ((int) trashCan1Layer.x){
		case 0: {
			if (isTrashCan1 && !trashCan1Used){
				trashCan1AbilityPos = 1;
			}
		}; break;
		case 128: {
			if (isTrashCan1 && !trashCan1Used){
				trashCan1AbilityPos = 2;
			}
		}; break;
		case 256: {
			if (isTrashCan1 && !trashCan1Used){
				trashCan1AbilityPos = 3;
			}
		}; break;
		case 384: {
			if (isTrashCan1 && !trashCan1Used){
				trashCan1AbilityPos = 4;
			}
		}; break;
		default: break;
		}

		switch ((int) trashCan2Layer.x){
		case 0: {
			if (isTrashCan2 && !trashCan2Used){
				trashCan2AbilityPos = 1;
			}
		}; break;
		case 128: {
			if (isTrashCan2 && !trashCan2Used){
				trashCan2AbilityPos = 2;
			}
		}; break;
		case 256: {
			if (isTrashCan2 && !trashCan2Used){
				trashCan2AbilityPos = 3;
			}
		}; break;
		case 384: {
			if (isTrashCan2 && !trashCan2Used){
				trashCan2AbilityPos = 4;
			}
		}; break;
		default: break;
		}

		switch ((int) trashCan3Layer.x){
		case 0: {
			if (isTrashCan3 && !trashCan3Used){
				trashCan3AbilityPos = 1;
			}
		}; break;
		case 128: {
			if (isTrashCan3 && !trashCan3Used){
				trashCan3AbilityPos = 2;
			}
		}; break;
		case 256: {
			if (isTrashCan3 && !trashCan3Used){
				trashCan3AbilityPos = 3;
			}
		}; break;
		case 384: {
			if (isTrashCan3 && !trashCan3Used){
				trashCan3AbilityPos = 4;
			}
		}; break;
		default: break;
		}

		switch ((int) trashCan4Layer.x){
		case 0: {
			if (isTrashCan4 && !trashCan4Used){
				trashCan4AbilityPos = 1;
			}
		}; break;
		case 128: {
			if (isTrashCan4 && !trashCan4Used){
				trashCan4AbilityPos = 2;
			}
		}; break;
		case 256: {
			if (isTrashCan4 && !trashCan4Used){
				trashCan4AbilityPos = 3;
			}
		}; break;
		case 384: {
			if (isTrashCan4 && !trashCan4Used){
				trashCan4AbilityPos = 4;
			}
		}; break;
		default: break;
		}
		//		TODO Game Engine
	}
	private void removeBurnedAbilityTrash(int abilityNum, Rectangle trash) {
		switch (abilityNum){
		case 1: {
			burnedAbility1Layer.add(new Rectangle(trash));
		}; break;
		case 2: {
			burnedAbility2Layer.add(new Rectangle(trash));
		}; break;
		case 3: {
			burnedAbility3Layer.add(new Rectangle(trash));
		}; break;
		case 4: {
			burnedAbility4Layer.add(new Rectangle(trash));
		}; break;
		default: break;
		}
	}

	//	Scores
	private void scoring(int dump) {
		switch (dump){
		case 1: manager.get("audioAssets/sound/unofficialDump.wav", Sound.class).play(); break;
		case 2: manager.get("audioAssets/sound/dump.ogg", Sound.class).play(); break;
		case 3: manager.get("audioAssets/sound/perfectDump.ogg", Sound.class).play(); break;
		default: break;
		}

		switch (junkWorldEngines.getGameMode()){
		case 1: {
			switch (dump){
			case 1: {
				currentScore  += scoreMultiplier * 250;
			}; break;
			case 2: {
				currentScore  += scoreMultiplier * 500;
			}; break;
			case 3: {
				currentScore  += scoreMultiplier * 1000 * perfectDumpNumCombo;
			}; break;
			default: break;
			}
		}; break;
		case 2: {
			switch (dump){
			case 1: {
				currentScore  -= scoreMultiplier * 200;
				if (currentScore < 0){
					currentScore = 0;
				}
			}; break;
			case 2: {
				currentScore  -= scoreMultiplier * 400;
				if (currentScore < 0){
					currentScore = 0;
				}
			}; break;
			case 3: {
				currentScore  += scoreMultiplier * 1200 * perfectDumpNumCombo;
			}; break;
			default: break;
			}
		}; break;
		case 3: {
			switch (dump){
			case 1: {
				currentScore  += scoreMultiplier * (((jsonValue.getInt("level") + 4) / 5) * 25 * survivalLevel);
			}; break;
			case 2: {
				currentScore  += scoreMultiplier * (((jsonValue.getInt("level") + 4) / 5) * 50 * survivalLevel);
			}; break;
			case 3: {
				currentScore  += scoreMultiplier * (((jsonValue.getInt("level") + 4) / 5) * 100 * survivalLevel) * perfectDumpNumCombo;
			}; break;
			default: break;
			}
		}; break;
		default: break;
		}
	}

	private void unPausable() {
		setRectangles();
		addActorListener();
		checkHUDStates();
		setTrashCanState();	
		threadDelays();
		updateTrashCanPics();
		moveableTrashCan();
		delayTrashSpawn();
		checkTrashLayers();
		updateGameEngine();

		drawBatches();
		drawTutorials();
		setActorBounds();

		if (dumpStarter){
			if (moveTrash){
				moveTrash = false;
				delayTrashSpawn = TimeUtils.nanoTime();
			}
		}

		batch.begin();
		batch.draw(mainMenuToggledRegion, mainMenuToggledLayer.x, mainMenuToggledLayer.y, mainMenuToggledLayer.width, mainMenuToggledLayer.height);
		batch.draw(resumeGameRegion, resumeGameLayer.x, resumeGameLayer.y, resumeGameLayer.width, resumeGameLayer.height);
		batch.draw(quitGameRegion, quitGameLayer.x, quitGameLayer.y, quitGameLayer.width, quitGameLayer.height);
		if (quitClicked){
			batch.draw(mainMenuQuitToggledRegion, mainMenuQuitToggledLayer.x, mainMenuQuitToggledLayer.y, mainMenuQuitToggledLayer.width, mainMenuQuitToggledLayer.height);
			batch.draw(quitYesRegion, quitYesLayer.x, quitYesLayer.y, quitYesLayer.width, quitYesLayer.height);
			batch.draw(quitNoRegion, quitNoLayer.x, quitNoLayer.y, quitNoLayer.width, quitNoLayer.height);
			batch.draw(quitNotifierRegion, quitNotifierLayer.x, quitNotifierLayer.y, quitNotifierLayer.width, quitNotifierLayer.height);
		}
		batch.end();
		batch.flush();

		if (!quitClicked){
			resumeGame.setBounds(resumeGameLayer.x, resumeGameLayer.y, resumeGameLayer.width, resumeGameLayer.height);
			quitGame.setBounds(quitGameLayer.x, quitGameLayer.y, quitGameLayer.width, quitGameLayer.height);
			mainMenuUI.act();
			mainMenuUI.draw();
			mainMenuUI.getViewport().setCamera(camera);
			Gdx.input.setInputProcessor(mainMenuUI);
		}
		else {
			quitGameYes.setBounds(quitYesLayer.x, quitYesLayer.y, quitYesLayer.width, quitYesLayer.height);
			quitGameNo.setBounds(quitNoLayer.x, quitNoLayer.y, quitNoLayer.width, quitNoLayer.height);
			quitUI.act();
			quitUI.draw();
			quitUI.getViewport().setCamera(camera);
			Gdx.input.setInputProcessor(quitUI);
		}
	}

	private void itemActiveReset(){
		switch (currentItemSlotSelected){
		case FIRST: {
			currentItem1State = CurrentItem1State.CLICKABLE;
		}; break;
		case SECOND: {
			currentItem2State = CurrentItem2State.CLICKABLE;
		}; break;
		case THIRD: {
			currentItem3State = CurrentItem3State.CLICKABLE;
		}; break;
		case FOURTH: {
			currentItem4State = CurrentItem4State.CLICKABLE;
		}; break;
		case FIFTH: {
			currentItem5State = CurrentItem5State.CLICKABLE;
		}; break;
		case SIXTH: {
			currentItem6State = CurrentItem6State.CLICKABLE;
		}; break;
		default: break;
		}
		currentItemSlotSelected = CurrentItemSlotSelected.NONE;
		currentSelectedItem = CurrentSelectedItem.NONE;
	}

	private void setItemToCD() {
		switch (currentItemSlotSelected){
		case FIRST: {
			delayItem1CD = TimeUtils.millis();
			currentItem1State = CurrentItem1State.COOLDOWN;
			currentItemSlotSelected = CurrentItemSlotSelected.NONE;
			currentSelectedItem = CurrentSelectedItem.NONE;
		}; break;
		case SECOND: {
			delayItem2CD = TimeUtils.millis();
			currentItem2State = CurrentItem2State.COOLDOWN;
			currentItemSlotSelected = CurrentItemSlotSelected.NONE;
			currentSelectedItem = CurrentSelectedItem.NONE;
		}; break;
		case THIRD: {
			delayItem3CD = TimeUtils.millis();
			currentItem3State = CurrentItem3State.COOLDOWN;
			currentItemSlotSelected = CurrentItemSlotSelected.NONE;
			currentSelectedItem = CurrentSelectedItem.NONE;
		}; break;
		case FOURTH: {
			delayItem4CD = TimeUtils.millis();
			currentItem4State = CurrentItem4State.COOLDOWN;
			currentItemSlotSelected = CurrentItemSlotSelected.NONE;
			currentSelectedItem = CurrentSelectedItem.NONE;
		}; break;
		case FIFTH: {
			delayItem5CD = TimeUtils.millis();
			currentItem5State = CurrentItem5State.COOLDOWN;
			currentItemSlotSelected = CurrentItemSlotSelected.NONE;
			currentSelectedItem = CurrentSelectedItem.NONE;
		}; break;
		case SIXTH: {
			delayItem6CD = TimeUtils.millis();
			currentItem6State = CurrentItem6State.COOLDOWN;
			currentItemSlotSelected = CurrentItemSlotSelected.NONE;
			currentSelectedItem = CurrentSelectedItem.NONE;
		}; break;
		default: break;
		}
	}

	private void updateReturningMechanics(int returningCanNum, int returningCanCol, float backX, float returningX){

		switch (returningCanNum){
		case 1: {
			switch (returningCanCol){
			case 1: break;
			case 2: break;
			case 3: break;
			case 4: break;
			default: break;
			}
		}; break;
		case 2: {
			switch (returningCanCol){
			case 1: break;
			case 2: break;
			case 3: break;
			case 4: break;
			default: break;
			}
		}; break;
		case 3: {
			switch (returningCanCol){
			case 1: break;
			case 2: break;
			case 3: break;
			case 4: break;
			default: break;
			}
		}; break;
		case 4: {
			switch (returningCanCol){
			case 1: break;
			case 2: break;
			case 3: break;
			case 4: break;
			default: break;
			}
		}; break;
		default: break;
		}

		if (backX > returningX){
			junkWorldEngines.setGreaterThanReturningXPos(true);
			junkWorldEngines.setLessThanReturningXPos(false);
		}
		else if (backX < returningX) {
			junkWorldEngines.setGreaterThanReturningXPos(false);
			junkWorldEngines.setLessThanReturningXPos(true);
		}
		else {
			junkWorldEngines.setGreaterThanReturningXPos(false);
			junkWorldEngines.setLessThanReturningXPos(false);
		}
	}

	private void drawSticker(){
		if (delaySticker != 0){
			for (Rectangle trash : trashLayer){
				if (bLayers.contains(trash, true)){
					batch.draw(manager.get("gameAnimations/In-Game Items/Sticker/bSticker.png", Texture.class), trash.x, trash.y, 64, 64);
				}
				else if (rLayers.contains(trash, true)){
					batch.draw(manager.get("gameAnimations/In-Game Items/Sticker/rSticker.png", Texture.class), trash.x, trash.y, 64, 64);
				}
				else if (nrLayers.contains(trash, true)){
					batch.draw(manager.get("gameAnimations/In-Game Items/Sticker/nrSticker.png", Texture.class), trash.x, trash.y, 64, 64);
				}
			}
		}
	}

	private void delayDullColor(int trashCanNum){
		switch (trashCanNum){
		case 1: {
			if (delayDullCanColor1 != 0){
				delayDullCanColor1 -= 1000;
			}
		}; break;
		case 2: {
			if (delayDullCanColor2 != 0){
				delayDullCanColor2 -= 1000;
			}
		}; break;
		case 3: {
			if (delayDullCanColor3 != 0){
				delayDullCanColor3 -= 1000;
			}
		}; break;
		case 4: {
			if (delayDullCanColor4 != 0){
				delayDullCanColor4 -= 1000;
			}
		}; break;
		default: break;
		}
	}

	private void unlockTrashAlbum(Rectangle trash){
		if (acornLayer.contains(trash, true)){
			jsonValue.get("acornAlbum").set(true);
		}
		else if (appleLayer.contains(trash, true)){
			jsonValue.get("appleAlbum").set(true);
		}
		else if (bananaPeelLayer.contains(trash, true)){
			jsonValue.get("bananaPeelAlbum").set(true);
		}
		else if (branchLayer.contains(trash, true)){
			jsonValue.get("branchAlbum").set(true);
		}
		else if (deadMouseLayer.contains(trash, true)){
			jsonValue.get("deadMouseAlbum").set(true);
		}
		else if (eggShellLayer.contains(trash, true)){
			jsonValue.get("eggShellAlbum").set(true);
		}
		else if (featherLayer.contains(trash, true)){
			jsonValue.get("featherAlbum").set(true);
		}
		else if (fishBoneLayer.contains(trash, true)){
			jsonValue.get("fishBoneAlbum").set(true);
		}
		else if (flowerLayer.contains(trash, true)){
			jsonValue.get("flowerAlbum").set(true);
		}
		else if (grassLayer.contains(trash, true)){
			jsonValue.get("grassAlbum").set(true);
		}
		else if (hairLayer.contains(trash, true)){
			jsonValue.get("hairAlbum").set(true);
		}
		else if (hayLayer.contains(trash, true)){
			jsonValue.get("hayAlbum").set(true);
		}
		else if (leavesLayer.contains(trash, true)){
			jsonValue.get("leavesAlbum").set(true);
		}
		else if (manureLayer.contains(trash, true)){
			jsonValue.get("manureAlbum").set(true);
		}
		else if (rootsLayer.contains(trash, true)){
			jsonValue.get("rootsAlbum").set(true);
		}
		else if (bottleLayer.contains(trash, true)){
			jsonValue.get("bottleAlbum").set(true);
		}
		else if (canLayer.contains(trash, true)){
			jsonValue.get("canAlbum").set(true);
		}
		else if (cardboardLayer.contains(trash, true)){
			jsonValue.get("cardboardAlbum").set(true);
		}
		else if (cerealBoxLayer.contains(trash, true)){
			jsonValue.get("cerealBoxAlbum").set(true);
		}
		else if (dirtyShirtLayer.contains(trash, true)){
			jsonValue.get("dirtyShirtAlbum").set(true);
		}
		else if (envelopeLayer.contains(trash, true)){
			jsonValue.get("envelopeAlbum").set(true);
		}
		else if (funnelLayer.contains(trash, true)){
			jsonValue.get("funnelAlbum").set(true);
		}
		else if (hangerLayer.contains(trash, true)){
			jsonValue.get("hangerAlbum").set(true);
		}
		else if (newspaperLayer.contains(trash, true)){
			jsonValue.get("newspaperAlbum").set(true);
		}
		else if (paperLayer.contains(trash, true)){
			jsonValue.get("paperAlbum").set(true);
		}
		else if (pillBottleLayer.contains(trash, true)){
			jsonValue.get("pillBottleAlbum").set(true);
		}
		else if (plasticBagLayer.contains(trash, true)){
			jsonValue.get("plasticBagAlbum").set(true);
		}
		else if (tyreLayer.contains(trash, true)){
			jsonValue.get("tyreAlbum").set(true);
		}
		else if (vaseLayer.contains(trash, true)){
			jsonValue.get("vaseAlbum").set(true);
		}
		else if (waffleIronLayer.contains(trash, true)){
			jsonValue.get("waffleIronAlbum").set(true);
		}
		else if (aerosolCanLayer.contains(trash, true)){
			jsonValue.get("aerosolCanAlbum").set(true);
		}
		else if (brokenBulbLayer.contains(trash, true)){
			jsonValue.get("brokenBulbAlbum").set(true);
		}
		else if (brokenGlassLayer.contains(trash, true)){
			jsonValue.get("brokenGlassAlbum").set(true);
		}
		else if (chewingGumLayer.contains(trash, true)){
			jsonValue.get("chewingGumAlbum").set(true);
		}
		else if (cigaretteLayer.contains(trash, true)){
			jsonValue.get("cigaretteAlbum").set(true);
		}
		else if (deadBatteryLayer.contains(trash, true)){
			jsonValue.get("deadBatteryAlbum").set(true);
		}
		else if (dirtyDiaperLayer.contains(trash, true)){
			jsonValue.get("dirtyDiaperAlbum").set(true);
		}
		else if (insecticideSprayLayer.contains(trash, true)){
			jsonValue.get("insecticideSprayAlbum").set(true);
		}
		else if (leftoverCakeLayer.contains(trash, true)){
			jsonValue.get("leftoverCakeAlbum").set(true);
		}
		else if (leftoverChickenLayer.contains(trash, true)){
			jsonValue.get("leftoverChickenAlbum").set(true);
		}
		else if (nailLayer.contains(trash, true)){
			jsonValue.get("nailAlbum").set(true);
		}
		else if (paintCanLayer.contains(trash, true)){
			jsonValue.get("paintCanAlbum").set(true);
		}
		else if (syringeLayer.contains(trash, true)){
			jsonValue.get("syringeAlbum").set(true);
		}
		else if (tornPaperLayer.contains(trash, true)){
			jsonValue.get("tornPaperAlbum").set(true);
		}
		else if (usedMotorOilLayer.contains(trash, true)){
			jsonValue.get("usedMotorOilAlbum").set(true);
		}
		else {
		}
		profileFile.writeString(jsonValue.toString(), false);
	}

	private void setGarbages(){
		int garbageAmount = 0;
		int garbageNum = 0;
		Array<Array<Integer>> types = new Array<Array<Integer>>();
		Array<Integer> trashNumB = new Array<Integer>();
		Array<Integer> trashNumR = new Array<Integer>();
		Array<Integer> trashNumNR = new Array<Integer>();

		if (jsonValue.getString("currentJob").equals("kitchen")){

			trashNumB.add(new Integer(2));
			trashNumB.add(new Integer(3));
			trashNumB.add(new Integer(5));
			trashNumB.add(new Integer(6));
			trashNumB.add(new Integer(7));
			trashNumB.add(new Integer(8));

			trashNumR.add(new Integer(1));
			trashNumR.add(new Integer(2));
			trashNumR.add(new Integer(4));
			trashNumR.add(new Integer(7));
			trashNumR.add(new Integer(14));
			trashNumR.add(new Integer(15));

			trashNumNR.add(new Integer(2));
			trashNumNR.add(new Integer(3));
			trashNumNR.add(new Integer(4));
			trashNumNR.add(new Integer(9));
			trashNumNR.add(new Integer(10));
			trashNumNR.add(new Integer(14));

			types.add(trashNumB);
			types.add(trashNumR);
			types.add(trashNumNR);

			while (garbageAmount != jsonValue.get("garbageAmount").getInt(0)){
				types.shuffle();
				for (Array<Integer> type : types){
					if (type.equals(trashNumB)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(1, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(2, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumNR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(3, garbageNum);
						garbageAmount += 1;
					}
					if (garbageAmount == jsonValue.get("garbageAmount").getInt(0)){
						break;
					}
				}
			}
		}
		else if (jsonValue.getString("currentJob").equals("basement")){

			trashNumB.add(new Integer(1));
			trashNumB.add(new Integer(2));
			trashNumB.add(new Integer(4));
			trashNumB.add(new Integer(7));
			trashNumB.add(new Integer(10));
			trashNumB.add(new Integer(13));

			trashNumR.add(new Integer(1));
			trashNumR.add(new Integer(3));
			trashNumR.add(new Integer(5));
			trashNumR.add(new Integer(9));
			trashNumR.add(new Integer(11));
			trashNumR.add(new Integer(13));

			trashNumNR.add(new Integer(1));
			trashNumNR.add(new Integer(2));
			trashNumNR.add(new Integer(5));
			trashNumNR.add(new Integer(11));
			trashNumNR.add(new Integer(12));
			trashNumNR.add(new Integer(15));

			types.add(trashNumB);
			types.add(trashNumR);
			types.add(trashNumNR);

			while (garbageAmount != jsonValue.get("garbageAmount").getInt(1)){
				types.shuffle();
				for (Array<Integer> type : types){
					if (type.equals(trashNumB)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(1, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(2, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumNR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(3, garbageNum);
						garbageAmount += 1;
					}
					if (garbageAmount == jsonValue.get("garbageAmount").getInt(1)){
						break;
					}
				}
			}
		}
		else if (jsonValue.getString("currentJob").equals("garage")){

			trashNumB.add(new Integer(1));
			trashNumB.add(new Integer(2));
			trashNumB.add(new Integer(4));
			trashNumB.add(new Integer(10));
			trashNumB.add(new Integer(13));
			trashNumB.add(new Integer(15));

			trashNumR.add(new Integer(1));
			trashNumR.add(new Integer(2));
			trashNumR.add(new Integer(5));
			trashNumR.add(new Integer(10));
			trashNumR.add(new Integer(12));
			trashNumR.add(new Integer(13));

			trashNumNR.add(new Integer(4));
			trashNumNR.add(new Integer(6));
			trashNumNR.add(new Integer(8));
			trashNumNR.add(new Integer(11));
			trashNumNR.add(new Integer(12));
			trashNumNR.add(new Integer(14));

			types.add(trashNumB);
			types.add(trashNumR);
			types.add(trashNumNR);

			while (garbageAmount != jsonValue.get("garbageAmount").getInt(2)){
				types.shuffle();
				for (Array<Integer> type : types){
					if (type.equals(trashNumB)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(1, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(2, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumNR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(3, garbageNum);
						garbageAmount += 1;
					}
					if (garbageAmount == jsonValue.get("garbageAmount").getInt(2)){
						break;
					}
				}
			}
		}
		else if (jsonValue.getString("currentJob").equals("backyard")){

			trashNumB.add(new Integer(1));
			trashNumB.add(new Integer(4));
			trashNumB.add(new Integer(5));
			trashNumB.add(new Integer(9));
			trashNumB.add(new Integer(10));
			trashNumB.add(new Integer(13));

			trashNumR.add(new Integer(2));
			trashNumR.add(new Integer(3));
			trashNumR.add(new Integer(4));
			trashNumR.add(new Integer(9));
			trashNumR.add(new Integer(10));
			trashNumR.add(new Integer(12));

			trashNumNR.add(new Integer(3));
			trashNumNR.add(new Integer(4));
			trashNumNR.add(new Integer(5));
			trashNumNR.add(new Integer(7));
			trashNumNR.add(new Integer(11));
			trashNumNR.add(new Integer(14));

			types.add(trashNumB);
			types.add(trashNumR);
			types.add(trashNumNR);

			while (garbageAmount != jsonValue.get("garbageAmount").getInt(3)){
				types.shuffle();
				for (Array<Integer> type : types){
					if (type.equals(trashNumB)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(1, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(2, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumNR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(3, garbageNum);
						garbageAmount += 1;
					}
					if (garbageAmount == jsonValue.get("garbageAmount").getInt(3)){
						break;
					}
				}
			}
		}
		else if (jsonValue.getString("currentJob").equals("sidewalk")){

			trashNumB.add(new Integer(1));
			trashNumB.add(new Integer(4));
			trashNumB.add(new Integer(5));
			trashNumB.add(new Integer(9));
			trashNumB.add(new Integer(10));
			trashNumB.add(new Integer(13));

			trashNumR.add(new Integer(2));
			trashNumR.add(new Integer(3));
			trashNumR.add(new Integer(4));
			trashNumR.add(new Integer(9));
			trashNumR.add(new Integer(10));
			trashNumR.add(new Integer(12));

			trashNumNR.add(new Integer(3));
			trashNumNR.add(new Integer(4));
			trashNumNR.add(new Integer(5));
			trashNumNR.add(new Integer(7));
			trashNumNR.add(new Integer(11));
			trashNumNR.add(new Integer(14));

			types.add(trashNumB);
			types.add(trashNumR);
			types.add(trashNumNR);

			while (garbageAmount != jsonValue.get("garbageAmount").getInt(4)){
				types.shuffle();
				for (Array<Integer> type : types){
					if (type.equals(trashNumB)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(1, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(2, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumNR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(3, garbageNum);
						garbageAmount += 1;
					}
					if (garbageAmount == jsonValue.get("garbageAmount").getInt(4)){
						break;
					}
				}
			}
		}
		else if (jsonValue.getString("currentJob").equals("factory")){

			trashNumB.add(new Integer(1));
			trashNumB.add(new Integer(5));
			trashNumB.add(new Integer(6));
			trashNumB.add(new Integer(8));
			trashNumB.add(new Integer(11));
			trashNumB.add(new Integer(13));

			trashNumR.add(new Integer(1));
			trashNumR.add(new Integer(2));
			trashNumR.add(new Integer(3));
			trashNumR.add(new Integer(4));
			trashNumR.add(new Integer(10));
			trashNumR.add(new Integer(15));

			trashNumNR.add(new Integer(1));
			trashNumNR.add(new Integer(2));
			trashNumNR.add(new Integer(3));
			trashNumNR.add(new Integer(5));
			trashNumNR.add(new Integer(6));
			trashNumNR.add(new Integer(13));

			while (garbageAmount != jsonValue.get("garbageAmount").getInt(5)){
				types.shuffle();
				for (Array<Integer> type : types){
					if (type.equals(trashNumB)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(1, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(2, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumNR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(3, garbageNum);
						garbageAmount += 1;
					}
					if (garbageAmount == jsonValue.get("garbageAmount").getInt(5)){
						break;
					}
				}
			}
		}
		else if (jsonValue.getString("currentJob").equals("highway")){

			trashNumB.add(new Integer(7));
			trashNumB.add(new Integer(9));
			trashNumB.add(new Integer(11));
			trashNumB.add(new Integer(12));
			trashNumB.add(new Integer(13));
			trashNumB.add(new Integer(14));

			trashNumR.add(new Integer(1));
			trashNumR.add(new Integer(6));
			trashNumR.add(new Integer(9));
			trashNumR.add(new Integer(10));
			trashNumR.add(new Integer(12));
			trashNumR.add(new Integer(13));

			trashNumNR.add(new Integer(4));
			trashNumNR.add(new Integer(5));
			trashNumNR.add(new Integer(6));
			trashNumNR.add(new Integer(11));
			trashNumNR.add(new Integer(14));
			trashNumNR.add(new Integer(15));

			types.add(trashNumB);
			types.add(trashNumR);
			types.add(trashNumNR);

			while (garbageAmount != jsonValue.get("garbageAmount").getInt(6)){
				types.shuffle();
				for (Array<Integer> type : types){
					if (type.equals(trashNumB)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(1, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(2, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumNR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(3, garbageNum);
						garbageAmount += 1;
					}
					if (garbageAmount == jsonValue.get("garbageAmount").getInt(6)){
						break;
					}
				}
			}
		}
		else if (jsonValue.getString("currentJob").equals("park")){

			trashNumB.add(new Integer(1));
			trashNumB.add(new Integer(2));
			trashNumB.add(new Integer(4));
			trashNumB.add(new Integer(9));
			trashNumB.add(new Integer(10));
			trashNumB.add(new Integer(15));

			trashNumR.add(new Integer(1));
			trashNumR.add(new Integer(2));
			trashNumR.add(new Integer(3));
			trashNumR.add(new Integer(9));
			trashNumR.add(new Integer(10));
			trashNumR.add(new Integer(12));

			trashNumNR.add(new Integer(3));
			trashNumNR.add(new Integer(4));
			trashNumNR.add(new Integer(5));
			trashNumNR.add(new Integer(9));
			trashNumNR.add(new Integer(10));
			trashNumNR.add(new Integer(14));

			types.add(trashNumB);
			types.add(trashNumR);
			types.add(trashNumNR);

			while (garbageAmount != jsonValue.get("garbageAmount").getInt(7)){
				types.shuffle();
				for (Array<Integer> type : types){
					if (type.equals(trashNumB)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(1, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(2, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumNR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(3, garbageNum);
						garbageAmount += 1;
					}
					if (garbageAmount == jsonValue.get("garbageAmount").getInt(7)){
						break;
					}
				}
			}
		}
		else if (jsonValue.getString("currentJob").equals("sewers")){

			trashNumB.add(new Integer(3));
			trashNumB.add(new Integer(5));
			trashNumB.add(new Integer(6));
			trashNumB.add(new Integer(8));
			trashNumB.add(new Integer(11));
			trashNumB.add(new Integer(14));

			trashNumR.add(new Integer(1));
			trashNumR.add(new Integer(2));
			trashNumR.add(new Integer(5));
			trashNumR.add(new Integer(6));
			trashNumR.add(new Integer(10));
			trashNumR.add(new Integer(11));

			trashNumNR.add(new Integer(1));
			trashNumNR.add(new Integer(7));
			trashNumNR.add(new Integer(9));
			trashNumNR.add(new Integer(10));
			trashNumNR.add(new Integer(11));
			trashNumNR.add(new Integer(14));

			types.add(trashNumB);
			types.add(trashNumR);
			types.add(trashNumNR);

			while (garbageAmount != jsonValue.get("garbageAmount").getInt(8)){
				types.shuffle();
				for (Array<Integer> type : types){
					if (type.equals(trashNumB)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(1, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(2, garbageNum);
						garbageAmount += 1;
					}
					else if (type.equals(trashNumNR)){
						garbageNum = type.random();
						type.removeValue(garbageNum, false);
						setTrashTrue(3, garbageNum);
						garbageAmount += 1;
					}
					if (garbageAmount == jsonValue.get("garbageAmount").getInt(8)){
						break;
					}
				}
			}
		}
		else if (jsonValue.getString("currentJob").equals("none")){

			if (junkWorldEngines.getGameMode() == 0){
				setTrashTrue (1, 2);
				setTrashTrue (3, 5);
			}
			else {
				switch (junkWorldEngines.getTheme()){
				case 0: {
					trashNumB.add(new Integer(2));
					trashNumB.add(new Integer(3));
					trashNumB.add(new Integer(13));
					trashNumB.add(new Integer(6));
					trashNumB.add(new Integer(15));
					trashNumB.add(new Integer(4));

					trashNumR.add(new Integer(1));
					trashNumR.add(new Integer(2));
					trashNumR.add(new Integer(9));
					trashNumR.add(new Integer(10));
					trashNumR.add(new Integer(7));
					trashNumR.add(new Integer(14));

					trashNumNR.add(new Integer(2));
					trashNumNR.add(new Integer(3));
					trashNumNR.add(new Integer(5));
					trashNumNR.add(new Integer(6));
					trashNumNR.add(new Integer(12));
					trashNumNR.add(new Integer(9));

					types.add(trashNumB);
					types.add(trashNumR);
					types.add(trashNumNR);

					while (garbageAmount != junkWorldEngines.getGarbageAmount()){
						types.shuffle();
						for (Array<Integer> type : types){
							if (type.equals(trashNumB)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(1, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(2, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumNR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(3, garbageNum);
								garbageAmount += 1;
							}
							if (garbageAmount == junkWorldEngines.getGarbageAmount()){
								break;
							}
						}
					}
				}; break;
				case 1: {
					trashNumB.add(new Integer(2));
					trashNumB.add(new Integer(3));
					trashNumB.add(new Integer(5));
					trashNumB.add(new Integer(6));
					trashNumB.add(new Integer(7));
					trashNumB.add(new Integer(8));

					trashNumR.add(new Integer(1));
					trashNumR.add(new Integer(2));
					trashNumR.add(new Integer(4));
					trashNumR.add(new Integer(7));
					trashNumR.add(new Integer(14));
					trashNumR.add(new Integer(15));

					trashNumNR.add(new Integer(2));
					trashNumNR.add(new Integer(3));
					trashNumNR.add(new Integer(4));
					trashNumNR.add(new Integer(9));
					trashNumNR.add(new Integer(10));
					trashNumNR.add(new Integer(14));

					types.add(trashNumB);
					types.add(trashNumR);
					types.add(trashNumNR);

					while (garbageAmount != junkWorldEngines.getGarbageAmount()){
						types.shuffle();
						for (Array<Integer> type : types){
							if (type.equals(trashNumB)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(1, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(2, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumNR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(3, garbageNum);
								garbageAmount += 1;
							}
							if (garbageAmount == junkWorldEngines.getGarbageAmount()){
								break;
							}
						}
					}
				}; break;
				case 2: {
					trashNumB.add(new Integer(1));
					trashNumB.add(new Integer(2));
					trashNumB.add(new Integer(4));
					trashNumB.add(new Integer(7));
					trashNumB.add(new Integer(10));
					trashNumB.add(new Integer(13));

					trashNumR.add(new Integer(1));
					trashNumR.add(new Integer(3));
					trashNumR.add(new Integer(5));
					trashNumR.add(new Integer(9));
					trashNumR.add(new Integer(11));
					trashNumR.add(new Integer(13));

					trashNumNR.add(new Integer(1));
					trashNumNR.add(new Integer(2));
					trashNumNR.add(new Integer(5));
					trashNumNR.add(new Integer(11));
					trashNumNR.add(new Integer(12));
					trashNumNR.add(new Integer(15));

					types.add(trashNumB);
					types.add(trashNumR);
					types.add(trashNumNR);

					while (garbageAmount != junkWorldEngines.getGarbageAmount()){
						types.shuffle();
						for (Array<Integer> type : types){
							if (type.equals(trashNumB)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(1, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(2, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumNR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(3, garbageNum);
								garbageAmount += 1;
							}
							if (garbageAmount == junkWorldEngines.getGarbageAmount()){
								break;
							}
						}
					}
				}; break;
				case 3: {

					trashNumB.add(new Integer(1));
					trashNumB.add(new Integer(2));
					trashNumB.add(new Integer(4));
					trashNumB.add(new Integer(10));
					trashNumB.add(new Integer(13));
					trashNumB.add(new Integer(15));

					trashNumR.add(new Integer(1));
					trashNumR.add(new Integer(2));
					trashNumR.add(new Integer(5));
					trashNumR.add(new Integer(10));
					trashNumR.add(new Integer(12));
					trashNumR.add(new Integer(13));

					trashNumNR.add(new Integer(4));
					trashNumNR.add(new Integer(6));
					trashNumNR.add(new Integer(8));
					trashNumNR.add(new Integer(11));
					trashNumNR.add(new Integer(12));
					trashNumNR.add(new Integer(14));

					types.add(trashNumB);
					types.add(trashNumR);
					types.add(trashNumNR);

					while (garbageAmount != junkWorldEngines.getGarbageAmount()){
						types.shuffle();
						for (Array<Integer> type : types){
							if (type.equals(trashNumB)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(1, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(2, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumNR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(3, garbageNum);
								garbageAmount += 1;
							}
							if (garbageAmount == junkWorldEngines.getGarbageAmount()){
								break;
							}
						}
					}
				}; break;
				case 4: {
					trashNumB.add(new Integer(1));
					trashNumB.add(new Integer(4));
					trashNumB.add(new Integer(5));
					trashNumB.add(new Integer(9));
					trashNumB.add(new Integer(10));
					trashNumB.add(new Integer(13));

					trashNumR.add(new Integer(2));
					trashNumR.add(new Integer(3));
					trashNumR.add(new Integer(4));
					trashNumR.add(new Integer(9));
					trashNumR.add(new Integer(10));
					trashNumR.add(new Integer(12));

					trashNumNR.add(new Integer(3));
					trashNumNR.add(new Integer(4));
					trashNumNR.add(new Integer(5));
					trashNumNR.add(new Integer(7));
					trashNumNR.add(new Integer(11));
					trashNumNR.add(new Integer(14));

					types.add(trashNumB);
					types.add(trashNumR);
					types.add(trashNumNR);

					while (garbageAmount != junkWorldEngines.getGarbageAmount()){
						types.shuffle();
						for (Array<Integer> type : types){
							if (type.equals(trashNumB)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(1, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(2, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumNR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(3, garbageNum);
								garbageAmount += 1;
							}
							if (garbageAmount == junkWorldEngines.getGarbageAmount()){
								break;
							}
						}
					}
				}; break;
				case 5: {

					trashNumB.add(new Integer(1));
					trashNumB.add(new Integer(4));
					trashNumB.add(new Integer(5));
					trashNumB.add(new Integer(9));
					trashNumB.add(new Integer(10));
					trashNumB.add(new Integer(13));

					trashNumR.add(new Integer(2));
					trashNumR.add(new Integer(3));
					trashNumR.add(new Integer(4));
					trashNumR.add(new Integer(9));
					trashNumR.add(new Integer(10));
					trashNumR.add(new Integer(12));

					trashNumNR.add(new Integer(3));
					trashNumNR.add(new Integer(4));
					trashNumNR.add(new Integer(5));
					trashNumNR.add(new Integer(7));
					trashNumNR.add(new Integer(11));
					trashNumNR.add(new Integer(14));

					types.add(trashNumB);
					types.add(trashNumR);
					types.add(trashNumNR);

					while (garbageAmount != junkWorldEngines.getGarbageAmount()){
						types.shuffle();
						for (Array<Integer> type : types){
							if (type.equals(trashNumB)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(1, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(2, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumNR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(3, garbageNum);
								garbageAmount += 1;
							}
							if (garbageAmount == junkWorldEngines.getGarbageAmount()){
								break;
							}
						}
					}
				}; break;
				case 6: {

					trashNumB.add(new Integer(1));
					trashNumB.add(new Integer(5));
					trashNumB.add(new Integer(6));
					trashNumB.add(new Integer(8));
					trashNumB.add(new Integer(11));
					trashNumB.add(new Integer(13));

					trashNumR.add(new Integer(1));
					trashNumR.add(new Integer(2));
					trashNumR.add(new Integer(3));
					trashNumR.add(new Integer(4));
					trashNumR.add(new Integer(10));
					trashNumR.add(new Integer(15));

					trashNumNR.add(new Integer(1));
					trashNumNR.add(new Integer(2));
					trashNumNR.add(new Integer(3));
					trashNumNR.add(new Integer(5));
					trashNumNR.add(new Integer(6));
					trashNumNR.add(new Integer(13));

					while (garbageAmount != junkWorldEngines.getGarbageAmount()){
						types.shuffle();
						for (Array<Integer> type : types){
							if (type.equals(trashNumB)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(1, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(2, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumNR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(3, garbageNum);
								garbageAmount += 1;
							}
							if (garbageAmount == junkWorldEngines.getGarbageAmount()){
								break;
							}
						}
					}
				}; break;
				case 7: {

					trashNumB.add(new Integer(7));
					trashNumB.add(new Integer(9));
					trashNumB.add(new Integer(11));
					trashNumB.add(new Integer(12));
					trashNumB.add(new Integer(13));
					trashNumB.add(new Integer(14));

					trashNumR.add(new Integer(1));
					trashNumR.add(new Integer(6));
					trashNumR.add(new Integer(9));
					trashNumR.add(new Integer(10));
					trashNumR.add(new Integer(12));
					trashNumR.add(new Integer(13));

					trashNumNR.add(new Integer(4));
					trashNumNR.add(new Integer(5));
					trashNumNR.add(new Integer(6));
					trashNumNR.add(new Integer(11));
					trashNumNR.add(new Integer(14));
					trashNumNR.add(new Integer(15));

					types.add(trashNumB);
					types.add(trashNumR);
					types.add(trashNumNR);

					while (garbageAmount != junkWorldEngines.getGarbageAmount()){
						types.shuffle();
						for (Array<Integer> type : types){
							if (type.equals(trashNumB)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(1, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(2, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumNR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(3, garbageNum);
								garbageAmount += 1;
							}
							if (garbageAmount == junkWorldEngines.getGarbageAmount()){
								break;
							}
						}
					}
				}; break;
				case 8: {

					trashNumB.add(new Integer(1));
					trashNumB.add(new Integer(2));
					trashNumB.add(new Integer(4));
					trashNumB.add(new Integer(9));
					trashNumB.add(new Integer(10));
					trashNumB.add(new Integer(15));

					trashNumR.add(new Integer(1));
					trashNumR.add(new Integer(2));
					trashNumR.add(new Integer(3));
					trashNumR.add(new Integer(9));
					trashNumR.add(new Integer(10));
					trashNumR.add(new Integer(12));

					trashNumNR.add(new Integer(3));
					trashNumNR.add(new Integer(4));
					trashNumNR.add(new Integer(5));
					trashNumNR.add(new Integer(9));
					trashNumNR.add(new Integer(10));
					trashNumNR.add(new Integer(14));

					types.add(trashNumB);
					types.add(trashNumR);
					types.add(trashNumNR);

					while (garbageAmount != junkWorldEngines.getGarbageAmount()){
						types.shuffle();
						for (Array<Integer> type : types){
							if (type.equals(trashNumB)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(1, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(2, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumNR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(3, garbageNum);
								garbageAmount += 1;
							}
							if (garbageAmount == junkWorldEngines.getGarbageAmount()){
								break;
							}
						}
					}
				}; break;
				case 9: {
					trashNumB.add(new Integer(3));
					trashNumB.add(new Integer(5));
					trashNumB.add(new Integer(6));
					trashNumB.add(new Integer(8));
					trashNumB.add(new Integer(11));
					trashNumB.add(new Integer(14));

					trashNumR.add(new Integer(1));
					trashNumR.add(new Integer(2));
					trashNumR.add(new Integer(5));
					trashNumR.add(new Integer(6));
					trashNumR.add(new Integer(10));
					trashNumR.add(new Integer(11));

					trashNumNR.add(new Integer(1));
					trashNumNR.add(new Integer(7));
					trashNumNR.add(new Integer(9));
					trashNumNR.add(new Integer(10));
					trashNumNR.add(new Integer(11));
					trashNumNR.add(new Integer(14));

					types.add(trashNumB);
					types.add(trashNumR);
					types.add(trashNumNR);

					while (garbageAmount != junkWorldEngines.getGarbageAmount()){
						types.shuffle();
						for (Array<Integer> type : types){
							if (type.equals(trashNumB)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(1, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(2, garbageNum);
								garbageAmount += 1;
							}
							else if (type.equals(trashNumNR)){
								garbageNum = type.random();
								type.removeValue(garbageNum, false);
								setTrashTrue(3, garbageNum);
								garbageAmount += 1;
							}
							if (garbageAmount == junkWorldEngines.getGarbageAmount()){
								break;
							}
						}
					}
				}; break;
				default: break;
				}
			}
		}
	}

	private void setTrashTrue (int type, int num){
		switch (type){
		case 1:{
			switch (num){
			case 1: junkWorldEngines.setAcorn(true); break;
			case 2: junkWorldEngines.setApple(true); break;
			case 3: junkWorldEngines.setBananaPeel(true); break;
			case 4: junkWorldEngines.setBranch(true); break;
			case 5: junkWorldEngines.setDeadMouse(true); break;
			case 6: junkWorldEngines.setEggShell(true); break;
			case 7: junkWorldEngines.setFeather(true); break;
			case 8: junkWorldEngines.setFishBone(true); break;
			case 9: junkWorldEngines.setFlower(true); break;
			case 10: junkWorldEngines.setGrass(true); break;
			case 11: junkWorldEngines.setHair(true); break;
			case 12: junkWorldEngines.setHay(true); break;
			case 13: junkWorldEngines.setLeaves(true); break;
			case 14: junkWorldEngines.setManure(true); break;
			case 15: junkWorldEngines.setRoots(true); break;
			default: break;
			}
		}; break;
		case 2:{
			switch (num){
			case 1: junkWorldEngines.setBottle(true); break;
			case 2: junkWorldEngines.setCan(true); break;
			case 3: junkWorldEngines.setCardboard(true); break;
			case 4: junkWorldEngines.setCerealBox(true); break;
			case 5: junkWorldEngines.setDirtyShirt(true); break;
			case 6: junkWorldEngines.setEnvelope(true); break;
			case 7: junkWorldEngines.setFunnel(true); break;
			case 8: junkWorldEngines.setHanger(true); break;
			case 9: junkWorldEngines.setNewspaper(true); break;
			case 10: junkWorldEngines.setPaper(true); break;
			case 11: junkWorldEngines.setPillBottle(true); break;
			case 12: junkWorldEngines.setPlasticBag(true); break;
			case 13: junkWorldEngines.setTyre(true); break;
			case 14: junkWorldEngines.setVase(true); break;
			case 15: junkWorldEngines.setWaffleIron(true); break;
			default: break;
			}
		}; break;
		case 3:{
			switch (num){
			case 1: junkWorldEngines.setAerosolCan(true); break;
			case 2: junkWorldEngines.setBrokenBulb(true); break;
			case 3: junkWorldEngines.setBrokenGlass(true); break;
			case 4: junkWorldEngines.setChewingGum(true); break;
			case 5: junkWorldEngines.setCigarette(true); break;
			case 6: junkWorldEngines.setDeadBattery(true); break;
			case 7: junkWorldEngines.setDirtyDiaper(true); break;
			case 8: junkWorldEngines.setInsecticideSpray(true); break;
			case 9: junkWorldEngines.setLeftoverCake(true); break;
			case 10: junkWorldEngines.setLeftoverChicken(true); break;
			case 11: junkWorldEngines.setNail(true); break;
			case 12: junkWorldEngines.setPaintCan(true); break;
			case 13: junkWorldEngines.setSyringe(true); break;
			case 14: junkWorldEngines.setTornPaper(true); break;
			case 15: junkWorldEngines.setUsedMotorOil(true); break;
			default: break;
			}
		}; break;
		default: break;
		}
	}

	private void setAllTrashFalse(){
		junkWorldEngines.setAcorn(false);
		junkWorldEngines.setApple(false);
		junkWorldEngines.setBananaPeel(false);
		junkWorldEngines.setBranch(false);
		junkWorldEngines.setDeadMouse(false);
		junkWorldEngines.setEggShell(false);
		junkWorldEngines.setFeather(false);
		junkWorldEngines.setFishBone(false);
		junkWorldEngines.setFlower(false);
		junkWorldEngines.setGrass(false);
		junkWorldEngines.setHair(false);
		junkWorldEngines.setHay(false);
		junkWorldEngines.setLeaves(false);
		junkWorldEngines.setManure(false);
		junkWorldEngines.setRoots(false);
		junkWorldEngines.setBottle(false);
		junkWorldEngines.setCan(false);
		junkWorldEngines.setCardboard(false);
		junkWorldEngines.setCerealBox(false);
		junkWorldEngines.setDirtyShirt(false);
		junkWorldEngines.setEnvelope(false);
		junkWorldEngines.setFunnel(false);
		junkWorldEngines.setHanger(false);
		junkWorldEngines.setNewspaper(false);
		junkWorldEngines.setPaper(false);
		junkWorldEngines.setPillBottle(false);
		junkWorldEngines.setPlasticBag(false);
		junkWorldEngines.setTyre(false);
		junkWorldEngines.setVase(false);
		junkWorldEngines.setWaffleIron(false);
		junkWorldEngines.setAerosolCan(false);
		junkWorldEngines.setBrokenBulb(false);
		junkWorldEngines.setBrokenGlass(false);
		junkWorldEngines.setChewingGum(false);
		junkWorldEngines.setCigarette(false);
		junkWorldEngines.setDeadBattery(false);
		junkWorldEngines.setDirtyDiaper(false);
		junkWorldEngines.setInsecticideSpray(false);
		junkWorldEngines.setLeftoverCake(false);
		junkWorldEngines.setLeftoverChicken(false);
		junkWorldEngines.setNail(false);
		junkWorldEngines.setPaintCan(false);
		junkWorldEngines.setSyringe(false);
		junkWorldEngines.setTornPaper(false);
		junkWorldEngines.setUsedMotorOil(false);
	}

	private void delayTrashSpawn(){
		if (TimeUtils.millis() - delayTrashSpawn >=  randomSpawnDelay * 1000 && delayTrashSpawn != 0){
			delayTrashSpawn = TimeUtils.millis();
			randomSpawnDelay = spawnTimes.random();
			updateSpawnPos();
		}
	}

	private void checkTrashLayers(){
		
		for (Rectangle trash : trashLayer){
			moveTrash(trash);
			setTrashValue(trash);
			checkIfTrashOverlaps(trash);
			checkIfIceFlake(trash);

			checkTrashDumps(trash);
			if (breakLoop){
				breakLoop = false;
				break;
			}
			checkIfBombOverlaps(trash);
			if (breakLoop){
				breakLoop = false;
				break;
			}
			checkIfTrashNotDumped(trash);
			if (breakLoop){
				breakLoop = false;
				break;
			}

			initializeAbilityStates(trash);
			if (breakLoop){
				breakLoop = false;
				break;
			}
			//			TODO	Put all trash rectangle doings here!!! 
		}
	}

	private void initializeAbilityStates(Rectangle trash) {
		if (currentAbilityState1 == CURRENTABILITYSTATE1.ON){
			switch (trashCan1Properties.getTrashCan()){
			case 1: {
				if (trash.overlaps(trashCan1Indicator)){
					if (averageCount1 <= 1 && gluedTrashLayer != trash){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - junkWorldEngines.getTrashAccerleration());
						trash.y += (initialSpeed.get(trashLayer.indexOf(trash, true)) * Gdx.graphics.getDeltaTime());
					}
					else {
						currentAbilityState1 = CURRENTABILITYSTATE1.OFF;
					}
				}
			} break;
			case 2: {
				if (trash.overlaps(burnAbilityLayer1)){
					removeBurnedAbilityTrash(1, trash);
					initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
					trashLayer.removeValue(trash, true);
					breakLoop = true;
				}
			} break;
			case 3: {
				if (trash.x == 32 &&
						trashCan1Layer.x == 0){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
					}
					else {
						if (redLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 1){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 2){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 3){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 4){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 5){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 6){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
					}
				}
				else if (trash.x == 160 &&
						trashCan1Layer.x == 128){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
					}
					else {
						if (redLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 1){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 2){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 3){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 4){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 5){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 6){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
					}
				}
				else if (trash.x == 288 &&
						trashCan1Layer.x == 256){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
					}
					else {
						if (redLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 1){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 2){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 3){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 4){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 5){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 6){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
					}
				}
				else if (trash.x == 419 &&
						trashCan1Layer.x == 384){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
					}
					else {
						if (redLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 1){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 2){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 3){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 4){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 5){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (trashCan1Properties.getTrashCanColor() == 6){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
					}
				}
			} break;
			case 4: {
				if (trash.x == 32 &&
						trashCan1Layer.x == 0){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
								(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
					}
					else {
						if (redLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 1)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 2)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 3)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 4)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 5)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 6)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
					}
				}
				else if (trash.x == 160 &&
						trashCan1Layer.x == 128){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
								(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
					}
					else {
						if (redLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 1)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 2)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 3)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 4)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 5)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 6)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
					}
				}
				else if (trash.x == 288 &&
						trashCan1Layer.x == 256){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
								(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
					}
					else {
						if (redLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 1)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 2)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 3)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 4)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 5)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 6)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
					}
				}
				else if (trash.x == 419 &&
						trashCan1Layer.x == 384){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
								(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
					}
					else {
						if (redLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 1)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 2)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 3)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 4)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 5)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (!(trashCan1Properties.getTrashCanColor() == 6)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
					}
				}
			} break;
			case 5: {

			} break;
			case 6: {

			} break;
			default: break;
			}
		}
		if (currentAbilityState2 == CURRENTABILITYSTATE2.ON){
			switch (trashCan2Properties.getTrashCan()){
			case 1: {
				if (trash.overlaps(trashCan2Indicator)){
					if (averageCount2 <= 1 && gluedTrashLayer != trash){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - junkWorldEngines.getTrashAccerleration());
						trash.y += (initialSpeed.get(trashLayer.indexOf(trash, true)) * Gdx.graphics.getDeltaTime());
					}
					else {
						currentAbilityState2 = CURRENTABILITYSTATE2.OFF;
					}
				}
			} break;
			case 2: {
				if (trash.overlaps(burnAbilityLayer2)){
					removeBurnedAbilityTrash(2, trash);
					initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
					trashLayer.removeValue(trash, true);
					breakLoop = true;
				}
			} break;
			case 3: {
				if (trash.x == 32 &&
						trashCan2Layer.x == 0){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
					}
					else {
						if (redLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 1){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 2){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 3){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 4){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 5){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 6){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
					}
				}
				else if (trash.x == 160 &&
						trashCan2Layer.x == 128){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
					}
					else {
						if (redLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 1){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 2){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 3){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 4){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 5){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 6){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
					}
				}
				else if (trash.x == 288 &&
						trashCan2Layer.x == 256){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
					}
					else {
						if (redLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 1){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 2){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 3){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 4){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 5){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 6){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
					}
				}
				else if (trash.x == 419 &&
						trashCan2Layer.x == 384){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
					}
					else {
						if (redLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 1){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 2){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 3){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 4){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 5){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (trashCan2Properties.getTrashCanColor() == 6){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
					}
				}
			} break;
			case 4: {
				if (trash.x == 32 &&
						trashCan2Layer.x == 0){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
								(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
					}
					else {
						if (redLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 1)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 2)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 3)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 4)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 5)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 6)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
					}
				}
				else if (trash.x == 160 &&
						trashCan2Layer.x == 128){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
								(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
					}
					else {
						if (redLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 1)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 2)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 3)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 4)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 5)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 6)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
					}
				}
				else if (trash.x == 288 &&
						trashCan2Layer.x == 256){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
								(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
					}
					else {
						if (redLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 1)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 2)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 3)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 4)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 5)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 6)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
					}
				}
				else if (trash.x == 419 &&
						trashCan2Layer.x == 384){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
								(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
					}
					else {
						if (redLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 1)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 2)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 3)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 4)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 5)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (!(trashCan2Properties.getTrashCanColor() == 6)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
					}
				}
			} break;
			case 5: {

			} break;
			case 6: {

			} break;
			default: break;
			}
		}
		if (currentAbilityState3 == CURRENTABILITYSTATE3.ON){
			switch (trashCan3Properties.getTrashCan()){
			case 1: {
				if (trash.overlaps(trashCan3Indicator)){
					if (averageCount3 <= 1 && gluedTrashLayer != trash){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - junkWorldEngines.getTrashAccerleration());
						trash.y += (initialSpeed.get(trashLayer.indexOf(trash, true)) * Gdx.graphics.getDeltaTime());
					}
					else {
						currentAbilityState3 = CURRENTABILITYSTATE3.OFF;
					}
				}
			} break;
			case 2: {
				if (trash.overlaps(burnAbilityLayer3)){
					removeBurnedAbilityTrash(3, trash);
					initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
					trashLayer.removeValue(trash, true);
					breakLoop = true;
				}
			} break;
			case 3: {
				if (trash.x == 32 &&
						trashCan3Layer.x == 0){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
					}
					else {
						if (redLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 1){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 2){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 3){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 4){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 5){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 6){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
					}
				}
				else if (trash.x == 160 &&
						trashCan3Layer.x == 128){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
					}
					else {
						if (redLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 1){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 2){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 3){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 4){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 5){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 6){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
					}
				}
				else if (trash.x == 288 &&
						trashCan3Layer.x == 256){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
					}
					else {
						if (redLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 1){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 2){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 3){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 4){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 5){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 6){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
					}
				}
				else if (trash.x == 419 &&
						trashCan3Layer.x == 384){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
					}
					else {
						if (redLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 1){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 2){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 3){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 4){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 5){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (trashCan3Properties.getTrashCanColor() == 6){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
					}
				}
			} break;
			case 4: {
				if (trash.x == 32 &&
						trashCan3Layer.x == 0){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
								(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
					}
					else {
						if (redLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 1)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 2)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 3)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 4)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 5)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 6)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
					}
				}
				else if (trash.x == 160 &&
						trashCan3Layer.x == 128){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
								(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
					}
					else {
						if (redLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 1)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 2)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 3)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 4)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 5)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 6)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
					}
				}
				else if (trash.x == 288 &&
						trashCan3Layer.x == 256){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
								(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
					}
					else {
						if (redLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 1)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 2)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 3)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 4)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 5)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 6)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
					}
				}
				else if (trash.x == 419 &&
						trashCan3Layer.x == 384){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
								(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
					}
					else {
						if (redLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 1)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 2)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 3)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 4)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 5)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (!(trashCan3Properties.getTrashCanColor() == 6)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
					}
				}
			} break;
			case 5: {

			} break;
			case 6: {

			} break;
			default: break;
			}
		}
		if (currentAbilityState4 == CURRENTABILITYSTATE4.ON){
			switch (trashCan4Properties.getTrashCan()){
			case 1: {
				if (trash.overlaps(trashCan4Indicator)){
					if (averageCount4 <= 1 && gluedTrashLayer != trash){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - junkWorldEngines.getTrashAccerleration());
						trash.y += (initialSpeed.get(trashLayer.indexOf(trash, true)) * Gdx.graphics.getDeltaTime());
					}
					else {
						currentAbilityState4 = CURRENTABILITYSTATE4.OFF;
					}
				}
			} break;
			case 2: {
				if (trash.overlaps(burnAbilityLayer4)){
					removeBurnedAbilityTrash(4, trash);
					initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
					trashLayer.removeValue(trash, true);
					breakLoop = true;
				}
			} break;
			case 3: {
				if (trash.x == 32 &&
						trashCan4Layer.x == 0){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
					}
					else {
						if (redLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 1){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 2){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 3){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 4){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 5){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 6){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
					}
				}
				else if (trash.x == 160 &&
						trashCan4Layer.x == 128){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
					}
					else {
						if (redLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 1){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 2){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 3){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 4){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 5){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 6){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
					}
				}
				else if (trash.x == 288 &&
						trashCan4Layer.x == 256){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
					}
					else {
						if (redLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 1){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 2){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 3){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 4){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 5){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 6){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
					}
				}
				else if (trash.x == 419 &&
						trashCan4Layer.x == 384){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
					}
					else {
						if (redLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 1){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 2){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 3){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 4){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 5){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (trashCan4Properties.getTrashCanColor() == 6){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) + junkWorldEngines.getVacuumSuctionSpeed());
							}
						}
					}
				}
			} break;
			case 4: {
				if (trash.x == 32 &&
						trashCan4Layer.x == 0){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
								(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
					}
					else {
						if (redLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 1)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 2)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 3)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 4)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 5)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 6)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
					}
				}
				else if (trash.x == 160 &&
						trashCan4Layer.x == 128){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
								(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
					}
					else {
						if (redLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 1)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 2)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 3)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 4)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 5)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 6)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
					}
				}
				else if (trash.x == 288 &&
						trashCan4Layer.x == 256){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
								(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
					}
					else {
						if (redLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 1)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 2)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 3)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 4)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 5)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 6)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
					}
				}
				else if (trash.x == 419 &&
						trashCan4Layer.x == 384){
					if (burstModeButton != BurstModeButton.CLICKED){
						initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
								(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
					}
					else {
						if (redLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 1)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (orangeLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 2)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (yellowLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 3)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (greenLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 4)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (blueLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 5)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
						else if (purpleLayers.contains(trash, true)){
							if (!(trashCan4Properties.getTrashCanColor() == 6)){
								initialSpeed.set(trashLayer.indexOf(trash, true), initialSpeed.get(trashLayer.indexOf(trash, true)) - 
										(initialSpeed.get(trashLayer.indexOf(trash, true)) * junkWorldEngines.getTrashBlowerBlowSpeed()));
							}
						}
					}
				}
			} break;
			case 5: {

			} break;
			case 6: {

			} break;
			default: break;
			}
		}
	}

	private void checkIfIceFlake(Rectangle trash) {
		if (trash.overlaps(iceflakeLayers)){
			frozenTrashLayer.add(trash);
			delayDefroze = TimeUtils.millis();
		}
	}

	private void checkIfTrashOverlaps(Rectangle trash) {
		if ((trash.y + (trash.height * 2)) >= 616){
			if (trash.x == 32){
				junkWorldEngines.setOccupiedTrashCell1(true);
				occupied1 = true;
			}
			else if (trash.x == 160){
				junkWorldEngines.setOccupiedTrashCell2(true);
				occupied2 = true;
			}
			else if (trash.x == 288){
				junkWorldEngines.setOccupiedTrashCell3(true);
				occupied3 = true;
			}
			else if (trash.x == 419){
				junkWorldEngines.setOccupiedTrashCell4(true);
				occupied4 = true;
			}
		}
		else if ((trash.y + (trash.height * 2)) >= 552 &&
				(trash.y + (trash.height * 2)) < 616){
			if (trash.x == 32){
				junkWorldEngines.setOccupiedTrashCell5(true);
				occupied5 = true;
			}
			else if (trash.x == 160){
				junkWorldEngines.setOccupiedTrashCell6(true);
				occupied6 = true;
			}
			else if (trash.x == 288){
				junkWorldEngines.setOccupiedTrashCell7(true);
				occupied7 = true;
			}
			else if (trash.x == 419){
				junkWorldEngines.setOccupiedTrashCell8(true);
				occupied8 = true;
			}
		}
		else if ((trash.y + (trash.height * 2)) >= 488 &&
				(trash.y + (trash.height * 2)) < 552){
			if (trash.x == 32){
				junkWorldEngines.setOccupiedTrashCell9(true);
				occupied9 = true;
			}
			else if (trash.x == 160){
				junkWorldEngines.setOccupiedTrashCell10(true);
				occupied10 = true;
			}
			else if (trash.x == 288){
				junkWorldEngines.setOccupiedTrashCell11(true);
				occupied11 = true;
			}
			else if (trash.x == 419){
				junkWorldEngines.setOccupiedTrashCell12(true);
				occupied12 = true;
			}
		}
		else if ((trash.y + (trash.height * 2)) >= 424 &&
				(trash.y + (trash.height * 2)) < 488){
			if (trash.x == 32){
				junkWorldEngines.setOccupiedTrashCell13(true);
				occupied13 = true;
			}
			else if (trash.x == 160){
				junkWorldEngines.setOccupiedTrashCell14(true);
				occupied14 = true;
			}
			else if (trash.x == 288){
				junkWorldEngines.setOccupiedTrashCell15(true);
				occupied15 = true;
			}
			else if (trash.x == 419){
				junkWorldEngines.setOccupiedTrashCell16(true);
				occupied16 = true;
			}
		}
		else {
			if (!occupied1){
				junkWorldEngines.setOccupiedTrashCell1(false);
			}
			if (!occupied2){
				junkWorldEngines.setOccupiedTrashCell2(false);
			}
			if (!occupied3){
				junkWorldEngines.setOccupiedTrashCell3(false);
			}
			if (!occupied4){
				junkWorldEngines.setOccupiedTrashCell4(false);
			}
			if (!occupied5){
				junkWorldEngines.setOccupiedTrashCell5(false);
			}
			if (!occupied6){
				junkWorldEngines.setOccupiedTrashCell6(false);
			}
			if (!occupied7){
				junkWorldEngines.setOccupiedTrashCell7(false);
			}
			if (!occupied8){
				junkWorldEngines.setOccupiedTrashCell8(false);
			}
			if (!occupied9){
				junkWorldEngines.setOccupiedTrashCell9(false);
			}
			if (!occupied10){
				junkWorldEngines.setOccupiedTrashCell10(false);
			}
			if (!occupied11){
				junkWorldEngines.setOccupiedTrashCell11(false);
			}
			if (!occupied12){
				junkWorldEngines.setOccupiedTrashCell12(false);
			}
			if (!occupied13){
				junkWorldEngines.setOccupiedTrashCell13(false);
			}
			if (!occupied14){
				junkWorldEngines.setOccupiedTrashCell14(false);
			}
			if (!occupied15){
				junkWorldEngines.setOccupiedTrashCell15(false);
			}
			if (!occupied16){
				junkWorldEngines.setOccupiedTrashCell16(false);
			}
		}

		if (trashLayer.indexOf(trash, true) == trashLayer.indexOf(trashLayer.peek(), true)){
			occupied1 = false;
			occupied2 = false;
			occupied3 = false;
			occupied4 = false;
			occupied5 = false;
			occupied6 = false;
			occupied7 = false;
			occupied8 = false;
			occupied9 = false;
			occupied10 = false;
			occupied11 = false;
			occupied12 = false;
			occupied13 = false;
			occupied14 = false;
			occupied15 = false;
			occupied16 = false;
		}
	}

	private void checkIfTrashNotDumped(Rectangle trash) {
		if ((trash.y + (trash.height * 2)) < deviceHeight / 12){
			if (selectedTrash1 == trash && currentSelectedItem == CurrentSelectedItem.SWITCH_MACHINE && itemActive && delaySelectSecond != 0){
				itemActive = false;
				highlightFirstPick = false;
				delaySelectSecond = 0;
				setItemToCD();
			}
			initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
			trashLayer.removeValue(trash, true);
			perfectDumpNumCombo = 0;
			if (junkWorldEngines.getGameMode() != 0) notDumped += 1;
			breakLoop = true;
		}
	}

	private void checkIfBombOverlaps(Rectangle trash) {
		for (Rectangle bombs : bombLayers){
			if (bombs.overlaps(trash) &&
					delayBombPics.get(bombLayers.indexOf(bombs, true)) != 0 &&
					currentBombRegion.get(bombLayers.indexOf(bombs, true)) <= 1){
				drawBurnedTrash(bombLayers.indexOf(bombs, true), trash);
				if (selectedTrash1 == trash && currentSelectedItem == CurrentSelectedItem.SWITCH_MACHINE && itemActive && delaySelectSecond != 0){
					itemActive = false;
					highlightFirstPick = false;
					delaySelectSecond = 0;
					setItemToCD();
				}
				initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
				trashLayer.removeValue(trash, true);
				breakLoop = true;
				break;
			}
		}
	}

	private void moveTrash(final Rectangle trash) {
		if (gluedTrashLayer != trash && !(frozenTrashLayer.contains(trash, true))){
			initialSpeed.set(trashLayer.indexOf(trash, false), initialSpeed.get(trashLayer.indexOf(trash, false)) + junkWorldEngines.getTrashAccerleration());
			trash.y -= (initialSpeed.get(trashLayer.indexOf(trash, true)) * Gdx.graphics.getDeltaTime());
		}

		//			TODO
	}

	private void checkTrashDumps(Rectangle trash) {

		if (trash.overlaps(trashCan1Indicator) &&
				!(trashCan1Properties.getTrashCan() == 1 && currentAbilityState1 == CURRENTABILITYSTATE1.ON)){
			if (bLayers.contains(trash, true)){
				if (redLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 1 &&
							(trashCan1Properties.getTrashCanColor() == 1 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 1){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 1 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (orangeLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 1 &&
							(trashCan1Properties.getTrashCanColor() == 2 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 1){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 2 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (yellowLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 1 &&
							(trashCan1Properties.getTrashCanColor() == 3 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 1){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 3 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (greenLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 1 &&
							(trashCan1Properties.getTrashCanColor() == 4 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 1){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 4 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (blueLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 1 &&
							(trashCan1Properties.getTrashCanColor() == 5 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 1){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 5 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (purpleLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 1 &&
							(trashCan1Properties.getTrashCanColor() == 6 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 1){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 6 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
			}
			else if (rLayers.contains(trash, true)){
				if (redLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 2 &&
							(trashCan1Properties.getTrashCanColor() == 1 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 2){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 1 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (orangeLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 2 &&
							(trashCan1Properties.getTrashCanColor() == 2 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 2){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 2 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (yellowLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 2 &&
							(trashCan1Properties.getTrashCanColor() == 3 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 2){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 3 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (greenLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 2 &&
							(trashCan1Properties.getTrashCanColor() == 4 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 2){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 4 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							trashLayer.shrink();
							initialSpeed.shrink();
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (blueLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 2 &&
							(trashCan1Properties.getTrashCanColor() == 5 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 2){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 5 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (purpleLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 2 &&
							(trashCan1Properties.getTrashCanColor() == 6 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 2){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 6 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
			}
			if (nrLayers.contains(trash, true)){
				if (redLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 3 &&
							(trashCan1Properties.getTrashCanColor() == 1 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 3){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 1 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (orangeLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 3 &&
							(trashCan1Properties.getTrashCanColor() == 2 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 3){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 2 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (yellowLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 3 &&
							(trashCan1Properties.getTrashCanColor() == 3 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 3){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 3 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (greenLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 3 &&
							(trashCan1Properties.getTrashCanColor() == 4 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 3){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 4 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (blueLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 3 &&
							(trashCan1Properties.getTrashCanColor() == 5 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 3){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 5 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (purpleLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 3 &&
							(trashCan1Properties.getTrashCanColor() == 6 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7))){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(1);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanType() == 3){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(0) == 0 && trashCan1Properties.getTrashCan() == 6){
								delaySpeedRush.set(0, TimeUtils.millis());
								swiftCanPerfectDump.set(0, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan1Properties.getTrashCanColor() == 6 || (trashCan1Properties.getTrashCan() == 5 && trashCan1Properties.getTrashCanColor() == 7)){
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity1 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan1Capacity){
							currentCapacity1 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
			}
		}
		else if (trash.overlaps(trashCan2Indicator) &&
				!(trashCan2Properties.getTrashCan() == 1 && currentAbilityState2 == CURRENTABILITYSTATE2.ON)){
			if (bLayers.contains(trash, true)){
				if (redLayers.contains(trash, true)){
					if (trashCan2Properties.getTrashCanType() == 1 &&
							(trashCan2Properties.getTrashCanColor() == 1 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 1){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 1 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (orangeLayers.contains(trash, true)){
					if (trashCan2Properties.getTrashCanType() == 1 &&
							(trashCan2Properties.getTrashCanColor() == 2 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 1){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 2 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (yellowLayers.contains(trash, true)){
					if (trashCan2Properties.getTrashCanType() == 1 &&
							(trashCan2Properties.getTrashCanColor() == 3 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 1){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 3 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (greenLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 1 &&
							(trashCan2Properties.getTrashCanColor() == 4 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 1){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 4 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (blueLayers.contains(trash, true)){
					if (trashCan2Properties.getTrashCanType() == 1 &&
							(trashCan2Properties.getTrashCanColor() == 5 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 1){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;

						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 5 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (purpleLayers.contains(trash, true)){
					if (trashCan2Properties.getTrashCanType() == 1 &&
							(trashCan2Properties.getTrashCanColor() == 6 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 1){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 6 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
			}
			else if (rLayers.contains(trash, true)){
				if (redLayers.contains(trash, true)){
					if (trashCan2Properties.getTrashCanType() == 2 &&
							(trashCan2Properties.getTrashCanColor() == 1 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 2){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 1 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (orangeLayers.contains(trash, true)){
					if (trashCan2Properties.getTrashCanType() == 2 &&
							(trashCan2Properties.getTrashCanColor() == 2 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 2){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 2 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (yellowLayers.contains(trash, true)){
					if (trashCan2Properties.getTrashCanType() == 2 &&
							(trashCan2Properties.getTrashCanColor() == 3 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 2){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 3 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (greenLayers.contains(trash, true)){
					if (trashCan2Properties.getTrashCanType() == 2 &&
							(trashCan2Properties.getTrashCanColor() == 4 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 2){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 4 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (blueLayers.contains(trash, true)){
					if (trashCan2Properties.getTrashCanType() == 2 &&
							(trashCan2Properties.getTrashCanColor() == 5 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 2){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 5 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (purpleLayers.contains(trash, true)){
					if (trashCan2Properties.getTrashCanType() == 2 &&
							(trashCan2Properties.getTrashCanColor() == 6 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 2){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 6 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
			}
			else if (nrLayers.contains(trash, true)){
				if (redLayers.contains(trash, true)){
					if (trashCan2Properties.getTrashCanType() == 3 &&
							(trashCan2Properties.getTrashCanColor() == 1 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 3){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 1 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (orangeLayers.contains(trash, true)){
					if (trashCan2Properties.getTrashCanType() == 3 &&
							(trashCan2Properties.getTrashCanColor() == 2 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 3){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 2 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (yellowLayers.contains(trash, true)){
					if (trashCan2Properties.getTrashCanType() == 3 &&
							(trashCan2Properties.getTrashCanColor() == 3 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 3){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 3 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (greenLayers.contains(trash, true)){
					if (trashCan2Properties.getTrashCanType() == 3 &&
							(trashCan2Properties.getTrashCanColor() == 4 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 3){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 4 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (blueLayers.contains(trash, true)){
					if (trashCan2Properties.getTrashCanType() == 3 &&
							(trashCan2Properties.getTrashCanColor() == 5 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 3){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 5 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (purpleLayers.contains(trash, true)){
					if (trashCan2Properties.getTrashCanType() == 3 &&
							(trashCan2Properties.getTrashCanColor() == 6 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7))){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanType() == 3){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(1) == 0 && trashCan2Properties.getTrashCan() == 6){
								delaySpeedRush.set(1, TimeUtils.millis());
								swiftCanPerfectDump.set(1, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan2Properties.getTrashCanColor() == 6 || (trashCan2Properties.getTrashCan() == 5 && trashCan2Properties.getTrashCanColor() == 7)){
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity2 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan2Capacity){
							currentCapacity2 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
			}
		}
		else if (trash.overlaps(trashCan3Indicator) &&
				!(trashCan3Properties.getTrashCan() == 1 && currentAbilityState3 == CURRENTABILITYSTATE3.ON)){
			if (bLayers.contains(trash, true)){
				if (redLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 1 &&
							(trashCan3Properties.getTrashCanColor() == 1 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 1){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 1 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (orangeLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 1 &&
							(trashCan3Properties.getTrashCanColor() == 2 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 1){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 2 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (yellowLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 1 &&
							(trashCan3Properties.getTrashCanColor() == 3 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 1){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 3 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (greenLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 1 &&
							(trashCan3Properties.getTrashCanColor() == 4 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 1){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 4 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (blueLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 1 &&
							(trashCan3Properties.getTrashCanColor() == 5 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 1){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 5 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (purpleLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 1 &&
							(trashCan3Properties.getTrashCanColor() == 6 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 1){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 6 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
			}
			else if (rLayers.contains(trash, true)){
				if (redLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 2 &&
							(trashCan3Properties.getTrashCanColor() == 1 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 2){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 1 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (orangeLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 2 &&
							(trashCan3Properties.getTrashCanColor() == 2 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 2){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 2 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (yellowLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 2 &&
							(trashCan3Properties.getTrashCanColor() == 3 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 2){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 3 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (greenLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 2 &&
							(trashCan3Properties.getTrashCanColor() == 4 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 2){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 4 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (blueLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 2 &&
							(trashCan3Properties.getTrashCanColor() == 5 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 2){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 5 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (purpleLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 2 &&
							(trashCan3Properties.getTrashCanColor() == 6 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 2){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 6 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
			}
			else if (nrLayers.contains(trash, true)){
				if (redLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 3 &&
							(trashCan3Properties.getTrashCanColor() == 1 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 3){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 1 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (orangeLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 3 &&
							(trashCan3Properties.getTrashCanColor() == 2 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 3){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 2 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (yellowLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 3 &&
							(trashCan3Properties.getTrashCanColor() == 3 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 3){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 3 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (greenLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 3 &&
							(trashCan3Properties.getTrashCanColor() == 4 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 3){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 4 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (blueLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 3 &&
							(trashCan3Properties.getTrashCanColor() == 5 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 3){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 5 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (purpleLayers.contains(trash, true)){
					if (trashCan3Properties.getTrashCanType() == 3 &&
							(trashCan3Properties.getTrashCanColor() == 6 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7))){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(3);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanType() == 3){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(2) == 0 && trashCan3Properties.getTrashCan() == 6){
								delaySpeedRush.set(2, TimeUtils.millis());
								swiftCanPerfectDump.set(2, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan3Properties.getTrashCanColor() == 6 || (trashCan3Properties.getTrashCan() == 5 && trashCan3Properties.getTrashCanColor() == 7)){
						if ((currentCapacity3+ trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity3 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan3Capacity){
							currentCapacity3 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
			}
		}
		else if (trash.overlaps(trashCan4Indicator) &&
				!(trashCan4Properties.getTrashCan() == 1 && currentAbilityState4 == CURRENTABILITYSTATE4.ON)){
			if (bLayers.contains(trash, true)){
				if (redLayers.contains(trash, true)){
					if (trashCan4Properties.getTrashCanType() == 1 &&
							(trashCan4Properties.getTrashCanColor() == 1 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 1){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 1 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (orangeLayers.contains(trash, true)){
					if (trashCan4Properties.getTrashCanType() == 1 &&
							(trashCan4Properties.getTrashCanColor() == 2 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 1){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 2 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (yellowLayers.contains(trash, true)){
					if (trashCan4Properties.getTrashCanType() == 1 &&
							(trashCan4Properties.getTrashCanColor() == 3 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 1){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 3 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (greenLayers.contains(trash, true)){
					if (trashCan1Properties.getTrashCanType() == 1 &&
							(trashCan4Properties.getTrashCanColor() == 4 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 1){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 4 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (blueLayers.contains(trash, true)){
					if (trashCan4Properties.getTrashCanType() == 1 &&
							(trashCan4Properties.getTrashCanColor() == 5 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 1){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;

						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 5 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (purpleLayers.contains(trash, true)){
					if (trashCan4Properties.getTrashCanType() == 1 &&
							(trashCan4Properties.getTrashCanColor() == 6 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 1){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 6 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
			}
			else if (rLayers.contains(trash, true)){
				if (redLayers.contains(trash, true)){
					if (trashCan4Properties.getTrashCanType() == 2 &&
							(trashCan4Properties.getTrashCanColor() == 1 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 2){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 1 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (orangeLayers.contains(trash, true)){
					if (trashCan4Properties.getTrashCanType() == 2 &&
							(trashCan4Properties.getTrashCanColor() == 2 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 2){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 2 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (yellowLayers.contains(trash, true)){
					if (trashCan4Properties.getTrashCanType() == 2 &&
							(trashCan4Properties.getTrashCanColor() == 3 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 2){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 3 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (greenLayers.contains(trash, true)){
					if (trashCan4Properties.getTrashCanType() == 2 &&
							(trashCan4Properties.getTrashCanColor() == 4 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 2){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 4 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (blueLayers.contains(trash, true)){
					if (trashCan4Properties.getTrashCanType() == 2 &&
							(trashCan4Properties.getTrashCanColor() == 5 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 2){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 5 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (purpleLayers.contains(trash, true)){
					if (trashCan4Properties.getTrashCanType() == 2 &&
							(trashCan4Properties.getTrashCanColor() == 6 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 2){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 6 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
			}
			else if (nrLayers.contains(trash, true)){
				if (redLayers.contains(trash, true)){
					if (trashCan4Properties.getTrashCanType() == 3 &&
							(trashCan4Properties.getTrashCanColor() == 1 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 3){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 1 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (orangeLayers.contains(trash, true)){
					if (trashCan4Properties.getTrashCanType() == 3 &&
							(trashCan4Properties.getTrashCanColor() == 2 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 3){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 2 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (yellowLayers.contains(trash, true)){
					if (trashCan4Properties.getTrashCanType() == 3 &&
							(trashCan4Properties.getTrashCanColor() == 3 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 3){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 3 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (greenLayers.contains(trash, true)){
					if (trashCan4Properties.getTrashCanType() == 3 &&
							(trashCan4Properties.getTrashCanColor() == 4 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 3){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 4 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (blueLayers.contains(trash, true)){
					if (trashCan4Properties.getTrashCanType() == 3 &&
							(trashCan4Properties.getTrashCanColor() == 5 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 3){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 5 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
				else if (purpleLayers.contains(trash, true)){
					if (trashCan4Properties.getTrashCanType() == 3 &&
							(trashCan4Properties.getTrashCanColor() == 6 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7))){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true))) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true));
							unlockTrashAlbum(trash);
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = true;
							perfectDumpNumCombo += 1;
							highestPerfectDumpCombo.add(perfectDumpNumCombo);
							currentPerfectDumpNumCombo = perfectDumpNumCombo;
							delayPerfectDumpCombo = TimeUtils.millis();
							perfectDump += 1;
							delayDump = 0;
							scoring(3);
							delayDullColor(4);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, true);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanType() == 3){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 1) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							dump += 1;
							delayDump = TimeUtils.millis();
							currentDumpPopuUp = dumpPopUpsRegions.random();
							scoring(2);
							if (delaySpeedRush.get(3) == 0 && trashCan4Properties.getTrashCan() == 6){
								delaySpeedRush.set(3, TimeUtils.millis());
								swiftCanPerfectDump.set(3, false);
							}
							breakLoop = true;
						}
					}
					else if (trashCan4Properties.getTrashCanColor() == 6 || (trashCan4Properties.getTrashCan() == 5 && trashCan4Properties.getTrashCanColor() == 7)){
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 2) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 2;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							delayPerfectCombo = false;
							perfectDumpNumCombo = 0;
							unofficialDump += 1;
							delayDump = 0;
							scoring(1);
							breakLoop = true;
						}
					}
					else {
						if ((currentCapacity4 + trashValue.get(trashLayer.indexOf(trash, true)) + 4) <= trashCan4Capacity){
							currentCapacity4 += trashValue.get(trashLayer.indexOf(trash, true)) + 4;
							badDump += 1;
							initialSpeed.removeIndex(trashLayer.indexOf(trash, true));
							trashLayer.removeValue(trash, true);
							breakLoop = true;
						}
					}
				}
			}
		}
	}
	//		TODO trash can value
	private void setTrashValue(Rectangle trash) {
		for (int i = startingValue; i < trashLayer.size; i++){
			trashValue.add(0);
			startingValue = trashLayer.size;
		}
		if (acornLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getAcornValue());
		}
		else if (appleLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getAppleValue());
		}
		else if (bananaPeelLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getBananaPeelValue());
		}
		else if (branchLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getBranchValue());
		}
		else if (deadMouseLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getDeadMouseValue());
		}
		else if (eggShellLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getEggShellValue());
		}
		else if (featherLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getFeatherValue());
		}
		else if (fishBoneLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getFishBoneValue());
		}
		else if (flowerLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getFlowerValue());
		}
		else if (grassLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getGrassValue());
		}
		else if (hairLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getHairValue());
		}
		else if (hayLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getHayValue());
		}
		else if (leavesLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getLeavesValue());
		}
		else if (manureLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getManureValue());
		}
		else if (rootsLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getRootsValue());
		}
		else if (bottleLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getBottleValue());
		}
		else if (canLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getCanValue());
		}
		else if (cardboardLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getCardboardValue());
		}
		else if (cerealBoxLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getCerealBoxValue());
		}
		else if (dirtyShirtLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getDirtyShirtValue());
		}
		else if (envelopeLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getEnvelopeValue());
		}
		else if (funnelLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getFunnelValue());
		}
		else if (hangerLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getHangerValue());
		}
		else if (newspaperLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getNewspaperValue());
		}
		else if (paperLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getPaperValue());
		}
		else if (pillBottleLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getPillBottleValue());
		}
		else if (plasticBagLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getPlasticBagValue());
		}
		else if (tyreLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getTyreValue());
		}
		else if (vaseLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getVaseValue());
		}
		else if (waffleIronLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getWaffleIronValue());
		}
		else if (aerosolCanLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getAerosolCanValue());
		}
		else if (brokenBulbLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getBrokenBulbValue());
		}
		else if (brokenGlassLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getBrokenGlassValue());
		}
		else if (chewingGumLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getChewingGumValue());
		}
		else if (cigaretteLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getCigaretteValue());
		}
		else if (deadBatteryLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getDeadBatteryValue());
		}
		else if (dirtyDiaperLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getDirtyDiaperValue());
		}
		else if (insecticideSprayLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getInsecticideSprayValue());
		}
		else if (leftoverCakeLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getLeftoverCakeValue());
		}
		else if (leftoverChickenLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getLeftoverChickenValue());
		}
		else if (nailLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getNailValue());
		}
		else if (paintCanLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getPaintCanValue());
		}
		else if (syringeLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getSyringeValue());
		}
		else if (tornPaperLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getTornPaperValue());
		}
		else if (usedMotorOilLayer.contains(trash, true)){
			trashValue.set(trashLayer.indexOf(trash, true), junkWorldEngines.getUsedMotorOilValue());
		}
	}

	private void gdxInputs() {
		if (Gdx.input.justTouched()) {
			if (junkWorldEngines.isClickableCol()) {
				junkWorldEngines.setClickableCol(false);
				updateEngines((int) touchPos.x, (int) touchPos.y);
				updateMechanics();
				moveTrashCan((int) touchPos.y);
			}

			if (itemActive){
				switch (currentSelectedItem){
				case NONE: {

				}; break;
				case BOMB: {
					itemActive = false;
					if (touchPos.y >= trashCan1Layer.y + trashCan1Layer.height &&
							touchPos.y < 616 + 64){
						manager.get("audioAssets/sound/bomb.ogg", Sound.class).play();
						switch (currentItemSlotSelected){
						case FIRST: {
							delayItem1CD = TimeUtils.millis();
							currentItem1State = CurrentItem1State.COOLDOWN;
							currentItemSlotSelected = CurrentItemSlotSelected.NONE;
							currentSelectedItem = CurrentSelectedItem.NONE;
							bombLayers.get(0).set(touchPos.x - 100, touchPos.y - 100, 200, 200);
							delayBombPics.set(0, TimeUtils.millis());
						}; break;
						case SECOND: {
							delayItem2CD = TimeUtils.millis();
							currentItem2State = CurrentItem2State.COOLDOWN;
							currentItemSlotSelected = CurrentItemSlotSelected.NONE;
							currentSelectedItem = CurrentSelectedItem.NONE;
							bombLayers.get(1).set(touchPos.x - 100, touchPos.y - 100, 200, 200);
							delayBombPics.set(1, TimeUtils.millis());
						}; break;
						case THIRD: {
							delayItem3CD = TimeUtils.millis();
							currentItem3State = CurrentItem3State.COOLDOWN;
							currentItemSlotSelected = CurrentItemSlotSelected.NONE;
							currentSelectedItem = CurrentSelectedItem.NONE;
							bombLayers.get(2).set(touchPos.x - 100, touchPos.y - 100, 200, 200);
							delayBombPics.set(2, TimeUtils.millis());
						}; break;
						case FOURTH: {
							delayItem4CD = TimeUtils.millis();
							currentItem4State = CurrentItem4State.COOLDOWN;
							currentItemSlotSelected = CurrentItemSlotSelected.NONE;
							currentSelectedItem = CurrentSelectedItem.NONE;
							bombLayers.get(3).set(touchPos.x - 100, touchPos.y - 100, 200, 200);
							delayBombPics.set(3, TimeUtils.millis());
						}; break;
						case FIFTH: {
							delayItem5CD = TimeUtils.millis();
							currentItem5State = CurrentItem5State.COOLDOWN;
							currentItemSlotSelected = CurrentItemSlotSelected.NONE;
							currentSelectedItem = CurrentSelectedItem.NONE;
							bombLayers.get(4).set(touchPos.x - 100, touchPos.y - 100, 200, 200);
							delayBombPics.set(4, TimeUtils.millis());
						}; break;
						case SIXTH: {
							delayItem6CD = TimeUtils.millis();
							currentItem6State = CurrentItem6State.COOLDOWN;
							currentItemSlotSelected = CurrentItemSlotSelected.NONE;
							currentSelectedItem = CurrentSelectedItem.NONE;
							bombLayers.get(5).set(touchPos.x - 100, touchPos.y - 100, 200, 200);
							delayBombPics.set(5, TimeUtils.millis());
						}; break;
						default: break;
						}
					}
					else {
						itemActiveReset();
					}
				}; break;
				case FLYSWATTER: {

				}; break;
				case ICEFLAKE: {
					itemActive = false;
					if (touchPos.y >= trashCan1Layer.y + trashCan1Layer.height &&
							touchPos.y < 616 + 64){
						manager.get("audioAssets/sound/iceflake.ogg", Sound.class).play();
						switch (currentItemSlotSelected){
						case FIRST: {
							delayItem1CD = TimeUtils.millis();
							currentItem1State = CurrentItem1State.COOLDOWN;
							currentItemSlotSelected = CurrentItemSlotSelected.NONE;
							currentSelectedItem = CurrentSelectedItem.NONE;
							iceflakeLayers.set(touchPos.x - 125, touchPos.y - 125, 250, 250);
							delayIceflakePics = TimeUtils.millis();
						}; break;
						case SECOND: {
							delayItem2CD = TimeUtils.millis();
							currentItem2State = CurrentItem2State.COOLDOWN;
							currentItemSlotSelected = CurrentItemSlotSelected.NONE;
							currentSelectedItem = CurrentSelectedItem.NONE;
							iceflakeLayers.set(touchPos.x - 125, touchPos.y - 125, 250, 250);
							delayIceflakePics = TimeUtils.millis();
						}; break;
						case THIRD: {
							delayItem3CD = TimeUtils.millis();
							currentItem3State = CurrentItem3State.COOLDOWN;
							currentItemSlotSelected = CurrentItemSlotSelected.NONE;
							currentSelectedItem = CurrentSelectedItem.NONE;
							iceflakeLayers.set(touchPos.x - 125, touchPos.y - 125, 250, 250);
							delayIceflakePics = TimeUtils.millis();
						}; break;
						case FOURTH: {
							delayItem4CD = TimeUtils.millis();
							currentItem4State = CurrentItem4State.COOLDOWN;
							currentItemSlotSelected = CurrentItemSlotSelected.NONE;
							currentSelectedItem = CurrentSelectedItem.NONE;
							iceflakeLayers.set(touchPos.x - 125, touchPos.y - 125, 250, 250);
							delayIceflakePics = TimeUtils.millis();
						}; break;
						case FIFTH: {
							delayItem5CD = TimeUtils.millis();
							currentItem5State = CurrentItem5State.COOLDOWN;
							currentItemSlotSelected = CurrentItemSlotSelected.NONE;
							currentSelectedItem = CurrentSelectedItem.NONE;
							iceflakeLayers.set(touchPos.x - 125, touchPos.y - 125, 250, 250);
							delayIceflakePics = TimeUtils.millis();
						}; break;
						case SIXTH: {
							delayItem6CD = TimeUtils.millis();
							currentItem6State = CurrentItem6State.COOLDOWN;
							currentItemSlotSelected = CurrentItemSlotSelected.NONE;
							currentSelectedItem = CurrentSelectedItem.NONE;
							iceflakeLayers.set(touchPos.x - 125, touchPos.y - 125, 250, 250);
							delayIceflakePics = TimeUtils.millis();
						}; break;
						default: break;
						}
					}
					else {
						itemActiveReset();
					}
				}; break;
				case ELECTRIC_ZAPPER: {

				}; break;
				case ACCELERATOR: {

				}; break;
				case ACCELERATOR_X: {

				}; break;
				case STEEL_FLYSWATTER: {

				}; break;
				case GLUE: {
					itemActive = false;
					if (touchPos.y >= trashCan1Layer.y + trashCan1Layer.height &&
							touchPos.y < 616 + 64){
						for (Rectangle trash : trashLayer){
							if (touchPos.x >= trash.x && touchPos.x < trash.x + trash.width &&
									touchPos.y >= trash.y && touchPos.y < trash.y + (trash.height * 2)){
								manager.get("audioAssets/sound/glue.ogg", Sound.class).play();
								setItemToCD();
								gluedTrashLayer = trash;
								delayGluedTrash = TimeUtils.millis();
								break;
							}
							else {
								if (trashLayer.indexOf(trash, true) + 1 == trashLayer.size){
									itemActiveReset();
									break;
								}
							}
						}
					}
					else {
						itemActiveReset();
					}
				}; break;
				case ITEM_RESTORE: {

				}; break;
				case SUPER_GLUE: {

				}; break;
				case WIND_VANE: {

				}; break;
				case SWITCH_MACHINE: {
					if (touchPos.y >= trashCan1Layer.y + trashCan1Layer.height &&
							touchPos.y < 616 + 64){
						if (delaySelectSecond == 0){
							for (Rectangle trash : trashLayer){
								if (touchPos.x >= trash.x && touchPos.x < trash.x + trash.width &&
										touchPos.y >= trash.y && touchPos.y < trash.y + (trash.height * 2)){
									selectedTrash1 = trash;
									highlightFirstPick = true;
									delaySelectSecond = TimeUtils.millis();
									break;
								}
								else {
									if (trash == trashLayer.peek()){
										itemActive = false;
										highlightFirstPick = false;
										itemActiveReset();
										break;
									}
								}
							}
						}
					}
					else {
						itemActive = false;
						highlightFirstPick = false;
						delaySelectSecond = 0;
						itemActiveReset();
					}

					if (delaySelectSecond != 0){
						if (TimeUtils.millis() - delaySelectSecond >= 200){
							if (touchPos.y >= trashCan1Layer.y + trashCan1Layer.height &&
									touchPos.y < 616 + 64){
								for (Rectangle trash : trashLayer){
									if (touchPos.x >= trash.x && touchPos.x < trash.x + trash.width &&
											touchPos.y >= trash.y && touchPos.y < trash.y + (trash.height * 2)){
										manager.get("audioAssets/sound/switchMachine.ogg", Sound.class).play();
										itemActive = false;
										delaySelectSecond = 0;
										highlightFirstPick = false;
										initialSpeed.swap(trashLayer.indexOf(trash, true), trashLayer.indexOf(selectedTrash1, true));
										selectedTrash2.set(trash);
										trashLayer.get(trashLayer.indexOf(trash, true)).set(selectedTrash1);
										trashLayer.get(trashLayer.indexOf(selectedTrash1, true)).set(selectedTrash2);
										setItemToCD();
										break;
									}
									else {
										if (trash == trashLayer.peek()){
											itemActive = false;
											highlightFirstPick = false;
											delaySelectSecond = 0;
											itemActiveReset();
											break;
										}
									}
								}
							}
							else {
								itemActive = false;
								highlightFirstPick = false;
								delaySelectSecond = 0;
							}
						}
					}
				}; break;

				//				TODO
				case AUGMENTED_BURST: {
					itemActive = false;
					disallow = true;
					if (touchPos.x >= trashCan1Layer.x && touchPos.x < trashCan1Layer.x + trashCan1Layer.width && touchPos.y >= trashCan1Layer.y && 
							touchPos.y < trashCan1Layer.y + trashCan1Layer.height && !trashCan1Used && !moveTrashCan1 && !unclickableCan1 && 
							burstModeButton != BurstModeButton.CLICKED){
						manager.get("audioAssets/sound/augmentedBurst.ogg", Sound.class).play();
						delayUnaugmentCans = TimeUtils.millis();
						augmentCan1 = true;
						setItemToCD();
						delayReUpdateStates = TimeUtils.nanoTime();
					}
					else if (touchPos.x >= trashCan2Layer.x && touchPos.x < trashCan2Layer.x + trashCan2Layer.width && touchPos.y >= trashCan2Layer.y && 
							touchPos.y < trashCan2Layer.y + trashCan2Layer.height && !trashCan2Used && !moveTrashCan2 && !unclickableCan2 && 
							burstModeButton != BurstModeButton.CLICKED){
						manager.get("audioAssets/sound/augmentedBurst.ogg", Sound.class).play();
						delayUnaugmentCans = TimeUtils.millis();
						augmentCan2 = true;
						setItemToCD();
						delayReUpdateStates = TimeUtils.nanoTime();
					}
					else if(touchPos.x >= trashCan3Layer.x && touchPos.x < trashCan3Layer.x + trashCan3Layer.width && touchPos.y >= trashCan3Layer.y &&
							touchPos.y < trashCan3Layer.y + trashCan3Layer.height && !trashCan3Used && !moveTrashCan3 && !unclickableCan3 && 
							burstModeButton != BurstModeButton.CLICKED){
						manager.get("audioAssets/sound/augmentedBurst.ogg", Sound.class).play();
						delayUnaugmentCans = TimeUtils.millis();
						augmentCan3 = true;
						setItemToCD();
						delayReUpdateStates = TimeUtils.nanoTime();
					}
					else if (touchPos.x >= trashCan4Layer.x && touchPos.x < trashCan4Layer.x + trashCan4Layer.width && touchPos.y >= trashCan4Layer.y && 
							touchPos.y < trashCan4Layer.y + trashCan4Layer.height && !trashCan4Used && !moveTrashCan4 && !unclickableCan4 && 
							burstModeButton != BurstModeButton.CLICKED){
						manager.get("audioAssets/sound/augmentedBurst.ogg", Sound.class).play();
						augmentCan4 = true;
						setItemToCD();
						delayReUpdateStates = TimeUtils.nanoTime();
					}
					else {
						itemActiveReset();
					}
					disallow = false;
				}; break;
				case STICKER: {

				}; break;
				default: break;
				}
			}
		}
	}

	private void drawTutorials(){
		if (junkWorldEngines.getGameMode() == 0){
			if (TimeUtils.millis() - delayTutoralArrow >= 800){
				delayTutoralArrow = TimeUtils.millis();
				if (junkWorldEngines.getCurrentArrowNum() + 1 == 3){
					junkWorldEngines.setCurrentArrowNum(0);
				} else junkWorldEngines.setCurrentArrowNum(junkWorldEngines.getCurrentArrowNum() + 1);
			}
			junkWorldEngines.getCurrentArrow().setTexture(manager.get("gameScreenAssets/tutorialAssets/arrow" 
					+ junkWorldEngines.getCurrentArrowNum() + ".png", Texture.class));

			switch (junkWorldEngines.getCurrentTutorial()){
			case 10: {
				junkWorldEngines.getTutorialLayer().setPosition(256 - 160, 400 - 160);
				junkWorldEngines.getClickContinueTutorial().setTouchable(Touchable.enabled);
				trashCan1Input.setTouchable(Touchable.disabled);
				trashCan2Input.setTouchable(Touchable.disabled);
				trashCan3Input.setTouchable(Touchable.disabled);
				trashCan4Input.setTouchable(Touchable.disabled);
				dumpster.setTouchable(Touchable.disabled);
				burstMode.setTouchable(Touchable.disabled);
				selection1.setTouchable(Touchable.disabled);
				selection2.setTouchable(Touchable.disabled);
				selection3.setTouchable(Touchable.disabled);
				selection4.setTouchable(Touchable.disabled);
				toColorOrTypeSelection.setTouchable(Touchable.disabled);
				toAbilitySelection.setTouchable(Touchable.disabled);
				selection1.setTouchable(Touchable.disabled);
				selection1.setTouchable(Touchable.disabled);
			}; break;
			case 11: {
				junkWorldEngines.getTutorialLayer().setPosition(50, 300);
			}; break;
			case 12: {
				junkWorldEngines.getTutorialLayer().setPosition(512 - 330, 200);
			}; break;
			case 13: {
				if (tutor){
					tutor = false;
					tutorialSet = true;
				}
				junkWorldEngines.getTutorialLayer().setPosition(100, 400);
				trashCan1Input.setTouchable(Touchable.enabled);
				trashCan2Input.setTouchable(Touchable.enabled);
				trashCan3Input.setTouchable(Touchable.enabled);
				trashCan4Input.setTouchable(Touchable.enabled);
				junkWorldEngines.getClickContinueTutorial().setTouchable(Touchable.disabled);
			}; break;
			case 14: {
				junkWorldEngines.getTutorialLayer().setPosition(40, 60);
				trashCan1Input.setTouchable(Touchable.disabled);
				trashCan2Input.setTouchable(Touchable.disabled);
				trashCan3Input.setTouchable(Touchable.disabled);
				trashCan4Input.setTouchable(Touchable.disabled);
				junkWorldEngines.getClickContinueTutorial().setTouchable(Touchable.enabled);
			}; break;
			case 15: {
				junkWorldEngines.getTutorialLayer().setPosition(120, 30);
			}; break;
			case 16: {
				junkWorldEngines.getTutorialLayer().setPosition(512 - 320, 800 - 320);
			}; break;
			case 17: {
				junkWorldEngines.getTutorialLayer().setPosition(64, 320);
			}; break;
			case 18: {
				junkWorldEngines.getTutorialLayer().setPosition(5, 290);
			}; break;
			case 19: {
				junkWorldEngines.getTutorialLayer().setPosition(120, 30);
				junkWorldEngines.getClickContinueTutorial().setTouchable(Touchable.disabled);
				trashCan1Input.setTouchable(Touchable.enabled);
				trashCan2Input.setTouchable(Touchable.enabled);
				trashCan3Input.setTouchable(Touchable.enabled);
				trashCan4Input.setTouchable(Touchable.enabled);
				dumpster.setTouchable(Touchable.enabled);
				junkWorldEngines.getCurrentArrow().setPosition(10 + 16, 800 - 110 - 64);
				junkWorldEngines.getCurrentArrow().setRotation(0);
				junkWorldEngines.getCurrentArrow().draw(batch);
			}; break;
			case 20: {
				junkWorldEngines.getTutorialLayer().setPosition(96, 300);
				junkWorldEngines.getClickContinueTutorial().setTouchable(Touchable.enabled);
				trashCan1Input.setTouchable(Touchable.disabled);
				trashCan2Input.setTouchable(Touchable.disabled);
				trashCan3Input.setTouchable(Touchable.disabled);
				trashCan4Input.setTouchable(Touchable.disabled);
				dumpster.setTouchable(Touchable.disabled);
			}; break;
			case 21: {
				junkWorldEngines.getTutorialLayer().setPosition(110, 310);
				junkWorldEngines.getClickContinueTutorial().setTouchable(Touchable.disabled);
				trashCan1Input.setTouchable(Touchable.enabled);
				trashCan2Input.setTouchable(Touchable.enabled);
				trashCan3Input.setTouchable(Touchable.enabled);
				trashCan4Input.setTouchable(Touchable.enabled);
				selection1.setTouchable(Touchable.enabled);
				selection2.setTouchable(Touchable.enabled);
				selection3.setTouchable(Touchable.enabled);
				selection4.setTouchable(Touchable.enabled);
				junkWorldEngines.getCurrentArrow().setPosition(194 + 128 + 32, 3 + 64 + 50);
				junkWorldEngines.getCurrentArrow().setRotation(180);
				junkWorldEngines.getCurrentArrow().draw(batch);
			}; break;
			case 22: {
				junkWorldEngines.getTutorialLayer().setPosition(100, 285);
				junkWorldEngines.getClickContinueTutorial().setTouchable(Touchable.disabled);
				trashCan1Input.setTouchable(Touchable.disabled);
				trashCan2Input.setTouchable(Touchable.disabled);
				trashCan3Input.setTouchable(Touchable.disabled);
				trashCan4Input.setTouchable(Touchable.disabled);
				selection1.setTouchable(Touchable.disabled);
				selection2.setTouchable(Touchable.disabled);
				selection3.setTouchable(Touchable.disabled);
				selection4.setTouchable(Touchable.disabled);
				toColorOrTypeSelection.setTouchable(Touchable.enabled);
				junkWorldEngines.getCurrentArrow().setPosition(194, 3 + 90);
				junkWorldEngines.getCurrentArrow().setRotation(180);
				junkWorldEngines.getCurrentArrow().draw(batch);
			}; break;
			case 23: {
				junkWorldEngines.getTutorialLayer().setPosition(99, 512 - 320);
				toColorOrTypeSelection.setTouchable(Touchable.disabled);
				trashCan1Input.setTouchable(Touchable.enabled);
				trashCan2Input.setTouchable(Touchable.enabled);
				trashCan3Input.setTouchable(Touchable.enabled);
				trashCan4Input.setTouchable(Touchable.enabled);
				selection1.setTouchable(Touchable.enabled);
				selection2.setTouchable(Touchable.enabled);
				selection3.setTouchable(Touchable.enabled);
				selection4.setTouchable(Touchable.enabled);
			}; break;
			case 24: {
				junkWorldEngines.getTutorialLayer().setPosition(0, 512 - 320);
				toColorOrTypeSelection.setTouchable(Touchable.disabled);
				trashCan1Input.setTouchable(Touchable.disabled);
				trashCan2Input.setTouchable(Touchable.disabled);
				trashCan3Input.setTouchable(Touchable.disabled);
				trashCan4Input.setTouchable(Touchable.disabled);
				selection1.setTouchable(Touchable.disabled);
				selection2.setTouchable(Touchable.disabled);
				selection3.setTouchable(Touchable.disabled);
				selection4.setTouchable(Touchable.disabled);
				toAbilitySelection.setTouchable(Touchable.enabled);
				junkWorldEngines.getCurrentArrow().setPosition(130, 3 + 90);
				junkWorldEngines.getCurrentArrow().setRotation(180);
				junkWorldEngines.getCurrentArrow().draw(batch);
			}; break;
			case 25: {
				junkWorldEngines.getTutorialLayer().setPosition(2, 512 - 320);
				toAbilitySelection.setTouchable(Touchable.disabled);
				selection1.setTouchable(Touchable.enabled);
				selection2.setTouchable(Touchable.enabled);
				selection3.setTouchable(Touchable.enabled);
				selection4.setTouchable(Touchable.enabled);
				junkWorldEngines.getCurrentArrow().setPosition(194 + 128 + 32, 3 + 64 + 50);
				junkWorldEngines.getCurrentArrow().setRotation(180);
				junkWorldEngines.getCurrentArrow().draw(batch);
			}; break;
			case 26: {
				junkWorldEngines.getTutorialLayer().setPosition(42, 512 - 320);
				selection1.setTouchable(Touchable.disabled);
				selection2.setTouchable(Touchable.disabled);
				selection3.setTouchable(Touchable.disabled);
				selection4.setTouchable(Touchable.disabled);
				trashCan1Input.setTouchable(Touchable.enabled);
				trashCan2Input.setTouchable(Touchable.enabled);
				trashCan3Input.setTouchable(Touchable.enabled);
				trashCan4Input.setTouchable(Touchable.enabled);
				junkWorldEngines.getCurrentArrow().setPosition(194 + 128 + 32, 3 + 64 + 50);
				junkWorldEngines.getCurrentArrow().setRotation(180);
				junkWorldEngines.getCurrentArrow().draw(batch);
			}; break;
			case 27: {
				junkWorldEngines.getTutorialLayer().setPosition(84, 392);
				burstMode.setTouchable(Touchable.enabled);
				junkWorldEngines.getCurrentArrow().setPosition(2 + 30, 3 + 90);
				junkWorldEngines.getCurrentArrow().setRotation(180);
				junkWorldEngines.getCurrentArrow().draw(batch);
			}; break;
			case 28: {
				junkWorldEngines.getTutorialLayer().setPosition(512 - 320, 400 - 160);
				burstMode.setTouchable(Touchable.disabled);
			}; break;
			default: break;
			}
			batch.draw(junkWorldEngines.getTutorial().get(junkWorldEngines.getCurrentTutorial()),
					junkWorldEngines.getTutorialLayer().x, junkWorldEngines.getTutorialLayer().y);
			junkWorldEngines.getQuitTutorial().setBounds(junkWorldEngines.getTutorialLayer().x, junkWorldEngines.getTutorialLayer().y, 120, 50);
		}
	}

	private float averageRating(float[] roundRating){
		float sum = 0;
		int count = 0;
		for (float rating : roundRating){
			if (rating != 0f){
				count += 1;
				sum += rating;
			}
		}
		return sum / count;
	}

	private void garbageReachedLimit(){
		jsonValue.get("triesLeft").set(jsonValue.getInt("triesLeft") - 1, null);
		if (jsonValue.getInt("triesLeft") == 0){
			highestPerfectDumpCombo.sort();
			if (jsonValue.getInt("jobHighestPerfectCombo") < highestPerfectDumpCombo.peek()){
				jsonValue.get("jobHighestPerfectCombo").set(highestPerfectDumpCombo.peek(), null);
			}
			jsonValue.get("jobTotalPerfectDump").set(jsonValue.getInt("jobTotalPerfectDump") + perfectDump, null);
			jsonValue.get("jobTotalDump").set(jsonValue.getInt("jobTotalDump") + dump, null);
			jsonValue.get("jobTotalUnofficialDump").set(jsonValue.getInt("jobTotalUnofficialDump") + unofficialDump, null);
			jsonValue.get("jobTotalNotDumped").set(jsonValue.getInt("jobTotalNotDumped") + notDumped, null);

			rating = (float) (((float)perfectDump + ((float)dump * 0.6) + ((float)unofficialDump * 0.3))/
					((float)perfectDump + (float)dump  + (float)unofficialDump + (float)badDump + (float)notDumped) * 10);
			jsonValue.get("jobRoundRatings").get(jsonValue.getInt("currentRound") - 1).set(rating, null);

			jsonValue.get("junkCoins").set(jsonValue.getInt("junkCoins") - ((jsonValue.getInt("fee") * 2) / 5), null);
			jsonValue.get("currentXP").set(jsonValue.getInt("currentXP") - 
					((((jsonValue.getInt("jobTotalPerfectDump") * perfectXP) + (jsonValue.getInt("jobTotalDump") * dumpXP) +
							(jsonValue.getInt("jobTotalUnofficialDump") * unoffDumpXP) * 1) / 5) + (jsonValue.getInt("jobTotalNotDumped") * (perfectXP * 2))), null);

			while (jsonValue.getInt("currentXP") < previousXpUp){
				if (jsonValue.getInt("level") != 1){
					jsonValue.get("level").set(jsonValue.getInt("level") - 1, null);
					previousXpUp = 0;
					xpUp = 100;
					for (int i = 1; i < jsonValue.getInt("level"); i++){
						float lastXPUp;
						lastXPUp = previousXpUp;
						previousXpUp = xpUp;
						xpUp += (xpUp -lastXPUp) + ((xpUp - lastXPUp) * 0.09f);
					}
					toggleLevelDown = true;
				}
				else {
					jsonValue.get("currentXP").set(0, null);
				}
			}
			if (jsonValue.getInt("junkCoins") < 0) jsonValue.get("junkCoins").set(0, null);
			if (jsonValue.getInt("currentXP") < 0) jsonValue.get("currentXP").set(0, null);
			if (jsonValue.getInt("level") <= 0) jsonValue.get("level").set(1, null);

			junkWorldEngines.setCurrentXP(jsonValue.getInt("currentXP"));
			junkWorldEngines.setLevel(jsonValue.getInt("level"));
			junkWorldEngines.setJunkCoins(jsonValue.getInt("junkCoins"));
			profileFile.writeString(jsonValue.toString(), false);
			stopMusic();
			delayAds = TimeUtils.millis();
			gameState = GAMESTATE.JOB_FAILED;
			manager.get("audioAssets/sound/gameover.ogg", Sound.class).play();
		}
		else {
			profileFile.writeString(jsonValue.toString(), false);
			stopMusic();
			delayAds = TimeUtils.millis();
			gameState = GAMESTATE.ROUND_FAILED;
			manager.get("audioAssets/sound/gameover.ogg", Sound.class).play();
		}

	}

	private void taskDone(){
		jsonValue.get("currentRound").set(jsonValue.getInt("currentRound") + 1, null);
		highestPerfectDumpCombo.sort();
		if (jsonValue.getInt("jobHighestPerfectCombo") < highestPerfectDumpCombo.peek()){
			jsonValue.get("jobHighestPerfectCombo").set(highestPerfectDumpCombo.peek(), null);
		}
		jsonValue.get("jobTotalPerfectDump").set(jsonValue.getInt("jobTotalPerfectDump") + perfectDump, null);
		jsonValue.get("jobTotalDump").set(jsonValue.getInt("jobTotalDump") + dump, null);
		jsonValue.get("jobTotalUnofficialDump").set(jsonValue.getInt("jobTotalUnofficialDump") + unofficialDump, null);
		jsonValue.get("jobTotalNotDumped").set(jsonValue.getInt("jobTotalNotDumped") + notDumped, null);

		rating = (float) (((float)perfectDump + ((float)dump * 0.6) + ((float)unofficialDump * 0.3))/
				((float)perfectDump + (float)dump  + (float)unofficialDump + (float)badDump + (float)notDumped) * 10);
		jsonValue.get("jobRoundRatings").get(jsonValue.getInt("currentRound") - 2).set(rating, null);

		if (jsonValue.getString("currentJob").equals("kitchen")){
			if (jsonValue.getInt("currentRound") > jsonValue.get("rounds").getInt(0)){
				jobReset(0);
				jsonValue.get("kitchenCount").set(jsonValue.getInt("kitchenCount") + 1, null);
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.JOB_COMPLETE;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
				manager.get("audioAssets/sound/applause.ogg", Sound.class).play();
			}
			else {
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.ROUND_SUCCESS;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
			}
		}
		else if (jsonValue.getString("currentJob").equals("basement")){
			if (jsonValue.getInt("currentRound") > jsonValue.get("rounds").getInt(1)){
				jobReset(1);
				jsonValue.get("basementCount").set(jsonValue.getInt("basementCount") + 1, null);
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.JOB_COMPLETE;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
				manager.get("audioAssets/sound/applause.ogg", Sound.class).play();
			}
			else {
				profileFile.writeString(jsonValue.toString(), false);
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.ROUND_SUCCESS;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
			}
		}
		else if (jsonValue.getString("currentJob").equals("garage")){
			if (jsonValue.getInt("currentRound") > jsonValue.get("rounds").getInt(2)){
				jobReset(2);
				jsonValue.get("garageCount").set(jsonValue.getInt("garageCount") + 1, null);
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.JOB_COMPLETE;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
				manager.get("audioAssets/sound/applause.ogg", Sound.class).play();
			}
			else {
				profileFile.writeString(jsonValue.toString(), false);
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.ROUND_SUCCESS;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
			}
		}
		else if (jsonValue.getString("currentJob").equals("backyard")){
			if (jsonValue.getInt("currentRound") > jsonValue.get("rounds").getInt(3)){
				jobReset(3);
				jsonValue.get("backyardCount").set(jsonValue.getInt("backyardCount") + 1, null);
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.JOB_COMPLETE;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
				manager.get("audioAssets/sound/applause.ogg", Sound.class).play();
			}
			else {
				profileFile.writeString(jsonValue.toString(), false);
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.ROUND_SUCCESS;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
			}
		}
		else if (jsonValue.getString("currentJob").equals("sidewalk")){
			if (jsonValue.getInt("currentRound") > jsonValue.get("rounds").getInt(4)){
				jobReset(4);
				jsonValue.get("sidewalkCount").set(jsonValue.getInt("sidewalkCount") + 1, null);
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.JOB_COMPLETE;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
				manager.get("audioAssets/sound/applause.ogg", Sound.class).play();
			}
			else {
				profileFile.writeString(jsonValue.toString(), false);
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.ROUND_SUCCESS;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
			}
		}
		else if (jsonValue.getString("currentJob").equals("factory")){
			if (jsonValue.getInt("currentRound") > jsonValue.get("rounds").getInt(5)){
				jobReset(5);
				jsonValue.get("factoryCount").set(jsonValue.getInt("factoryCount") + 1, null);
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.JOB_COMPLETE;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
				manager.get("audioAssets/sound/applause.ogg", Sound.class).play();
			}
			else {
				profileFile.writeString(jsonValue.toString(), false);
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.ROUND_SUCCESS;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
			}
		}
		else if (jsonValue.getString("currentJob").equals("highway")){
			if (jsonValue.getInt("currentRound") > jsonValue.get("rounds").getInt(6)){
				jobReset(6);
				jsonValue.get("highwayCount").set(jsonValue.getInt("highwayCount") + 1, null);
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.JOB_COMPLETE;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
				manager.get("audioAssets/sound/applause.ogg", Sound.class).play();
			}
			else {
				profileFile.writeString(jsonValue.toString(), false);
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.ROUND_SUCCESS;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
			}
		}
		else if (jsonValue.getString("currentJob").equals("park")){
			if (jsonValue.getInt("currentRound") > jsonValue.get("rounds").getInt(7)){
				jobReset(7);
				jsonValue.get("parkCount").set(jsonValue.getInt("parkCount") + 1, null);
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.JOB_COMPLETE;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
				manager.get("audioAssets/sound/applause.ogg", Sound.class).play();
			}
			else {
				profileFile.writeString(jsonValue.toString(), false);
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.ROUND_SUCCESS;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
			}
		}
		else if (jsonValue.getString("currentJob").equals("sewer")){
			if (jsonValue.getInt("currentRound") > jsonValue.get("rounds").getInt(8)){
				jobReset(8);
				jsonValue.get("sewerCount").set(jsonValue.getInt("sewerCount") + 1, null);
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.JOB_COMPLETE;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
				manager.get("audioAssets/sound/applause.ogg", Sound.class).play();
			}
			else {
				profileFile.writeString(jsonValue.toString(), false);
				stopMusic();
				delayAds = TimeUtils.millis();
				gameState = GAMESTATE.ROUND_SUCCESS;
				manager.get("audioAssets/sound/winning.ogg", Sound.class).play();
			}
		}
		
		profileFile.writeString(jsonValue.toString(), false);
	}

	private void jobReset(int area){
		jobChanger(area);

		switch (jsonValue.getInt("triesLeft")){
		case 1: {
			jsonValue.get("junkCoins").set(jsonValue.getInt("junkCoins") + ((jsonValue.getInt("fee") * 5) / 5), null);
			if ((jsonValue.getInt("currentXP") + 
					(int)((jsonValue.getInt("jobTotalPerfectDump") * perfectXP) + (jsonValue.getInt("jobTotalDump") * dumpXP) +
							(jsonValue.getInt("jobTotalUnofficialDump") * unoffDumpXP) + (((jsonValue.getInt("jobHighestPerfectCombo") * (perfectXP)) * 1) / 3))) <= xpUp
							&& jsonValue.getInt("level") >= 99){
				jsonValue.get("currentXP").set(xpUp, null);
			}
			else {
				jsonValue.get("currentXP").set(jsonValue.getInt("currentXP") + 
						(int)((jsonValue.getInt("jobTotalPerfectDump") * perfectXP) + (jsonValue.getInt("jobTotalDump") * dumpXP) +
								(jsonValue.getInt("jobTotalUnofficialDump") * unoffDumpXP) + (((jsonValue.getInt("jobHighestPerfectCombo") * (perfectXP)) * 1) / 3)), null);
			}
		}; break;
		case 2: {
			jsonValue.get("junkCoins").set(jsonValue.getInt("junkCoins") + (int)(((float)jsonValue.getInt("fee") * 6.5f) / 5), null);
			if ((jsonValue.getInt("currentXP") + 
					(int)((jsonValue.getInt("jobTotalPerfectDump") * perfectXP) + (jsonValue.getInt("jobTotalDump") * dumpXP) +
							(jsonValue.getInt("jobTotalUnofficialDump") * unoffDumpXP) + (((jsonValue.getInt("jobHighestPerfectCombo") * (perfectXP)) * 2) / 3))) >= xpUp
							&& jsonValue.getInt("level") >= 99){
				jsonValue.get("currentXP").set(xpUp, null);
			}
			else {
				jsonValue.get("currentXP").set(jsonValue.getInt("currentXP") + 
						(int)((jsonValue.getInt("jobTotalPerfectDump") * perfectXP) + (jsonValue.getInt("jobTotalDump") * dumpXP) +
								(jsonValue.getInt("jobTotalUnofficialDump") * unoffDumpXP) + (((jsonValue.getInt("jobHighestPerfectCombo") * (perfectXP)) * 2) / 3)), null);
			}
		}; break;
		case 3: {
			jsonValue.get("junkCoins").set(jsonValue.getInt("junkCoins") + ((jsonValue.getInt("fee") * 8) / 5), null);
			if ((jsonValue.getInt("currentXP") + 
					(int)((jsonValue.getInt("jobTotalPerfectDump") * perfectXP) + (jsonValue.getInt("jobTotalDump") * dumpXP) +
							(jsonValue.getInt("jobTotalUnofficialDump") * unoffDumpXP) + (((jsonValue.getInt("jobHighestPerfectCombo") * (perfectXP)) * 3) / 3))) >= xpUp
							&& jsonValue.getInt("level") >= 99){
				jsonValue.get("currentXP").set(xpUp, null);
			}
			else {
				jsonValue.get("currentXP").set(jsonValue.getInt("currentXP") + 
						(int)((jsonValue.getInt("jobTotalPerfectDump") * perfectXP) + (jsonValue.getInt("jobTotalDump") * dumpXP) +
								(jsonValue.getInt("jobTotalUnofficialDump") * unoffDumpXP) + (((jsonValue.getInt("jobHighestPerfectCombo") * (perfectXP)) * 3) / 3)), null);
			}
		}; break;
		default: break;
		}

		while (jsonValue.getInt("currentXP") >= xpUp){
			if (jsonValue.getInt("level") != 100){
				jsonValue.get("level").set(jsonValue.getInt("level") + 1, null);
				previousXpUp = 0;
				xpUp = 100;
				for (int i = 1; i < jsonValue.getInt("level"); i++){
					float lastXPUp;
					lastXPUp = previousXpUp;
					previousXpUp = xpUp;
					xpUp += (xpUp -lastXPUp) + ((xpUp - lastXPUp) * 0.09f);
				}
				toggleLevelUp = true;
			}
			else {
				jsonValue.get("currentXP").set(xpUp, null);
			}
		}

		junkWorldEngines.setLevel(jsonValue.getInt("level"));
		junkWorldEngines.setCurrentXP(jsonValue.getInt("currentXP"));
		profileFile.writeString(jsonValue.toString(), false);

		manager.get("audioAssets/sound/applause.ogg", Sound.class).play();
	}

	private void jobChanger(int area) {
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		Date date = Calendar.getInstance().getTime();

		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		cal.add(Calendar.HOUR, 1);

		Date date2 = new Date();
		date2.setTime(cal.getTimeInMillis());

		Array<Boolean> hasJobArray = new Array<Boolean>();
		int gameMode = 0;
		Random generator = new Random();
		Array<Integer> garbageAmountArray = new Array<Integer>();
		Array<Integer> roundsArray = new Array<Integer>();
		Array<Float> spawnTime = new Array<Float>();
		Array<Integer> timerArray = new Array<Integer>();
		Array<Integer> garbageGoalArrayRandom = new Array<Integer>();
		float[] spawnTimeFloat = new float[5];

		switch (area){
		case 0: {
			if (!junkWorldEngines.getCurrentJob().equals("kitchen")){
				jsonValue.get("jobChangeTimer").get(0).set(df.format(date2));

				hasJobArray.add(true);
				hasJobArray.add(false);
				jsonValue.get("hasJob").get(0).set(hasJobArray.random());
				hasJobArray.clear();

				gameMode = generator.nextInt(3);
				while (gameMode == 0){
					gameMode = generator.nextInt(3);
				}
				jsonValue.get("gameMode").get(0).set(gameMode, null);

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 20){
					timerArray.add(60);
					timerArray.add(75);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 40){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 60){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 80){
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 100){
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				jsonValue.get("timer").get(0).set(timerArray.random(), null);
				timerArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					garbageAmountArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 6 && junkWorldEngines.getLevel() <= 10){
					garbageAmountArray.add(3);
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 20){
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 30){
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 40){
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 50){
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
					garbageAmountArray.add(9);
				}
				else if (junkWorldEngines.getLevel() >= 51 && junkWorldEngines.getLevel() <= 60){
					garbageAmountArray.add(9);
					garbageAmountArray.add(10);
					garbageAmountArray.add(11);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 70){
					garbageAmountArray.add(11);
					garbageAmountArray.add(12);
					garbageAmountArray.add(13);
				}
				else if (junkWorldEngines.getLevel() >= 71 && junkWorldEngines.getLevel() <= 80){
					garbageAmountArray.add(13);
					garbageAmountArray.add(14);
					garbageAmountArray.add(15);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 90){
					garbageAmountArray.add(15);
					garbageAmountArray.add(16);
					garbageAmountArray.add(17);
				}
				else if (junkWorldEngines.getLevel() >= 91){
					garbageAmountArray.add(18);
				}
				jsonValue.get("garbageAmount").get(0).set(garbageAmountArray.random(), null);
				garbageAmountArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					roundsArray.add(1);
					roundsArray.add(2);
				}
				else if (junkWorldEngines.getLevel() >= 5 && junkWorldEngines.getLevel() <= 10){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 15){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
					roundsArray.add(4);
				}
				else {
					for (int i2 = ((junkWorldEngines.getLevel() - 1) / 5) - 1; i2 < ((junkWorldEngines.getLevel() - 1) / 5) + 3; i2++){
						roundsArray.add(i2);
					}
				}
				jsonValue.get("rounds").get(0).set(roundsArray.random(), null);
				roundsArray.clear();

				spawnTime.clear();
				while (spawnTime.size < 5){
					spawnTime.add(0f);
				}
				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 30){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 4) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 60){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 3) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 100){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 2) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				for (int i4 = 0; i4 < spawnTime.size; i4++){
					spawnTimeFloat[i4] = spawnTime.get(i4);
				}
				for (int i3 = 0; i3 < 5; i3++){
					jsonValue.get("spawnTime").get(0).get(i3).set(spawnTimeFloat[i3], null);
				}
				spawnTime.clear();

				for (int i2 = (junkWorldEngines.getLevel() / 4) + 13; i2 < (junkWorldEngines.getLevel() / 4) + 13 + 3; i2++){
					garbageGoalArrayRandom.add(i2);
				}
				jsonValue.get("garbageGoal").get(0).set(garbageGoalArrayRandom.random(), null);
				garbageGoalArrayRandom.clear();
			}
		}; break;
		case 1: {
			if (!junkWorldEngines.getCurrentJob().equals("basement")){
				jsonValue.get("jobChangeTimer").get(1).set(df.format(date2));

				hasJobArray.add(true);
				hasJobArray.add(false);
				jsonValue.get("hasJob").get(1).set(hasJobArray.random());
				hasJobArray.clear();

				gameMode = generator.nextInt(3);
				while (gameMode == 0){
					gameMode = generator.nextInt(3);
				}
				jsonValue.get("gameMode").get(1).set(gameMode, null);

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 20){
					timerArray.add(60);
					timerArray.add(75);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 40){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 60){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 80){
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 100){
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				jsonValue.get("timer").get(1).set(timerArray.random(), null);
				timerArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					garbageAmountArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 6 && junkWorldEngines.getLevel() <= 10){
					garbageAmountArray.add(3);
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 20){
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 30){
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 40){
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 50){
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
					garbageAmountArray.add(9);
				}
				else if (junkWorldEngines.getLevel() >= 51 && junkWorldEngines.getLevel() <= 60){
					garbageAmountArray.add(9);
					garbageAmountArray.add(10);
					garbageAmountArray.add(11);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 70){
					garbageAmountArray.add(11);
					garbageAmountArray.add(12);
					garbageAmountArray.add(13);
				}
				else if (junkWorldEngines.getLevel() >= 71 && junkWorldEngines.getLevel() <= 80){
					garbageAmountArray.add(13);
					garbageAmountArray.add(14);
					garbageAmountArray.add(15);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 90){
					garbageAmountArray.add(15);
					garbageAmountArray.add(16);
					garbageAmountArray.add(17);
				}
				else if (junkWorldEngines.getLevel() >= 91){
					garbageAmountArray.add(18);
				}
				jsonValue.get("garbageAmount").get(1).set(garbageAmountArray.random(), null);
				garbageAmountArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					roundsArray.add(1);
					roundsArray.add(2);
				}
				else if (junkWorldEngines.getLevel() >= 5 && junkWorldEngines.getLevel() <= 10){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 15){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
					roundsArray.add(4);
				}
				else {
					for (int i2 = ((junkWorldEngines.getLevel() - 1) / 5) - 1; i2 < ((junkWorldEngines.getLevel() - 1) / 5) + 3; i2++){
						roundsArray.add(i2);
					}
				}
				jsonValue.get("rounds").get(1).set(roundsArray.random(), null);
				roundsArray.clear();

				spawnTime.clear();
				while (spawnTime.size < 5){
					spawnTime.add(0f);
				}
				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 30){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 4) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 60){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 3) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 100){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 2) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				for (int i4 = 0; i4 < spawnTime.size; i4++){
					spawnTimeFloat[i4] = spawnTime.get(i4);
				}
				for (int i3 = 0; i3 < 5; i3++){
					jsonValue.get("spawnTime").get(1).get(i3).set(spawnTimeFloat[i3], null);
				}
				spawnTime.clear();

				for (int i2 = (junkWorldEngines.getLevel() / 4) + 13; i2 < (junkWorldEngines.getLevel() / 4) + 13 + 3; i2++){
					garbageGoalArrayRandom.add(i2);
				}
				jsonValue.get("garbageGoal").get(1).set(garbageGoalArrayRandom.random(), null);
				garbageGoalArrayRandom.clear();
			}
		}; break;
		case 2: {
			if (!junkWorldEngines.getCurrentJob().equals("garage")){
				jsonValue.get("jobChangeTimer").get(2).set(df.format(date2));

				hasJobArray.add(true);
				hasJobArray.add(false);
				jsonValue.get("hasJob").get(2).set(hasJobArray.random());
				hasJobArray.clear();

				gameMode = generator.nextInt(3);
				while (gameMode == 0){
					gameMode = generator.nextInt(3);
				}
				jsonValue.get("gameMode").get(2).set(gameMode, null);

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 20){
					timerArray.add(60);
					timerArray.add(75);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 40){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 60){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 80){
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 100){
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				jsonValue.get("timer").get(2).set(timerArray.random(), null);
				timerArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					garbageAmountArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 6 && junkWorldEngines.getLevel() <= 10){
					garbageAmountArray.add(3);
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 20){
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 30){
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 40){
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 50){
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
					garbageAmountArray.add(9);
				}
				else if (junkWorldEngines.getLevel() >= 51 && junkWorldEngines.getLevel() <= 60){
					garbageAmountArray.add(9);
					garbageAmountArray.add(10);
					garbageAmountArray.add(11);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 70){
					garbageAmountArray.add(11);
					garbageAmountArray.add(12);
					garbageAmountArray.add(13);
				}
				else if (junkWorldEngines.getLevel() >= 71 && junkWorldEngines.getLevel() <= 80){
					garbageAmountArray.add(13);
					garbageAmountArray.add(14);
					garbageAmountArray.add(15);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 90){
					garbageAmountArray.add(15);
					garbageAmountArray.add(16);
					garbageAmountArray.add(17);
				}
				else if (junkWorldEngines.getLevel() >= 91){
					garbageAmountArray.add(18);
				}
				jsonValue.get("garbageAmount").get(2).set(garbageAmountArray.random(), null);
				garbageAmountArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					roundsArray.add(1);
					roundsArray.add(2);
				}
				else if (junkWorldEngines.getLevel() >= 5 && junkWorldEngines.getLevel() <= 10){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 15){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
					roundsArray.add(4);
				}
				else {
					for (int i2 = ((junkWorldEngines.getLevel() - 1) / 5) - 1; i2 < ((junkWorldEngines.getLevel() - 1) / 5) + 3; i2++){
						roundsArray.add(i2);
					}
				}
				jsonValue.get("rounds").get(2).set(roundsArray.random(), null);
				roundsArray.clear();

				spawnTime.clear();
				while (spawnTime.size < 5){
					spawnTime.add(0f);
				}
				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 30){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 4) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 60){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 3) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 100){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 2) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				for (int i4 = 0; i4 < spawnTime.size; i4++){
					spawnTimeFloat[i4] = spawnTime.get(i4);
				}
				for (int i3 = 0; i3 < 5; i3++){
					jsonValue.get("spawnTime").get(2).get(i3).set(spawnTimeFloat[i3], null);
				}
				spawnTime.clear();

				for (int i2 = (junkWorldEngines.getLevel() / 4) + 13; i2 < (junkWorldEngines.getLevel() / 4) + 13 + 3; i2++){
					garbageGoalArrayRandom.add(i2);
				}
				jsonValue.get("garbageGoal").get(2).set(garbageGoalArrayRandom.random(), null);
				garbageGoalArrayRandom.clear();
			}
		}; break;
		case 3: {
			if (!junkWorldEngines.getCurrentJob().equals("backyard")){
				jsonValue.get("jobChangeTimer").get(3).set(df.format(date2));

				hasJobArray.add(true);
				hasJobArray.add(false);
				jsonValue.get("hasJob").get(3).set(hasJobArray.random());
				hasJobArray.clear();

				gameMode = generator.nextInt(3);
				while (gameMode == 0){
					gameMode = generator.nextInt(3);
				}
				jsonValue.get("gameMode").get(3).set(gameMode, null);

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 20){
					timerArray.add(60);
					timerArray.add(75);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 40){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 60){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 80){
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 100){
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				jsonValue.get("timer").get(3).set(timerArray.random(), null);
				timerArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					garbageAmountArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 6 && junkWorldEngines.getLevel() <= 10){
					garbageAmountArray.add(3);
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 20){
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 30){
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 40){
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 50){
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
					garbageAmountArray.add(9);
				}
				else if (junkWorldEngines.getLevel() >= 51 && junkWorldEngines.getLevel() <= 60){
					garbageAmountArray.add(9);
					garbageAmountArray.add(10);
					garbageAmountArray.add(11);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 70){
					garbageAmountArray.add(11);
					garbageAmountArray.add(12);
					garbageAmountArray.add(13);
				}
				else if (junkWorldEngines.getLevel() >= 71 && junkWorldEngines.getLevel() <= 80){
					garbageAmountArray.add(13);
					garbageAmountArray.add(14);
					garbageAmountArray.add(15);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 90){
					garbageAmountArray.add(15);
					garbageAmountArray.add(16);
					garbageAmountArray.add(17);
				}
				else if (junkWorldEngines.getLevel() >= 91){
					garbageAmountArray.add(18);
				}
				jsonValue.get("garbageAmount").get(3).set(garbageAmountArray.random(), null);
				garbageAmountArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					roundsArray.add(1);
					roundsArray.add(2);
				}
				else if (junkWorldEngines.getLevel() >= 5 && junkWorldEngines.getLevel() <= 10){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 15){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
					roundsArray.add(4);
				}
				else {
					for (int i2 = ((junkWorldEngines.getLevel() - 1) / 5) - 1; i2 < ((junkWorldEngines.getLevel() - 1) / 5) + 3; i2++){
						roundsArray.add(i2);
					}
				}
				jsonValue.get("rounds").get(3).set(roundsArray.random(), null);
				roundsArray.clear();

				spawnTime.clear();
				while (spawnTime.size < 5){
					spawnTime.add(0f);
				}
				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 30){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 4) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 60){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 3) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 100){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 2) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				for (int i4 = 0; i4 < spawnTime.size; i4++){
					spawnTimeFloat[i4] = spawnTime.get(i4);
				}
				for (int i3 = 0; i3 < 5; i3++){
					jsonValue.get("spawnTime").get(3).get(i3).set(spawnTimeFloat[i3], null);
				}
				spawnTime.clear();

				for (int i2 = (junkWorldEngines.getLevel() / 4) + 13; i2 < (junkWorldEngines.getLevel() / 4) + 13 + 3; i2++){
					garbageGoalArrayRandom.add(i2);
				}
				jsonValue.get("garbageGoal").get(3).set(garbageGoalArrayRandom.random(), null);
				garbageGoalArrayRandom.clear();
			}
		}; break;
		case 4: {
			if (!junkWorldEngines.getCurrentJob().equals("sidewalk")){
				jsonValue.get("jobChangeTimer").get(4).set(df.format(date2));

				hasJobArray.add(true);
				hasJobArray.add(false);
				jsonValue.get("hasJob").get(4).set(hasJobArray.random());
				hasJobArray.clear();

				gameMode = generator.nextInt(3);
				while (gameMode == 0){
					gameMode = generator.nextInt(3);
				}
				jsonValue.get("gameMode").get(4).set(gameMode, null);

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 20){
					timerArray.add(60);
					timerArray.add(75);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 40){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 60){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 80){
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 100){
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				jsonValue.get("timer").get(4).set(timerArray.random(), null);
				timerArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					garbageAmountArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 6 && junkWorldEngines.getLevel() <= 10){
					garbageAmountArray.add(3);
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 20){
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 30){
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 40){
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 50){
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
					garbageAmountArray.add(9);
				}
				else if (junkWorldEngines.getLevel() >= 51 && junkWorldEngines.getLevel() <= 60){
					garbageAmountArray.add(9);
					garbageAmountArray.add(10);
					garbageAmountArray.add(11);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 70){
					garbageAmountArray.add(11);
					garbageAmountArray.add(12);
					garbageAmountArray.add(13);
				}
				else if (junkWorldEngines.getLevel() >= 71 && junkWorldEngines.getLevel() <= 80){
					garbageAmountArray.add(13);
					garbageAmountArray.add(14);
					garbageAmountArray.add(15);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 90){
					garbageAmountArray.add(15);
					garbageAmountArray.add(16);
					garbageAmountArray.add(17);
				}
				else if (junkWorldEngines.getLevel() >= 91){
					garbageAmountArray.add(18);
				}
				jsonValue.get("garbageAmount").get(4).set(garbageAmountArray.random(), null);
				garbageAmountArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					roundsArray.add(1);
					roundsArray.add(2);
				}
				else if (junkWorldEngines.getLevel() >= 5 && junkWorldEngines.getLevel() <= 10){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 15){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
					roundsArray.add(4);
				}
				else {
					for (int i2 = ((junkWorldEngines.getLevel() - 1) / 5) - 1; i2 < ((junkWorldEngines.getLevel() - 1) / 5) + 3; i2++){
						roundsArray.add(i2);
					}
				}
				jsonValue.get("rounds").get(4).set(roundsArray.random(), null);
				roundsArray.clear();

				spawnTime.clear();
				while (spawnTime.size < 5){
					spawnTime.add(0f);
				}
				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 30){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 4) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 60){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 3) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 100){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 2) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				for (int i4 = 0; i4 < spawnTime.size; i4++){
					spawnTimeFloat[i4] = spawnTime.get(i4);
				}
				for (int i3 = 0; i3 < 5; i3++){
					jsonValue.get("spawnTime").get(4).get(i3).set(spawnTimeFloat[i3], null);
				}
				spawnTime.clear();

				for (int i2 = (junkWorldEngines.getLevel() / 4) + 13; i2 < (junkWorldEngines.getLevel() / 4) + 13 + 3; i2++){
					garbageGoalArrayRandom.add(i2);
				}
				jsonValue.get("garbageGoal").get(4).set(garbageGoalArrayRandom.random(), null);
				garbageGoalArrayRandom.clear();
			}
		}; break;
		case 5: {
			if (!junkWorldEngines.getCurrentJob().equals("factory")){
				jsonValue.get("jobChangeTimer").get(5).set(df.format(date2));

				hasJobArray.add(true);
				hasJobArray.add(false);
				jsonValue.get("hasJob").get(5).set(hasJobArray.random());
				hasJobArray.clear();

				gameMode = generator.nextInt(3);
				while (gameMode == 0){
					gameMode = generator.nextInt(3);
				}
				jsonValue.get("gameMode").get(5).set(gameMode, null);

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 20){
					timerArray.add(60);
					timerArray.add(75);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 40){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 60){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 80){
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 100){
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				jsonValue.get("timer").get(5).set(timerArray.random(), null);
				timerArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					garbageAmountArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 6 && junkWorldEngines.getLevel() <= 10){
					garbageAmountArray.add(3);
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 20){
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 30){
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 40){
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 50){
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
					garbageAmountArray.add(9);
				}
				else if (junkWorldEngines.getLevel() >= 51 && junkWorldEngines.getLevel() <= 60){
					garbageAmountArray.add(9);
					garbageAmountArray.add(10);
					garbageAmountArray.add(11);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 70){
					garbageAmountArray.add(11);
					garbageAmountArray.add(12);
					garbageAmountArray.add(13);
				}
				else if (junkWorldEngines.getLevel() >= 71 && junkWorldEngines.getLevel() <= 80){
					garbageAmountArray.add(13);
					garbageAmountArray.add(14);
					garbageAmountArray.add(15);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 90){
					garbageAmountArray.add(15);
					garbageAmountArray.add(16);
					garbageAmountArray.add(17);
				}
				else if (junkWorldEngines.getLevel() >= 91){
					garbageAmountArray.add(18);
				}
				jsonValue.get("garbageAmount").get(5).set(garbageAmountArray.random(), null);
				garbageAmountArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					roundsArray.add(1);
					roundsArray.add(2);
				}
				else if (junkWorldEngines.getLevel() >= 5 && junkWorldEngines.getLevel() <= 10){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 15){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
					roundsArray.add(4);
				}
				else {
					for (int i2 = ((junkWorldEngines.getLevel() - 1) / 5) - 1; i2 < ((junkWorldEngines.getLevel() - 1) / 5) + 3; i2++){
						roundsArray.add(i2);
					}
				}
				jsonValue.get("rounds").get(5).set(roundsArray.random(), null);
				roundsArray.clear();

				spawnTime.clear();
				while (spawnTime.size < 5){
					spawnTime.add(0f);
				}
				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 30){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 4) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 60){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 3) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 100){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 2) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				for (int i4 = 0; i4 < spawnTime.size; i4++){
					spawnTimeFloat[i4] = spawnTime.get(i4);
				}
				for (int i3 = 0; i3 < 5; i3++){
					jsonValue.get("spawnTime").get(5).get(i3).set(spawnTimeFloat[i3], null);
				}
				spawnTime.clear();

				for (int i2 = (junkWorldEngines.getLevel() / 4) + 13; i2 < (junkWorldEngines.getLevel() / 4) + 13 + 3; i2++){
					garbageGoalArrayRandom.add(i2);
				}
				jsonValue.get("garbageGoal").get(5).set(garbageGoalArrayRandom.random(), null);
				garbageGoalArrayRandom.clear();
			}
		}; break;
		case 6: {
			if (!junkWorldEngines.getCurrentJob().equals("highway")){
				jsonValue.get("jobChangeTimer").get(6).set(df.format(date2));

				hasJobArray.add(true);
				hasJobArray.add(false);
				jsonValue.get("hasJob").get(6).set(hasJobArray.random());
				hasJobArray.clear();

				gameMode = generator.nextInt(3);
				while (gameMode == 0){
					gameMode = generator.nextInt(3);
				}
				jsonValue.get("gameMode").get(6).set(gameMode, null);

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 20){
					timerArray.add(60);
					timerArray.add(75);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 40){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 60){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 80){
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 100){
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				jsonValue.get("timer").get(6).set(timerArray.random(), null);
				timerArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					garbageAmountArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 6 && junkWorldEngines.getLevel() <= 10){
					garbageAmountArray.add(3);
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 20){
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 30){
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 40){
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 50){
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
					garbageAmountArray.add(9);
				}
				else if (junkWorldEngines.getLevel() >= 51 && junkWorldEngines.getLevel() <= 60){
					garbageAmountArray.add(9);
					garbageAmountArray.add(10);
					garbageAmountArray.add(11);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 70){
					garbageAmountArray.add(11);
					garbageAmountArray.add(12);
					garbageAmountArray.add(13);
				}
				else if (junkWorldEngines.getLevel() >= 71 && junkWorldEngines.getLevel() <= 80){
					garbageAmountArray.add(13);
					garbageAmountArray.add(14);
					garbageAmountArray.add(15);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 90){
					garbageAmountArray.add(15);
					garbageAmountArray.add(16);
					garbageAmountArray.add(17);
				}
				else if (junkWorldEngines.getLevel() >= 91){
					garbageAmountArray.add(18);
				}
				jsonValue.get("garbageAmount").get(6).set(garbageAmountArray.random(), null);
				garbageAmountArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					roundsArray.add(1);
					roundsArray.add(2);
				}
				else if (junkWorldEngines.getLevel() >= 5 && junkWorldEngines.getLevel() <= 10){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 15){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
					roundsArray.add(4);
				}
				else {
					for (int i2 = ((junkWorldEngines.getLevel() - 1) / 5) - 1; i2 < ((junkWorldEngines.getLevel() - 1) / 5) + 3; i2++){
						roundsArray.add(i2);
					}
				}
				jsonValue.get("rounds").get(6).set(roundsArray.random(), null);
				roundsArray.clear();

				spawnTime.clear();
				while (spawnTime.size < 5){
					spawnTime.add(0f);
				}
				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 30){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 4) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 60){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 3) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 100){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 2) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				for (int i4 = 0; i4 < spawnTime.size; i4++){
					spawnTimeFloat[i4] = spawnTime.get(i4);
				}
				for (int i3 = 0; i3 < 5; i3++){
					jsonValue.get("spawnTime").get(6).get(i3).set(spawnTimeFloat[i3], null);
				}
				spawnTime.clear();

				for (int i2 = (junkWorldEngines.getLevel() / 4) + 13; i2 < (junkWorldEngines.getLevel() / 4) + 13 + 3; i2++){
					garbageGoalArrayRandom.add(i2);
				}
				jsonValue.get("garbageGoal").get(6).set(garbageGoalArrayRandom.random(), null);
				garbageGoalArrayRandom.clear();
			}
		}; break;
		case 7: {
			if (!junkWorldEngines.getCurrentJob().equals("park")){
				jsonValue.get("jobChangeTimer").get(7).set(df.format(date2));

				hasJobArray.add(true);
				hasJobArray.add(false);
				jsonValue.get("hasJob").get(7).set(hasJobArray.random());
				hasJobArray.clear();

				gameMode = generator.nextInt(3);
				while (gameMode == 0){
					gameMode = generator.nextInt(3);
				}
				jsonValue.get("gameMode").get(7).set(gameMode, null);

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 20){
					timerArray.add(60);
					timerArray.add(75);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 40){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 60){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 80){
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 100){
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				jsonValue.get("timer").get(7).set(timerArray.random(), null);
				timerArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					garbageAmountArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 6 && junkWorldEngines.getLevel() <= 10){
					garbageAmountArray.add(3);
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 20){
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 30){
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 40){
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 50){
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
					garbageAmountArray.add(9);
				}
				else if (junkWorldEngines.getLevel() >= 51 && junkWorldEngines.getLevel() <= 60){
					garbageAmountArray.add(9);
					garbageAmountArray.add(10);
					garbageAmountArray.add(11);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 70){
					garbageAmountArray.add(11);
					garbageAmountArray.add(12);
					garbageAmountArray.add(13);
				}
				else if (junkWorldEngines.getLevel() >= 71 && junkWorldEngines.getLevel() <= 80){
					garbageAmountArray.add(13);
					garbageAmountArray.add(14);
					garbageAmountArray.add(15);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 90){
					garbageAmountArray.add(15);
					garbageAmountArray.add(16);
					garbageAmountArray.add(17);
				}
				else if (junkWorldEngines.getLevel() >= 91){
					garbageAmountArray.add(18);
				}
				jsonValue.get("garbageAmount").get(7).set(garbageAmountArray.random(), null);
				garbageAmountArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					roundsArray.add(1);
					roundsArray.add(2);
				}
				else if (junkWorldEngines.getLevel() >= 5 && junkWorldEngines.getLevel() <= 10){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 15){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
					roundsArray.add(4);
				}
				else {
					for (int i2 = ((junkWorldEngines.getLevel() - 1) / 5) - 1; i2 < ((junkWorldEngines.getLevel() - 1) / 5) + 3; i2++){
						roundsArray.add(i2);
					}
				}
				jsonValue.get("rounds").get(7).set(roundsArray.random(), null);
				roundsArray.clear();

				spawnTime.clear();
				while (spawnTime.size < 5){
					spawnTime.add(0f);
				}
				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 30){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 4) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 60){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 3) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 100){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 2) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				for (int i4 = 0; i4 < spawnTime.size; i4++){
					spawnTimeFloat[i4] = spawnTime.get(i4);
				}
				for (int i3 = 0; i3 < 5; i3++){
					jsonValue.get("spawnTime").get(7).get(i3).set(spawnTimeFloat[i3], null);
				}
				spawnTime.clear();

				for (int i2 = (junkWorldEngines.getLevel() / 4) + 13; i2 < (junkWorldEngines.getLevel() / 4) + 13 + 3; i2++){
					garbageGoalArrayRandom.add(i2);
				}
				jsonValue.get("garbageGoal").get(7).set(garbageGoalArrayRandom.random(), null);
				garbageGoalArrayRandom.clear();
			}
		}; break;
		case 8: {
			if (!junkWorldEngines.getCurrentJob().equals("sewer")){
				jsonValue.get("jobChangeTimer").get(8).set(df.format(date2));

				hasJobArray.add(true);
				hasJobArray.add(false);
				jsonValue.get("hasJob").get(8).set(hasJobArray.random());
				hasJobArray.clear();

				gameMode = generator.nextInt(3);
				while (gameMode == 0){
					gameMode = generator.nextInt(3);
				}
				jsonValue.get("gameMode").get(8).set(gameMode, null);

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 20){
					timerArray.add(60);
					timerArray.add(75);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 40){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 60){
					timerArray.add(60);
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 80){
					timerArray.add(75);
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 100){
					timerArray.add(90);
					timerArray.add(105);
					timerArray.add(120);
				}
				jsonValue.get("timer").get(8).set(timerArray.random(), null);
				timerArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					garbageAmountArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 6 && junkWorldEngines.getLevel() <= 10){
					garbageAmountArray.add(3);
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 20){
					garbageAmountArray.add(4);
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
				}
				else if (junkWorldEngines.getLevel() >= 21 && junkWorldEngines.getLevel() <= 30){
					garbageAmountArray.add(5);
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 40){
					garbageAmountArray.add(6);
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
				}
				else if (junkWorldEngines.getLevel() >= 41 && junkWorldEngines.getLevel() <= 50){
					garbageAmountArray.add(7);
					garbageAmountArray.add(8);
					garbageAmountArray.add(9);
				}
				else if (junkWorldEngines.getLevel() >= 51 && junkWorldEngines.getLevel() <= 60){
					garbageAmountArray.add(9);
					garbageAmountArray.add(10);
					garbageAmountArray.add(11);
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 70){
					garbageAmountArray.add(11);
					garbageAmountArray.add(12);
					garbageAmountArray.add(13);
				}
				else if (junkWorldEngines.getLevel() >= 71 && junkWorldEngines.getLevel() <= 80){
					garbageAmountArray.add(13);
					garbageAmountArray.add(14);
					garbageAmountArray.add(15);
				}
				else if (junkWorldEngines.getLevel() >= 81 && junkWorldEngines.getLevel() <= 90){
					garbageAmountArray.add(15);
					garbageAmountArray.add(16);
					garbageAmountArray.add(17);
				}
				else if (junkWorldEngines.getLevel() >= 91){
					garbageAmountArray.add(18);
				}
				jsonValue.get("garbageAmount").get(8).set(garbageAmountArray.random(), null);
				garbageAmountArray.clear();

				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 5){
					roundsArray.add(1);
					roundsArray.add(2);
				}
				else if (junkWorldEngines.getLevel() >= 5 && junkWorldEngines.getLevel() <= 10){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
				}
				else if (junkWorldEngines.getLevel() >= 11 && junkWorldEngines.getLevel() <= 15){
					roundsArray.add(1);
					roundsArray.add(2);
					roundsArray.add(3);
					roundsArray.add(4);
				}
				else {
					for (int i2 = ((junkWorldEngines.getLevel() - 1) / 5) - 1; i2 < ((junkWorldEngines.getLevel() - 1) / 5) + 3; i2++){
						roundsArray.add(i2);
					}
				}
				jsonValue.get("rounds").get(8).set(roundsArray.random(), null);
				roundsArray.clear();

				spawnTime.clear();
				while (spawnTime.size < 5){
					spawnTime.add(0f);
				}
				if (junkWorldEngines.getLevel() >= 1 && junkWorldEngines.getLevel() <= 30){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 4) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 31 && junkWorldEngines.getLevel() <= 60){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 3) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				else if (junkWorldEngines.getLevel() >= 61 && junkWorldEngines.getLevel() <= 100){
					for (int i3 = 0; i3 < 5; i3++){
						while (spawnTime.get(i3) < 2) {
							spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
						}
					}
				}
				for (int i4 = 0; i4 < spawnTime.size; i4++){
					spawnTimeFloat[i4] = spawnTime.get(i4);
				}
				for (int i3 = 0; i3 < 5; i3++){
					jsonValue.get("spawnTime").get(8).get(i3).set(spawnTimeFloat[i3], null);
				}
				spawnTime.clear();

				for (int i2 = (junkWorldEngines.getLevel() / 4) + 13; i2 < (junkWorldEngines.getLevel() / 4) + 13 + 3; i2++){
					garbageGoalArrayRandom.add(i2);
				}
				jsonValue.get("garbageGoal").get(8).set(garbageGoalArrayRandom.random(), null);
				garbageGoalArrayRandom.clear();
			}
		}; break;
		default: break;
		}
	}

	private void singlePlayerSuccess(){

		switch (junkWorldEngines.getGameMode()){
		case 1: {
			jsonValue.get("junkCoins").set(jsonValue.getInt("junkCoins") + (perfectDump * perfectJC) + (dump * dumpJC) + (unofficialDump * unoffDumpJC) +
					(highestPerfectDumpCombo.peek() * (perfectJC / 2)), null);
			jsonValue.get("currentXP").set(jsonValue.getInt("currentXP") + (perfectDump * perfectXP) + (dump * dumpXP) + (unofficialDump * unoffDumpXP) +
					(highestPerfectDumpCombo.peek() * (perfectXP / 2)), null);
			
			System.out.println((perfectDump * perfectXP) + (dump * dumpXP) + (unofficialDump * unoffDumpXP) +
					(highestPerfectDumpCombo.peek() * (perfectXP / 2)));

			rating = (float) (((float)perfectDump + ((float)dump * 0.6) + ((float)unofficialDump * 0.3))/
					((float)perfectDump + (float)dump  + (float)unofficialDump + (float)badDump + (float)notDumped) * 10);

			totalScoreNum = currentScore + (perfectDump * 200) + (dump * 100) + (unofficialDump * 50);
		}; break;
		case 2: {
			jsonValue.get("junkCoins").set(jsonValue.getInt("junkCoins") + (perfectDump * perfectJC) + (dump * dumpJC) + (unofficialDump * unoffDumpJC) +
					(highestPerfectDumpCombo.peek() * (perfectJC / 2)), null);
			jsonValue.get("currentXP").set(jsonValue.getInt("currentXP") + (perfectDump * perfectXP) + (dump * dumpXP) + (unofficialDump * unoffDumpXP) +
					(highestPerfectDumpCombo.peek() * (perfectXP / 2)), null);

			rating = (float) (((float)perfectDump + ((float)dump * 0.6) + ((float)unofficialDump * 0.3))/
					((float)perfectDump + (float)dump  + (float)unofficialDump + (float)badDump + (float)notDumped) * 10);

			currentScore -= (badDump * 800) + (notDumped * 1200);
			totalScoreNum = currentScore;
		}; break;
		case 3: {
			jsonValue.get("junkCoins").set(jsonValue.getInt("junkCoins") + (perfectDump * (perfectJC / (3/2))) + (dump * (dumpJC / (3/2))) +
					(unofficialDump * (unoffDumpJC / (3/2))) + (highestPerfectDumpCombo.peek() * ((perfectJC / (3/2)) / 2)), null);
			jsonValue.get("currentXP").set(jsonValue.getInt("currentXP") + (perfectDump * (perfectXP / (3/2))) + (dump * (dumpXP / (3/2))) +
					(unofficialDump * (unoffDumpXP / (3/2))) + (highestPerfectDumpCombo.peek() * (perfectXP / (3/2)) / 2), null);

			rating = (float) (((float)perfectDump + ((float)dump * 0.6) + ((float)unofficialDump * 0.3))/
					((float)perfectDump + (float)dump  + (float)unofficialDump + (float)badDump + (float)notDumped) * 10);

			totalScoreNum = currentScore + (perfectDump * 80) + (dump * 40) + (unofficialDump * 20);

			if (jsonValue.getInt("survivalMinute") < minutes){
				jsonValue.get("survivalMinute").set(minutes, null);
				toggleNewRecord = true;
			}
			if (jsonValue.getInt("survivalSeconds") < seconds){
				jsonValue.get("survivalSeconds").set(seconds, null);
				toggleNewRecord = true;
			}
		}; break;
		default: break;
		}

		if (jsonValue.getInt("highestScoreEver") < totalScoreNum){
			jsonValue.get("highestScoreEver").set(totalScoreNum, null);
			toggleHighestScore = true;
		}

		while (jsonValue.getInt("currentXP") >= xpUp){
			if (jsonValue.getInt("level") != 100){
				jsonValue.get("level").set(jsonValue.getInt("level") + 1, null);
				previousXpUp = 0;
				xpUp = 100;
				for (int i = 1; i < jsonValue.getInt("level"); i++){
					float lastXPUp;
					lastXPUp = previousXpUp;
					previousXpUp = xpUp;
					xpUp += (xpUp -lastXPUp) + ((xpUp - lastXPUp) * 0.09f);
				}
				toggleLevelUp = true;
			}
			else {
				jsonValue.get("currentXP").set(xpUp, null);
			}
		}

		junkWorldEngines.setLevel(jsonValue.getInt("level"));
		junkWorldEngines.setJunkCoins(jsonValue.getInt("junkCoins"));

		profileFile.writeString(jsonValue.toString(), false);
	}

	private void singlePlayerFailed(){
		jsonValue.get("junkCoins").set(jsonValue.getInt("junkCoins") + (int)((perfectDump * (perfectJC / (3/2))) + (dump * (dumpJC / (3/2))) +
				(unofficialDump * (unoffDumpJC / (3/2))) + (highestPerfectDumpCombo.peek() * ((perfectJC / (3/2)) / 2))), null);
		jsonValue.get("currentXP").set(jsonValue.getInt("currentXP") + (int)((perfectDump * (perfectXP / (3/2))) + (dump * (dumpXP / (3/2))) +
				(unofficialDump * (unoffDumpXP / (3/2))) + (highestPerfectDumpCombo.peek() * (perfectXP / (3/2)) / 2)), null);

		rating = (float) (((float)perfectDump + ((float)dump * 0.6) + ((float)unofficialDump * 0.3))/
				((float)perfectDump + (float)dump  + (float)unofficialDump + (float)badDump + (float)notDumped) * 10);

		switch (junkWorldEngines.getGameMode()){
		case 1: {
			totalScoreNum = currentScore + (perfectDump * 150) + (dump * 75) + (unofficialDump * 38);
		}; break;
		case 2: {
			totalScoreNum = currentScore;
		}; break;
		default: break;
		}

		if (jsonValue.getInt("highestScoreEver") < totalScoreNum){
			jsonValue.get("highestScoreEver").set(totalScoreNum, null);
			toggleHighestScore = true;
		}

		while (jsonValue.getInt("currentXP") < previousXpUp){
			if (jsonValue.getInt("level") != 1){
				jsonValue.get("level").set(jsonValue.getInt("level") - 1, null);
				previousXpUp = 0;
				xpUp = 100;
				for (int i = 1; i < jsonValue.getInt("level"); i++){
					float lastXPUp;
					lastXPUp = previousXpUp;
					previousXpUp = xpUp;
					xpUp += (xpUp -lastXPUp) + ((xpUp - lastXPUp) * 0.09f);
				}
				toggleLevelDown = true;
			}
			else {
				jsonValue.get("currentXP").set(0, null);
			}
		}

		junkWorldEngines.setLevel(jsonValue.getInt("level"));
		junkWorldEngines.setJunkCoins(jsonValue.getInt("junkCoins"));

		profileFile.writeString(jsonValue.toString(), false);
	}

	private void loadMusic(){
		switch (junkWorldEngines.getCurrentBackgroundMusic()){
		case 0: {
			if (manager.isLoaded("audioAssets/music/junkWorld.ogg", Music.class)){
				manager.unload("audioAssets/music/junkWorld.ogg");
			}
			if (manager.isLoaded("audioAssets/music/house.ogg", Music.class)){
				manager.unload("audioAssets/music/house.ogg");
			}
			if (manager.isLoaded("audioAssets/music/city.ogg", Music.class)){
				manager.unload("audioAssets/music/city.ogg");
			}
		}; break;
		case 1: {
			if (!manager.isLoaded("audioAssets/music/junkWorld.ogg", Music.class)){
				manager.load("audioAssets/music/junkWorld.ogg", Music.class);
			}
			if (manager.isLoaded("audioAssets/music/house.ogg", Music.class)){
				manager.unload("audioAssets/music/house.ogg");
			}
			if (manager.isLoaded("audioAssets/music/city.ogg", Music.class)){
				manager.unload("audioAssets/music/city.ogg");
			}
		}; break;
		case 2: {
			if (!manager.isLoaded("audioAssets/music/house.ogg", Music.class)){
				manager.load("audioAssets/music/house.ogg", Music.class);
			}
			if (manager.isLoaded("audioAssets/music/junkWorld.ogg", Music.class)){
				manager.unload("audioAssets/music/junkWorld.ogg");
			}
			if (manager.isLoaded("audioAssets/music/city.ogg", Music.class)){
				manager.unload("audioAssets/music/city.ogg");
			}
		}; break;
		case 3: {
			if (!manager.isLoaded("audioAssets/music/city.ogg", Music.class)){
				manager.load("audioAssets/music/city.ogg", Music.class);
			}
			if (manager.isLoaded("audioAssets/music/junkWorld.ogg", Music.class)){
				manager.unload("audioAssets/music/junkWorld.ogg");
			}
			if (manager.isLoaded("audioAssets/music/house.ogg", Music.class)){
				manager.unload("audioAssets/music/house.ogg");
			}
		}; break;
		default: break;
		}
	}

	private void adjustDifficulty(){
		Array<Float> spawnTime = new Array<Float>();
		for (int i = 0; i < 5; i++){
			spawnTime.add(new Float(0f));
		}
		Random generator = new Random();
		Array<Integer> garbageAmountArray = new Array<Integer>();
		junkWorldEngines.setCurrentTutorial(0);
		junkWorldEngines.setMaxTrashNotDumped((jsonValue.getInt("level") / 5) + 3);

		switch ((jsonValue.getInt("level") + 19) / 20){
		case 1: junkWorldEngines.setDumpingSpeed(0.25f); break;
		case 2: junkWorldEngines.setDumpingSpeed(0.5f); break;
		case 3: junkWorldEngines.setDumpingSpeed(0.75f); break;
		case 4: junkWorldEngines.setDumpingSpeed(1); break;
		default: break;
		}

		junkWorldEngines.setDumpsterCapacity((((jsonValue.getInt("level") - 1) / 5) * 1) + 10);

		if (junkWorldEngines.getGameMode() == 1){
			if (junkWorldEngines.getCurrentDifficulty() == 1){
				junkWorldEngines.setGameTimer(60);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 0));
				garbageAmountArray.add(5);
				garbageAmountArray.add(6);
				garbageAmountArray.add(7);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < 4f) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 2){
				junkWorldEngines.setGameTimer(60);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 1));
				garbageAmountArray.add(6);
				garbageAmountArray.add(7);
				garbageAmountArray.add(8);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 3){
				junkWorldEngines.setGameTimer(65);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 2));
				garbageAmountArray.add(7);
				garbageAmountArray.add(8);
				garbageAmountArray.add(9);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f * 2))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 4){
				junkWorldEngines.setGameTimer(65);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 3));
				garbageAmountArray.add(8);
				garbageAmountArray.add(9);
				garbageAmountArray.add(10);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f * 3))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 5){
				junkWorldEngines.setGameTimer(70);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 4));
				garbageAmountArray.add(9);
				garbageAmountArray.add(10);
				garbageAmountArray.add(11);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f * 4))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 6){
				junkWorldEngines.setGameTimer(70);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 5));
				garbageAmountArray.add(10);
				garbageAmountArray.add(11);
				garbageAmountArray.add(12);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f * 5))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 7){
				junkWorldEngines.setGameTimer(75);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 6));
				garbageAmountArray.add(11);
				garbageAmountArray.add(12);
				garbageAmountArray.add(13);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f * 6))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 8){
				junkWorldEngines.setGameTimer(80);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 7));
				garbageAmountArray.add(12);
				garbageAmountArray.add(13);
				garbageAmountArray.add(14);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f * 7))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 9){
				junkWorldEngines.setGameTimer(85);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 8));
				garbageAmountArray.add(13);
				garbageAmountArray.add(14);
				garbageAmountArray.add(15);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f * 8))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 10){
				junkWorldEngines.setGameTimer(90);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 9));
				garbageAmountArray.add(14);
				garbageAmountArray.add(15);
				garbageAmountArray.add(16);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f * 9))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
		}
		else if (junkWorldEngines.getGameMode() == 2){
			if (junkWorldEngines.getCurrentDifficulty() == 1){
				junkWorldEngines.setGarbageGoal(8);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 0));
				garbageAmountArray.add(5);
				garbageAmountArray.add(6);
				garbageAmountArray.add(7);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < 4f) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 2){
				junkWorldEngines.setGarbageGoal(10);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 1));
				garbageAmountArray.add(6);
				garbageAmountArray.add(7);
				garbageAmountArray.add(8);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 3){
				junkWorldEngines.setGarbageGoal(12);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 2));
				garbageAmountArray.add(7);
				garbageAmountArray.add(8);
				garbageAmountArray.add(9);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f * 2))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 4){
				junkWorldEngines.setGarbageGoal(14);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 3));
				garbageAmountArray.add(8);
				garbageAmountArray.add(9);
				garbageAmountArray.add(10);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f * 3))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 5){
				junkWorldEngines.setGarbageGoal(16);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 4));
				garbageAmountArray.add(9);
				garbageAmountArray.add(10);
				garbageAmountArray.add(11);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f * 4))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 6){
				junkWorldEngines.setGarbageGoal(18);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 5));
				garbageAmountArray.add(10);
				garbageAmountArray.add(11);
				garbageAmountArray.add(12);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f * 5))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 7){
				junkWorldEngines.setGarbageGoal(20);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 6));
				garbageAmountArray.add(11);
				garbageAmountArray.add(12);
				garbageAmountArray.add(13);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f * 6))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 8){
				junkWorldEngines.setGarbageGoal(22);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 7));
				garbageAmountArray.add(12);
				garbageAmountArray.add(13);
				garbageAmountArray.add(14);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f * 7))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 9){
				junkWorldEngines.setGarbageGoal(24);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 8));
				garbageAmountArray.add(13);
				garbageAmountArray.add(14);
				garbageAmountArray.add(15);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f * 8))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			if (junkWorldEngines.getCurrentDifficulty() == 10){
				junkWorldEngines.setGarbageGoal(26);
				junkWorldEngines.setTrashAccerleration(0.05f + (0.09f * 9));
				garbageAmountArray.add(14);
				garbageAmountArray.add(15);
				garbageAmountArray.add(16);
				junkWorldEngines.setGarbageAmount(garbageAmountArray.random());
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (0.15f * 9))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
		}
		else if (junkWorldEngines.getGameMode() == 3){
			junkWorldEngines.setCurrentDifficulty((jsonValue.getInt("level") + 9)/ 10);
			junkWorldEngines.setGameTimer(0);
			junkWorldEngines.setTrashAccerleration(0.05f);
			if (jsonValue.getInt("level") >= 1 && jsonValue.getInt("level") <= 10){
				junkWorldEngines.setGarbageAmount(3);
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (.1f * 0))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			else if (jsonValue.getInt("level") >= 11 && jsonValue.getInt("level") <= 20){
				junkWorldEngines.setGarbageAmount(4);
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (.1f * 1))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			else if (jsonValue.getInt("level") >= 21 && jsonValue.getInt("level") <= 30){
				junkWorldEngines.setGarbageAmount(5);
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (.1f * 2))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			else if (jsonValue.getInt("level") >= 31 && jsonValue.getInt("level") <= 40){
				junkWorldEngines.setGarbageAmount(6);
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (.1f * 3))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			else if (jsonValue.getInt("level") >= 41 && jsonValue.getInt("level") <= 50){
				junkWorldEngines.setGarbageAmount(7);
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (.1f * 4))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			else if (jsonValue.getInt("level") >= 51 && jsonValue.getInt("level") <= 60){
				junkWorldEngines.setGarbageAmount(8);
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (.1f * 5))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			else if (jsonValue.getInt("level") >= 61 && jsonValue.getInt("level") <= 70){
				junkWorldEngines.setGarbageAmount(9);
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (.1f * 6))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			else if (jsonValue.getInt("level") >= 71 && jsonValue.getInt("level") <= 80){
				junkWorldEngines.setGarbageAmount(10);
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (.1f * 7))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			else if (jsonValue.getInt("level") >= 81 && jsonValue.getInt("level") <= 90){
				junkWorldEngines.setGarbageAmount(11);
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (.1f * 8))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
			else if (jsonValue.getInt("level") >= 91 && jsonValue.getInt("level") <= 100){
				junkWorldEngines.setGarbageAmount(12);
				for (int i3 = 0; i3 < 5; i3++){
					while (spawnTime.get(i3) < (4f - (.1f * 9))) {
						spawnTime.set(i3, generator.nextFloat() + generator.nextInt(5));
					}
				}
				junkWorldEngines.setSpawnTime(spawnTime);
			}
		}
	}

	private void playMusic(){
		if (playMusic){
			playMusic = false;
			switch (junkWorldEngines.getCurrentBackgroundMusic()){
			case 0: {
				if (manager.isLoaded("audioAssets/music/city.ogg", Music.class)){
					manager.get("audioAssets/music/city.ogg", Music.class).stop();
				}
				if (manager.isLoaded("audioAssets/music/junkWorld.ogg", Music.class)){
					manager.get("audioAssets/music/junkWorld.ogg", Music.class).stop();
				}
				if (manager.isLoaded("audioAssets/music/house.ogg", Music.class)){
					manager.get("audioAssets/music/house.ogg", Music.class).stop();
				}
			}; break;
			case 1: {
				if (!manager.get("audioAssets/music/junkWorld.ogg", Music.class).isPlaying()){
					manager.get("audioAssets/music/junkWorld.ogg", Music.class).setLooping(true);
					manager.get("audioAssets/music/junkWorld.ogg", Music.class).play();
				}
			}; break;
			case 2: {
				if (!manager.get("audioAssets/music/house.ogg", Music.class).isPlaying()){
					manager.get("audioAssets/music/house.ogg", Music.class).setLooping(true);
					manager.get("audioAssets/music/house.ogg", Music.class).play();
				}
			}; break;
			case 3: {
				if (!manager.get("audioAssets/music/city.ogg", Music.class).isPlaying()){
					manager.get("audioAssets/music/city.ogg", Music.class).setLooping(true);
					manager.get("audioAssets/music/city.ogg", Music.class).play();
				}
			}; break;
			default: break;
			}
		}
	}

	private void setJunkWorldMusic(){
		if (junkWorldEngines.getCurrentBackgroundMusic() != 0){
			if (junkWorldEngines.getTheme() == 1 ||
					junkWorldEngines.getTheme() == 2 ||
					junkWorldEngines.getTheme() == 3 ||
					junkWorldEngines.getTheme() == 4 ||
					junkWorldEngines.getTheme() == 5){
				junkWorldEngines.setCurrentBackgroundMusic(2);
			}
			else if (junkWorldEngines.getTheme() == 6 ||
					junkWorldEngines.getTheme() == 7 ||
					junkWorldEngines.getTheme() == 8 ||
					junkWorldEngines.getTheme() == 9){
				junkWorldEngines.setCurrentBackgroundMusic(3);
			}
			else if (junkWorldEngines.getTheme() == 0){
				junkWorldEngines.setCurrentBackgroundMusic(1);
			}
		}
	}

	private void resetJunkWorldMusic(){
		if (junkWorldEngines.getCurrentBackgroundMusic() != 0){
			junkWorldEngines.setCurrentBackgroundMusic(1);
		}
	}

	private void stopMusic(){
		switch (junkWorldEngines.getCurrentBackgroundMusic()){
		case 0: {
		}; break;
		case 1: {
			if (manager.get("audioAssets/music/junkWorld.ogg", Music.class).isPlaying()){
				manager.get("audioAssets/music/junkWorld.ogg", Music.class).stop();
			}
		}; break;
		case 2: {
			if (manager.get("audioAssets/music/house.ogg", Music.class).isPlaying()){
				manager.get("audioAssets/music/house.ogg", Music.class).stop();
			}
		}; break;
		case 3: {
			if (manager.get("audioAssets/music/city.ogg", Music.class).isPlaying()){
				manager.get("audioAssets/music/city.ogg", Music.class).stop();
			}
		}; break;
		default: break;
		}
	}

	private void unlockables(){
		if (jsonValue.getInt("level") >= 6) jsonValue.get("diff2").set(true);
		if (jsonValue.getInt("level") >= 16) jsonValue.get("diff3").set(true);
		if (jsonValue.getInt("level") >= 26) jsonValue.get("diff4").set(true);
		if (jsonValue.getInt("level") >= 36) jsonValue.get("diff5").set(true);
		if (jsonValue.getInt("level") >= 46) jsonValue.get("diff6").set(true);
		if (jsonValue.getInt("level") >= 56) jsonValue.get("diff7").set(true);
		if (jsonValue.getInt("level") >= 66) jsonValue.get("diff8").set(true);
		if (jsonValue.getInt("level") >= 76) jsonValue.get("diff9").set(true);
		if (jsonValue.getInt("level") >= 86) jsonValue.get("diff10").set(true);

		if (jsonValue.getInt("level") >= 20) junkWorldEngines.setPalette3Unlocked(true);
		if (jsonValue.getInt("level") >= 40) junkWorldEngines.setPalette4Unlocked(true);

		if (jsonValue.getInt("level") >= 1) junkWorldEngines.setKitchenUnlocked(true);
		if (jsonValue.getInt("level") >= 4) junkWorldEngines.setBasementUnlocked(true);
		if (jsonValue.getInt("level") >= 6) junkWorldEngines.setGarageUnlocked(true);
		if (jsonValue.getInt("level") >= 8) junkWorldEngines.setBackyardUnlocked(true);
		if (jsonValue.getInt("level") >= 10) junkWorldEngines.setSidewalkUnlocked(true);
		if (jsonValue.getInt("level") >= 12) junkWorldEngines.setFactoryUnlocked(true);
		if (jsonValue.getInt("level") >= 14) junkWorldEngines.setHighwayUnlocked(true);
		if (jsonValue.getInt("level") >= 16) junkWorldEngines.setParkUnlocked(true);
		if (jsonValue.getInt("level") >= 18) junkWorldEngines.setSewerUnlocked(true);

		if (jsonValue.getInt("level") >= 4) junkWorldEngines.setIceflake(true);
		if (jsonValue.getInt("level") >= 8) junkWorldEngines.setSwitchMachine(true);
		if (jsonValue.getInt("level") >= 16) junkWorldEngines.setAugmentedBurst(true);
		if (jsonValue.getInt("level") >= 24) junkWorldEngines.setSticker(true);

		if (jsonValue.getInt("level") >= 20) junkWorldEngines.setTotalUnlockedItemsSlots(3);
		if (jsonValue.getInt("level") >= 40) junkWorldEngines.setTotalUnlockedItemsSlots(4);
		if (jsonValue.getInt("level") >= 60) junkWorldEngines.setTotalUnlockedItemsSlots(5);
		if (jsonValue.getInt("level") >= 80) junkWorldEngines.setTotalUnlockedItemsSlots(6);

		if (jsonValue.getInt("level") >= 5) junkWorldEngines.setScorchingCanUnlocked(true);
		if (jsonValue.getInt("level") >= 10) junkWorldEngines.setVacuumCanUnlocked(true);
		if (jsonValue.getInt("level") >= 15) junkWorldEngines.setTrashBlowerUnlocked(true);
		if (jsonValue.getInt("level") >= 20) junkWorldEngines.setDullCanUnlocked(true);
		if (jsonValue.getInt("level") >= 25) junkWorldEngines.setSwiftCanUnlocked(true);

		if (jsonValue.getInt("kitchenCount") >= 10) jsonValue.get("kitchen").set(true);
		if (jsonValue.getInt("basementCount") >= 10) jsonValue.get("basement").set(true);
		if (jsonValue.getInt("garageCount") >= 10) jsonValue.get("garage").set(true);
		if (jsonValue.getInt("backyardCount") >= 10) jsonValue.get("backyard").set(true);
		if (jsonValue.getInt("sidewalkCount") >= 10) jsonValue.get("sidewalk").set(true);
		if (jsonValue.getInt("factoryCount") >= 10) jsonValue.get("factory").set(true);
		if (jsonValue.getInt("highwayCount") >= 10) jsonValue.get("highway").set(true);
		if (jsonValue.getInt("parkCount") >= 10) jsonValue.get("park").set(true);
		if (jsonValue.getInt("sewerCount") >= 10) jsonValue.get("sewer").set(true);

		if (jsonValue.getInt("level") >= 5) jsonValue.get("dumpingJob").set(true);
		if (jsonValue.getInt("level") >= 10) jsonValue.get("survival").set(true);

		profileFile.writeString(jsonValue.toString(), false);
	}

	private void drawJobSuccessAnim(){
		if (delayApplause != 0){
			if (TimeUtils.millis() - delayApplause < 100){
				batch.draw(explodingCans.get(0), 0, 620);
				batch.draw(explodingCans.get(0), 512 - 150, 620);
			}
			else if (TimeUtils.millis() - delayApplause >= 100 && TimeUtils.millis() - delayApplause < 200){
				batch.draw(explodingCans.get(1), 0, 620);
				batch.draw(explodingCans.get(1), 512 - 150, 620);
			}
			else if (TimeUtils.millis() - delayApplause >= 200 && TimeUtils.millis() - delayApplause < 300){
				batch.draw(explodingCans.get(2), 0, 620);
				batch.draw(explodingCans.get(2), 512 - 150, 620);
			}
			else if (TimeUtils.millis() - delayApplause >= 300 && TimeUtils.millis() - delayApplause < 400){
				batch.draw(explodingCans.get(1), 0, 620);
				batch.draw(explodingCans.get(1), 512 - 150, 620);
			}
			else if (TimeUtils.millis() - delayApplause >= 400 && TimeUtils.millis() - delayApplause < 500){
				batch.draw(explodingCans.get(0), 0, 620);
				batch.draw(explodingCans.get(0), 512 - 150, 620);
				batch.draw(bombRegions.get(0), 0, 620, 150, 150);
				batch.draw(bombRegions.get(0), 512 - 150, 620, 150, 150);
			}
			else if (TimeUtils.millis() - delayApplause >= 500 && TimeUtils.millis() - delayApplause < 600){
				batch.draw(explodingCans.get(1), 0, 620);
				batch.draw(explodingCans.get(1), 512 - 150, 620);
				batch.draw(bombRegions.get(1), 0, 620, 150, 150);
				batch.draw(bombRegions.get(1), 512 - 150, 620, 150, 150);
			}
			else if (TimeUtils.millis() - delayApplause >= 600 && TimeUtils.millis() - delayApplause < 700){
				batch.draw(explodingCans.get(2), 0, 620);
				batch.draw(explodingCans.get(2), 512 - 150, 620);
				batch.draw(bombRegions.get(2), 0, 620, 150, 150);
				batch.draw(bombRegions.get(2), 512 - 150, 620, 150, 150);
			}
			else if (TimeUtils.millis() - delayApplause >= 700 && TimeUtils.millis() - delayApplause < 800){
				batch.draw(explodingCans.get(1), 0, 620);
				batch.draw(explodingCans.get(1), 512 - 150, 620);
				batch.draw(bombRegions.get(3), 0, 620, 150, 150);
				batch.draw(bombRegions.get(3), 512 - 150, 620, 150, 150);
			}
			else if (TimeUtils.millis() - delayApplause >= 800 && TimeUtils.millis() - delayApplause < 900){
				batch.draw(explodingCans.get(0), 0, 620);
				batch.draw(explodingCans.get(0), 512 - 150, 620);
				batch.draw(bombRegions.get(4), 0, 620, 150, 150);
				batch.draw(bombRegions.get(4), 512 - 150, 620, 150, 150);
			}
			else if (TimeUtils.millis() - delayApplause >= 900 && TimeUtils.millis() - delayApplause < 1000){
				batch.draw(explodingCans.get(1), 0, 620);
				batch.draw(explodingCans.get(1), 512 - 150, 620);
				batch.draw(bombRegions.get(5), 0, 620, 150, 150);
				batch.draw(bombRegions.get(5), 512 - 150, 620, 150, 150);
			}
			else if (TimeUtils.millis() - delayApplause >= 1000 && TimeUtils.millis() - delayApplause < 1100){
				batch.draw(bombRegions.get(6), 0, 620, 150, 150);
				batch.draw(bombRegions.get(6), 512 - 150, 620, 150, 150);
			}
			else if (TimeUtils.millis() - delayApplause >= 1100 && TimeUtils.millis() - delayApplause < 1200){
				batch.draw(bombRegions.get(7), 0, 620, 150, 150);
				batch.draw(bombRegions.get(7), 512 - 150, 620, 150, 150);
			}
			else if (TimeUtils.millis() - delayApplause >= 1200 && TimeUtils.millis() - delayApplause < 1300){
				batch.draw(bombRegions.get(8), 0, 620, 150, 150);
				batch.draw(bombRegions.get(8), 512 - 150, 620, 150, 150);
			}
			else if (TimeUtils.millis() - delayApplause >= 1300 && TimeUtils.millis() - delayApplause < 1400){
				batch.draw(bombRegions.get(9), 0, 620, 150, 150);
				batch.draw(bombRegions.get(9), 512 - 150, 620, 150, 150);
			}
			else if (TimeUtils.millis() - delayApplause >= 1400 && TimeUtils.millis() - delayApplause < 1500){
				batch.draw(bombRegions.get(10), 0, 620, 150, 150);
				batch.draw(bombRegions.get(10), 512 - 150, 620, 150, 150);
			}
			else {
				delayApplause = 0;
			}
		}
	}

	private void loadAds(){
		if (delayAds != 0){
			if (Gdx.input.justTouched()){
				delayAds = TimeUtils.millis();
			}
			if (TimeUtils.millis() - delayAds >= 5000 && junkWorldEngines.getGameSelection() == 1 && junkWorldEngines.getGameMode() == 0){
				delayAds = TimeUtils.millis();
//				myRequestHandler.showAds2(true);
			}
		}
	}

	@Override
	public void resize(int width, int height) {

	}

	@Override
	public void show() {
	}

	@Override
	public void hide() {

	}

	@Override
	public void pause() {
		switch (gameState){
		case GAMEOVER: previousGameState = PreviousGameState.GAMEOVER;
		break;
		case JOB_COMPLETE: previousGameState = PreviousGameState.JOB_COMPLETE;
		break;
		case JOB_FAILED: previousGameState = PreviousGameState.JOB_FAILED;
		break;
		case GOAL_SUCCESS: previousGameState = PreviousGameState.GOAL_SUCCESS;
		break;
		case PAUSE:previousGameState = PreviousGameState.PAUSE;
		break;
		case ROUND_FAILED:previousGameState = PreviousGameState.ROUND_FAILED;
		break;
		case ROUND_SUCCESS:previousGameState = PreviousGameState.ROUND_SUCCESS;
		break;
		case RUNNING:previousGameState = PreviousGameState.RUNNING;
		break;
		case STARTED:previousGameState = PreviousGameState.STARTED;
		break;
		case TIMES_UP:previousGameState = PreviousGameState.TIMES_UP;
		break;
		case TUTORIAL:previousGameState = PreviousGameState.TUTORIAL;
		break;
		case UNPAUSABLE:previousGameState = PreviousGameState.UNPAUSABLE;
		break;
		default:
			break;
		}
		gameState = GAMESTATE.PAUSE;
	}

	@Override
	public void resume() {
		switch (previousGameState){
		case GAMEOVER: gameState = GAMESTATE.GAMEOVER;
		break;
		case JOB_COMPLETE: gameState = GAMESTATE.JOB_COMPLETE;
		break;
		case JOB_FAILED: gameState = GAMESTATE.JOB_FAILED;
		break;
		case GOAL_SUCCESS: gameState = GAMESTATE.GOAL_SUCCESS;
		break;
		case PAUSE:gameState = GAMESTATE.PAUSE;
		break;
		case ROUND_FAILED:gameState = GAMESTATE.ROUND_FAILED;
		break;
		case ROUND_SUCCESS:gameState = GAMESTATE.ROUND_SUCCESS;
		break;
		case RUNNING:gameState = GAMESTATE.RUNNING;
		break;
		case STARTED:gameState = GAMESTATE.STARTED;
		break;
		case TIMES_UP:gameState = GAMESTATE.TIMES_UP;
		break;
		case TUTORIAL:gameState = GAMESTATE.TUTORIAL;
		break;
		case UNPAUSABLE:gameState = GAMESTATE.UNPAUSABLE;
		break;
		default:
			break;
		}
	}

	@Override
	public void dispose() {
	}

}
